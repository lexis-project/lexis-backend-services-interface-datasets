// Code generated by go-swagger; DO NOT EDIT.

package restapi

import (
	"context"
	"encoding/json"
	"fmt"
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/loads"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/runtime/security"

	"code.it4i.cz/lexis/wp8/dataset-management-interface.git/restapi/operations"
	"code.it4i.cz/lexis/wp8/dataset-management-interface.git/restapi/operations/data_set_management"
	"code.it4i.cz/lexis/wp8/dataset-management-interface.git/restapi/operations/staging"
	"code.it4i.cz/lexis/wp8/dataset-management-interface.git/restapi/operations/status_management"
)

type contextKey string

const AuthKey contextKey = "Auth"

//go:generate mockery -name DataSetManagementAPI -inpkg

/* DataSetManagementAPI  */
type DataSetManagementAPI interface {
	/* AddGridmapEntry Add a DN entry to the DDI B2STAGE GridFTP service */
	AddGridmapEntry(ctx context.Context, params data_set_management.AddGridmapEntryParams) middleware.Responder

	/* AddProjectAdmin Add an administrator user to a project in iRODS WP3 DDI */
	AddProjectAdmin(ctx context.Context, params data_set_management.AddProjectAdminParams) middleware.Responder

	/* AddProjectUser Add a user to a project in iRODS WP3 DDI */
	AddProjectUser(ctx context.Context, params data_set_management.AddProjectUserParams) middleware.Responder

	/* AddSupportUser Add a user to a support duties in iRODS WP3 DDI */
	AddSupportUser(ctx context.Context, params data_set_management.AddSupportUserParams) middleware.Responder

	/* Certificate download public key for WP3 APIs */
	Certificate(ctx context.Context, params data_set_management.CertificateParams) middleware.Responder

	/* CheckCompressionEncryptionStatus Check the status of compression with encryption */
	CheckCompressionEncryptionStatus(ctx context.Context, params data_set_management.CheckCompressionEncryptionStatusParams) middleware.Responder

	/* CheckCompressionStatus Check the status of a compression */
	CheckCompressionStatus(ctx context.Context, params data_set_management.CheckCompressionStatusParams) middleware.Responder

	/* CheckDecompressionStatus Check the status of a decompression */
	CheckDecompressionStatus(ctx context.Context, params data_set_management.CheckDecompressionStatusParams) middleware.Responder

	/* CheckDecryptionDecompressionStatus Check the status of decryption with decompression */
	CheckDecryptionDecompressionStatus(ctx context.Context, params data_set_management.CheckDecryptionDecompressionStatusParams) middleware.Responder

	/* CheckDecryptionStatus Check the status of a decryption */
	CheckDecryptionStatus(ctx context.Context, params data_set_management.CheckDecryptionStatusParams) middleware.Responder

	/* CheckEncryptionStatus Check the status of a encryption */
	CheckEncryptionStatus(ctx context.Context, params data_set_management.CheckEncryptionStatusParams) middleware.Responder

	/* CheckPIDStatus This is called when a user requests to check the status of the PID assignment */
	CheckPIDStatus(ctx context.Context, params data_set_management.CheckPIDStatusParams) middleware.Responder

	/* CheckPermission Check if a user has permission to access a DDI location for writing */
	CheckPermission(ctx context.Context, params data_set_management.CheckPermissionParams) middleware.Responder

	/* CheckReplicateStatus This is called when a user requests to check the status of his data replication */
	CheckReplicateStatus(ctx context.Context, params data_set_management.CheckReplicateStatusParams) middleware.Responder

	/* CheckSizeStatus This is called when a user requests to check the status of datasize request */
	CheckSizeStatus(ctx context.Context, params data_set_management.CheckSizeStatusParams) middleware.Responder

	/* Compress Compress a dataset or subdataset (by enqueuing the request for latter processing) */
	Compress(ctx context.Context, params data_set_management.CompressParams) middleware.Responder

	/* CompressEncrypt Compress and encrypt a dataset or subdataset (by enqueuing the request for latter processing) */
	CompressEncrypt(ctx context.Context, params data_set_management.CompressEncryptParams) middleware.Responder

	/* CreateProject Create a project in iRODS WP3 DDI */
	CreateProject(ctx context.Context, params data_set_management.CreateProjectParams) middleware.Responder

	/* CreateSSHFSExport Export a directory of the DDI for use via SSHFS */
	CreateSSHFSExport(ctx context.Context, params data_set_management.CreateSSHFSExportParams) middleware.Responder

	/* CreateUser Create a user in iRODS WP3 DDI and connect to Keycloak */
	CreateUser(ctx context.Context, params data_set_management.CreateUserParams) middleware.Responder

	/* Decompress Decompress a dataset or subdataset (by enqueuing the request for latter processing) */
	Decompress(ctx context.Context, params data_set_management.DecompressParams) middleware.Responder

	/* Decrypt Decrypt a dataset or subdataset (by enqueuing the request for latter processing) */
	Decrypt(ctx context.Context, params data_set_management.DecryptParams) middleware.Responder

	/* DecryptDecompress Decrypt and decompress a dataset or subdataset (by enqueuing the request for latter processing) */
	DecryptDecompress(ctx context.Context, params data_set_management.DecryptDecompressParams) middleware.Responder

	/* DeleteDataset Delete Dataset */
	DeleteDataset(ctx context.Context, params data_set_management.DeleteDatasetParams) middleware.Responder

	/* DeleteDatasetByMetadata Search for datasets based on metadata, and delete them */
	DeleteDatasetByMetadata(ctx context.Context, params data_set_management.DeleteDatasetByMetadataParams) middleware.Responder

	/* DeleteProject Delete a project in iRODS WP3 DDI */
	DeleteProject(ctx context.Context, params data_set_management.DeleteProjectParams) middleware.Responder

	/* DeleteProjectAdmin Remove user from project in iRODS WP3 DDI */
	DeleteProjectAdmin(ctx context.Context, params data_set_management.DeleteProjectAdminParams) middleware.Responder

	/* DeleteProjectUser Remove user from project in iRODS WP3 DDI */
	DeleteProjectUser(ctx context.Context, params data_set_management.DeleteProjectUserParams) middleware.Responder

	/* DeleteSSHFSExport Export a directory of the DDI for use via SSHFS */
	DeleteSSHFSExport(ctx context.Context, params data_set_management.DeleteSSHFSExportParams) middleware.Responder

	/* DeleteSupportUser Remove user from support duties in iRODS WP3 DDI */
	DeleteSupportUser(ctx context.Context, params data_set_management.DeleteSupportUserParams) middleware.Responder

	/* DeleteUser Delete a user in iRODS WP3 DDI */
	DeleteUser(ctx context.Context, params data_set_management.DeleteUserParams) middleware.Responder

	/* DownloadDataset DownloadDataset */
	DownloadDataset(ctx context.Context, params data_set_management.DownloadDatasetParams) middleware.Responder

	/* Encrypt Encrypt a dataset or subdataset (by enqueuing the request for latter processing) */
	Encrypt(ctx context.Context, params data_set_management.EncryptParams) middleware.Responder

	/* FilePatch Used to resume the upload */
	FilePatch(ctx context.Context, params data_set_management.FilePatchParams) middleware.Responder

	/* FilesDelete Added by the Termination extension. */
	FilesDelete(ctx context.Context, params data_set_management.FilesDeleteParams) middleware.Responder

	/* FilesHead Used to determine the offset at which the upload should be continued. */
	FilesHead(ctx context.Context, params data_set_management.FilesHeadParams) middleware.Responder

	/* Listing List file contents of a dataset. */
	Listing(ctx context.Context, params data_set_management.ListingParams) middleware.Responder

	/* OptionsDatasetUpload Request to gather information about the Server's current configuration */
	OptionsDatasetUpload(ctx context.Context, params data_set_management.OptionsDatasetUploadParams) middleware.Responder

	/* PID This is called when a user requests PID assignment to a dataset. */
	PID(ctx context.Context, params data_set_management.PIDParams) middleware.Responder

	/* PostDatasetUpload An empty POST request is used to create a new upload resource. The Upload-Length header indicates the size of the entire upload in bytes. */
	PostDatasetUpload(ctx context.Context, params data_set_management.PostDatasetUploadParams) middleware.Responder

	/* PostStagingDownload Download from staging zone */
	PostStagingDownload(ctx context.Context, params data_set_management.PostStagingDownloadParams) middleware.Responder

	/* QueryDatasets Search for datasets based on metadata */
	QueryDatasets(ctx context.Context, params data_set_management.QueryDatasetsParams) middleware.Responder

	/* RemoveGridmapEntry Remove a DN entry to the DDI B2STAGE GridFTP service */
	RemoveGridmapEntry(ctx context.Context, params data_set_management.RemoveGridmapEntryParams) middleware.Responder

	/* Replicate This is called when a user requests data to be replicated between different systems. The request will be added to the jobs queue. */
	Replicate(ctx context.Context, params data_set_management.ReplicateParams) middleware.Responder

	/* Size This is called when a user requests size of a dataset. */
	Size(ctx context.Context, params data_set_management.SizeParams) middleware.Responder

	/* CreateDataset Create a dataset */
	CreateDataset(ctx context.Context, params data_set_management.CreateDatasetParams) middleware.Responder
}

//go:generate mockery -name StagingAPI -inpkg

/* StagingAPI  */
type StagingAPI interface {
	/* CheckCloudNFSExportAddStatus Check the status of a nfs export add request for the cloud */
	CheckCloudNFSExportAddStatus(ctx context.Context, params staging.CheckCloudNFSExportAddStatusParams) middleware.Responder

	/* CheckCloudNFSExportRemoveStatus Check the status of a nfs export remove request for the cloud */
	CheckCloudNFSExportRemoveStatus(ctx context.Context, params staging.CheckCloudNFSExportRemoveStatusParams) middleware.Responder

	/* CheckCompressToZipStatus Check the status of a multipart zip creation. */
	CheckCompressToZipStatus(ctx context.Context, params staging.CheckCompressToZipStatusParams) middleware.Responder

	/* CheckDeletionStatus Check the status of a delete request */
	CheckDeletionStatus(ctx context.Context, params staging.CheckDeletionStatusParams) middleware.Responder

	/* CheckDuplicationStatus Check the status of duplication */
	CheckDuplicationStatus(ctx context.Context, params staging.CheckDuplicationStatusParams) middleware.Responder

	/* CheckStageStatus Check the status of a transfer */
	CheckStageStatus(ctx context.Context, params staging.CheckStageStatusParams) middleware.Responder

	/* CloudNFSExportAdd Request that an nfs export be created for an LRZ cloud instance */
	CloudNFSExportAdd(ctx context.Context, params staging.CloudNFSExportAddParams) middleware.Responder

	/* CloudNFSExportRemove Request that an nfs export be removed for an LRZ cloud instance */
	CloudNFSExportRemove(ctx context.Context, params staging.CloudNFSExportRemoveParams) middleware.Responder

	/* CompressToZip Creates a multipart zip file from a staging api source_system/source_path combination */
	CompressToZip(ctx context.Context, params staging.CompressToZipParams) middleware.Responder

	/* Delete This is called when a user request to delete data. This is only allowed on the staging systems. */
	Delete(ctx context.Context, params staging.DeleteParams) middleware.Responder

	/* Duplicate Duplicate a dataset or subdataset (by enqueuing the request for latter processing) */
	Duplicate(ctx context.Context, params staging.DuplicateParams) middleware.Responder

	/* Stage Stage a dataset or subdataset (by enqueuing the request for latter processing) */
	Stage(ctx context.Context, params staging.StageParams) middleware.Responder

	/* StagingInfo Lists possible target / source systems */
	StagingInfo(ctx context.Context, params staging.StagingInfoParams) middleware.Responder
}

//go:generate mockery -name StatusManagementAPI -inpkg

/* StatusManagementAPI  */
type StatusManagementAPI interface {
	/* GetStatus Basic status of the system */
	GetStatus(ctx context.Context, params status_management.GetStatusParams) middleware.Responder

	/* ShowStatus Basic status of the system */
	ShowStatus(ctx context.Context, params status_management.ShowStatusParams) middleware.Responder
}

// Config is configuration for Handler
type Config struct {
	DataSetManagementAPI
	StagingAPI
	StatusManagementAPI
	Logger func(string, ...interface{})
	// InnerMiddleware is for the handler executors. These do not apply to the swagger.json document.
	// The middleware executes after routing but before authentication, binding and validation
	InnerMiddleware func(http.Handler) http.Handler

	// Authorizer is used to authorize a request after the Auth function was called using the "Auth*" functions
	// and the principal was stored in the context in the "AuthKey" context value.
	Authorizer func(*http.Request) error

	// AuthKeycloak For OAuth2 authentication
	AuthKeycloak func(token string, scopes []string) (interface{}, error)
	// Authenticator to use for all APIKey authentication
	APIKeyAuthenticator func(string, string, security.TokenAuthentication) runtime.Authenticator
	// Authenticator to use for all Bearer authentication
	BasicAuthenticator func(security.UserPassAuthentication) runtime.Authenticator
	// Authenticator to use for all Basic authentication
	BearerAuthenticator func(string, security.ScopedTokenAuthentication) runtime.Authenticator
}

// Handler returns an http.Handler given the handler configuration
// It mounts all the business logic implementers in the right routing.
func Handler(c Config) (http.Handler, error) {
	h, _, err := HandlerAPI(c)
	return h, err
}

// HandlerAPI returns an http.Handler given the handler configuration
// and the corresponding *WP3BackedDataServiceAPI instance.
// It mounts all the business logic implementers in the right routing.
func HandlerAPI(c Config) (http.Handler, *operations.WP3BackedDataServiceAPIAPI, error) {
	spec, err := loads.Analyzed(swaggerCopy(SwaggerJSON), "")
	if err != nil {
		return nil, nil, fmt.Errorf("analyze swagger: %v", err)
	}
	api := operations.NewWP3BackedDataServiceAPIAPI(spec)
	api.ServeError = errors.ServeError
	api.Logger = c.Logger

	if c.APIKeyAuthenticator != nil {
		api.APIKeyAuthenticator = c.APIKeyAuthenticator
	}
	if c.BasicAuthenticator != nil {
		api.BasicAuthenticator = c.BasicAuthenticator
	}
	if c.BearerAuthenticator != nil {
		api.BearerAuthenticator = c.BearerAuthenticator
	}

	api.BinConsumer = runtime.ByteStreamConsumer()
	api.JSONConsumer = runtime.JSONConsumer()
	api.BinProducer = runtime.ByteStreamProducer()
	api.JSONProducer = runtime.JSONProducer()

	api.KeycloakAuth = func(token string, scopes []string) (interface{}, error) {
		if c.AuthKeycloak == nil {
			return token, nil
		}
		return c.AuthKeycloak(token, scopes)
	}
	api.APIAuthorizer = authorizer(c.Authorizer)
	api.DataSetManagementAddGridmapEntryHandler = data_set_management.AddGridmapEntryHandlerFunc(func(params data_set_management.AddGridmapEntryParams, principal interface{}) middleware.Responder {
		ctx := params.HTTPRequest.Context()
		ctx = storeAuth(ctx, principal)
		return c.DataSetManagementAPI.AddGridmapEntry(ctx, params)
	})
	api.DataSetManagementAddProjectAdminHandler = data_set_management.AddProjectAdminHandlerFunc(func(params data_set_management.AddProjectAdminParams, principal interface{}) middleware.Responder {
		ctx := params.HTTPRequest.Context()
		ctx = storeAuth(ctx, principal)
		return c.DataSetManagementAPI.AddProjectAdmin(ctx, params)
	})
	api.DataSetManagementAddProjectUserHandler = data_set_management.AddProjectUserHandlerFunc(func(params data_set_management.AddProjectUserParams, principal interface{}) middleware.Responder {
		ctx := params.HTTPRequest.Context()
		ctx = storeAuth(ctx, principal)
		return c.DataSetManagementAPI.AddProjectUser(ctx, params)
	})
	api.DataSetManagementAddSupportUserHandler = data_set_management.AddSupportUserHandlerFunc(func(params data_set_management.AddSupportUserParams, principal interface{}) middleware.Responder {
		ctx := params.HTTPRequest.Context()
		ctx = storeAuth(ctx, principal)
		return c.DataSetManagementAPI.AddSupportUser(ctx, params)
	})
	api.DataSetManagementCertificateHandler = data_set_management.CertificateHandlerFunc(func(params data_set_management.CertificateParams, principal interface{}) middleware.Responder {
		ctx := params.HTTPRequest.Context()
		ctx = storeAuth(ctx, principal)
		return c.DataSetManagementAPI.Certificate(ctx, params)
	})
	api.StagingCheckCloudNFSExportAddStatusHandler = staging.CheckCloudNFSExportAddStatusHandlerFunc(func(params staging.CheckCloudNFSExportAddStatusParams) middleware.Responder {
		ctx := params.HTTPRequest.Context()
		return c.StagingAPI.CheckCloudNFSExportAddStatus(ctx, params)
	})
	api.StagingCheckCloudNFSExportRemoveStatusHandler = staging.CheckCloudNFSExportRemoveStatusHandlerFunc(func(params staging.CheckCloudNFSExportRemoveStatusParams) middleware.Responder {
		ctx := params.HTTPRequest.Context()
		return c.StagingAPI.CheckCloudNFSExportRemoveStatus(ctx, params)
	})
	api.StagingCheckCompressToZipStatusHandler = staging.CheckCompressToZipStatusHandlerFunc(func(params staging.CheckCompressToZipStatusParams) middleware.Responder {
		ctx := params.HTTPRequest.Context()
		return c.StagingAPI.CheckCompressToZipStatus(ctx, params)
	})
	api.DataSetManagementCheckCompressionEncryptionStatusHandler = data_set_management.CheckCompressionEncryptionStatusHandlerFunc(func(params data_set_management.CheckCompressionEncryptionStatusParams) middleware.Responder {
		ctx := params.HTTPRequest.Context()
		return c.DataSetManagementAPI.CheckCompressionEncryptionStatus(ctx, params)
	})
	api.DataSetManagementCheckCompressionStatusHandler = data_set_management.CheckCompressionStatusHandlerFunc(func(params data_set_management.CheckCompressionStatusParams) middleware.Responder {
		ctx := params.HTTPRequest.Context()
		return c.DataSetManagementAPI.CheckCompressionStatus(ctx, params)
	})
	api.DataSetManagementCheckDecompressionStatusHandler = data_set_management.CheckDecompressionStatusHandlerFunc(func(params data_set_management.CheckDecompressionStatusParams) middleware.Responder {
		ctx := params.HTTPRequest.Context()
		return c.DataSetManagementAPI.CheckDecompressionStatus(ctx, params)
	})
	api.DataSetManagementCheckDecryptionDecompressionStatusHandler = data_set_management.CheckDecryptionDecompressionStatusHandlerFunc(func(params data_set_management.CheckDecryptionDecompressionStatusParams) middleware.Responder {
		ctx := params.HTTPRequest.Context()
		return c.DataSetManagementAPI.CheckDecryptionDecompressionStatus(ctx, params)
	})
	api.DataSetManagementCheckDecryptionStatusHandler = data_set_management.CheckDecryptionStatusHandlerFunc(func(params data_set_management.CheckDecryptionStatusParams) middleware.Responder {
		ctx := params.HTTPRequest.Context()
		return c.DataSetManagementAPI.CheckDecryptionStatus(ctx, params)
	})
	api.StagingCheckDeletionStatusHandler = staging.CheckDeletionStatusHandlerFunc(func(params staging.CheckDeletionStatusParams) middleware.Responder {
		ctx := params.HTTPRequest.Context()
		return c.StagingAPI.CheckDeletionStatus(ctx, params)
	})
	api.StagingCheckDuplicationStatusHandler = staging.CheckDuplicationStatusHandlerFunc(func(params staging.CheckDuplicationStatusParams) middleware.Responder {
		ctx := params.HTTPRequest.Context()
		return c.StagingAPI.CheckDuplicationStatus(ctx, params)
	})
	api.DataSetManagementCheckEncryptionStatusHandler = data_set_management.CheckEncryptionStatusHandlerFunc(func(params data_set_management.CheckEncryptionStatusParams) middleware.Responder {
		ctx := params.HTTPRequest.Context()
		return c.DataSetManagementAPI.CheckEncryptionStatus(ctx, params)
	})
	api.DataSetManagementCheckPIDStatusHandler = data_set_management.CheckPIDStatusHandlerFunc(func(params data_set_management.CheckPIDStatusParams, principal interface{}) middleware.Responder {
		ctx := params.HTTPRequest.Context()
		ctx = storeAuth(ctx, principal)
		return c.DataSetManagementAPI.CheckPIDStatus(ctx, params)
	})
	api.DataSetManagementCheckPermissionHandler = data_set_management.CheckPermissionHandlerFunc(func(params data_set_management.CheckPermissionParams, principal interface{}) middleware.Responder {
		ctx := params.HTTPRequest.Context()
		ctx = storeAuth(ctx, principal)
		return c.DataSetManagementAPI.CheckPermission(ctx, params)
	})
	api.DataSetManagementCheckReplicateStatusHandler = data_set_management.CheckReplicateStatusHandlerFunc(func(params data_set_management.CheckReplicateStatusParams, principal interface{}) middleware.Responder {
		ctx := params.HTTPRequest.Context()
		ctx = storeAuth(ctx, principal)
		return c.DataSetManagementAPI.CheckReplicateStatus(ctx, params)
	})
	api.DataSetManagementCheckSizeStatusHandler = data_set_management.CheckSizeStatusHandlerFunc(func(params data_set_management.CheckSizeStatusParams, principal interface{}) middleware.Responder {
		ctx := params.HTTPRequest.Context()
		ctx = storeAuth(ctx, principal)
		return c.DataSetManagementAPI.CheckSizeStatus(ctx, params)
	})
	api.StagingCheckStageStatusHandler = staging.CheckStageStatusHandlerFunc(func(params staging.CheckStageStatusParams) middleware.Responder {
		ctx := params.HTTPRequest.Context()
		return c.StagingAPI.CheckStageStatus(ctx, params)
	})
	api.StagingCloudNFSExportAddHandler = staging.CloudNFSExportAddHandlerFunc(func(params staging.CloudNFSExportAddParams, principal interface{}) middleware.Responder {
		ctx := params.HTTPRequest.Context()
		ctx = storeAuth(ctx, principal)
		return c.StagingAPI.CloudNFSExportAdd(ctx, params)
	})
	api.StagingCloudNFSExportRemoveHandler = staging.CloudNFSExportRemoveHandlerFunc(func(params staging.CloudNFSExportRemoveParams, principal interface{}) middleware.Responder {
		ctx := params.HTTPRequest.Context()
		ctx = storeAuth(ctx, principal)
		return c.StagingAPI.CloudNFSExportRemove(ctx, params)
	})
	api.DataSetManagementCompressHandler = data_set_management.CompressHandlerFunc(func(params data_set_management.CompressParams, principal interface{}) middleware.Responder {
		ctx := params.HTTPRequest.Context()
		ctx = storeAuth(ctx, principal)
		return c.DataSetManagementAPI.Compress(ctx, params)
	})
	api.DataSetManagementCompressEncryptHandler = data_set_management.CompressEncryptHandlerFunc(func(params data_set_management.CompressEncryptParams, principal interface{}) middleware.Responder {
		ctx := params.HTTPRequest.Context()
		ctx = storeAuth(ctx, principal)
		return c.DataSetManagementAPI.CompressEncrypt(ctx, params)
	})
	api.StagingCompressToZipHandler = staging.CompressToZipHandlerFunc(func(params staging.CompressToZipParams, principal interface{}) middleware.Responder {
		ctx := params.HTTPRequest.Context()
		ctx = storeAuth(ctx, principal)
		return c.StagingAPI.CompressToZip(ctx, params)
	})
	api.DataSetManagementCreateProjectHandler = data_set_management.CreateProjectHandlerFunc(func(params data_set_management.CreateProjectParams, principal interface{}) middleware.Responder {
		ctx := params.HTTPRequest.Context()
		ctx = storeAuth(ctx, principal)
		return c.DataSetManagementAPI.CreateProject(ctx, params)
	})
	api.DataSetManagementCreateSSHFSExportHandler = data_set_management.CreateSSHFSExportHandlerFunc(func(params data_set_management.CreateSSHFSExportParams, principal interface{}) middleware.Responder {
		ctx := params.HTTPRequest.Context()
		ctx = storeAuth(ctx, principal)
		return c.DataSetManagementAPI.CreateSSHFSExport(ctx, params)
	})
	api.DataSetManagementCreateUserHandler = data_set_management.CreateUserHandlerFunc(func(params data_set_management.CreateUserParams, principal interface{}) middleware.Responder {
		ctx := params.HTTPRequest.Context()
		ctx = storeAuth(ctx, principal)
		return c.DataSetManagementAPI.CreateUser(ctx, params)
	})
	api.DataSetManagementDecompressHandler = data_set_management.DecompressHandlerFunc(func(params data_set_management.DecompressParams, principal interface{}) middleware.Responder {
		ctx := params.HTTPRequest.Context()
		ctx = storeAuth(ctx, principal)
		return c.DataSetManagementAPI.Decompress(ctx, params)
	})
	api.DataSetManagementDecryptHandler = data_set_management.DecryptHandlerFunc(func(params data_set_management.DecryptParams, principal interface{}) middleware.Responder {
		ctx := params.HTTPRequest.Context()
		ctx = storeAuth(ctx, principal)
		return c.DataSetManagementAPI.Decrypt(ctx, params)
	})
	api.DataSetManagementDecryptDecompressHandler = data_set_management.DecryptDecompressHandlerFunc(func(params data_set_management.DecryptDecompressParams, principal interface{}) middleware.Responder {
		ctx := params.HTTPRequest.Context()
		ctx = storeAuth(ctx, principal)
		return c.DataSetManagementAPI.DecryptDecompress(ctx, params)
	})
	api.StagingDeleteHandler = staging.DeleteHandlerFunc(func(params staging.DeleteParams, principal interface{}) middleware.Responder {
		ctx := params.HTTPRequest.Context()
		ctx = storeAuth(ctx, principal)
		return c.StagingAPI.Delete(ctx, params)
	})
	api.DataSetManagementDeleteDatasetHandler = data_set_management.DeleteDatasetHandlerFunc(func(params data_set_management.DeleteDatasetParams, principal interface{}) middleware.Responder {
		ctx := params.HTTPRequest.Context()
		ctx = storeAuth(ctx, principal)
		return c.DataSetManagementAPI.DeleteDataset(ctx, params)
	})
	api.DataSetManagementDeleteDatasetByMetadataHandler = data_set_management.DeleteDatasetByMetadataHandlerFunc(func(params data_set_management.DeleteDatasetByMetadataParams, principal interface{}) middleware.Responder {
		ctx := params.HTTPRequest.Context()
		ctx = storeAuth(ctx, principal)
		return c.DataSetManagementAPI.DeleteDatasetByMetadata(ctx, params)
	})
	api.DataSetManagementDeleteProjectHandler = data_set_management.DeleteProjectHandlerFunc(func(params data_set_management.DeleteProjectParams, principal interface{}) middleware.Responder {
		ctx := params.HTTPRequest.Context()
		ctx = storeAuth(ctx, principal)
		return c.DataSetManagementAPI.DeleteProject(ctx, params)
	})
	api.DataSetManagementDeleteProjectAdminHandler = data_set_management.DeleteProjectAdminHandlerFunc(func(params data_set_management.DeleteProjectAdminParams, principal interface{}) middleware.Responder {
		ctx := params.HTTPRequest.Context()
		ctx = storeAuth(ctx, principal)
		return c.DataSetManagementAPI.DeleteProjectAdmin(ctx, params)
	})
	api.DataSetManagementDeleteProjectUserHandler = data_set_management.DeleteProjectUserHandlerFunc(func(params data_set_management.DeleteProjectUserParams, principal interface{}) middleware.Responder {
		ctx := params.HTTPRequest.Context()
		ctx = storeAuth(ctx, principal)
		return c.DataSetManagementAPI.DeleteProjectUser(ctx, params)
	})
	api.DataSetManagementDeleteSSHFSExportHandler = data_set_management.DeleteSSHFSExportHandlerFunc(func(params data_set_management.DeleteSSHFSExportParams, principal interface{}) middleware.Responder {
		ctx := params.HTTPRequest.Context()
		ctx = storeAuth(ctx, principal)
		return c.DataSetManagementAPI.DeleteSSHFSExport(ctx, params)
	})
	api.DataSetManagementDeleteSupportUserHandler = data_set_management.DeleteSupportUserHandlerFunc(func(params data_set_management.DeleteSupportUserParams, principal interface{}) middleware.Responder {
		ctx := params.HTTPRequest.Context()
		ctx = storeAuth(ctx, principal)
		return c.DataSetManagementAPI.DeleteSupportUser(ctx, params)
	})
	api.DataSetManagementDeleteUserHandler = data_set_management.DeleteUserHandlerFunc(func(params data_set_management.DeleteUserParams, principal interface{}) middleware.Responder {
		ctx := params.HTTPRequest.Context()
		ctx = storeAuth(ctx, principal)
		return c.DataSetManagementAPI.DeleteUser(ctx, params)
	})
	api.DataSetManagementDownloadDatasetHandler = data_set_management.DownloadDatasetHandlerFunc(func(params data_set_management.DownloadDatasetParams, principal interface{}) middleware.Responder {
		ctx := params.HTTPRequest.Context()
		ctx = storeAuth(ctx, principal)
		return c.DataSetManagementAPI.DownloadDataset(ctx, params)
	})
	api.StagingDuplicateHandler = staging.DuplicateHandlerFunc(func(params staging.DuplicateParams, principal interface{}) middleware.Responder {
		ctx := params.HTTPRequest.Context()
		ctx = storeAuth(ctx, principal)
		return c.StagingAPI.Duplicate(ctx, params)
	})
	api.DataSetManagementEncryptHandler = data_set_management.EncryptHandlerFunc(func(params data_set_management.EncryptParams, principal interface{}) middleware.Responder {
		ctx := params.HTTPRequest.Context()
		ctx = storeAuth(ctx, principal)
		return c.DataSetManagementAPI.Encrypt(ctx, params)
	})
	api.DataSetManagementFilePatchHandler = data_set_management.FilePatchHandlerFunc(func(params data_set_management.FilePatchParams, principal interface{}) middleware.Responder {
		ctx := params.HTTPRequest.Context()
		ctx = storeAuth(ctx, principal)
		return c.DataSetManagementAPI.FilePatch(ctx, params)
	})
	api.DataSetManagementFilesDeleteHandler = data_set_management.FilesDeleteHandlerFunc(func(params data_set_management.FilesDeleteParams, principal interface{}) middleware.Responder {
		ctx := params.HTTPRequest.Context()
		ctx = storeAuth(ctx, principal)
		return c.DataSetManagementAPI.FilesDelete(ctx, params)
	})
	api.DataSetManagementFilesHeadHandler = data_set_management.FilesHeadHandlerFunc(func(params data_set_management.FilesHeadParams, principal interface{}) middleware.Responder {
		ctx := params.HTTPRequest.Context()
		ctx = storeAuth(ctx, principal)
		return c.DataSetManagementAPI.FilesHead(ctx, params)
	})
	api.DataSetManagementListingHandler = data_set_management.ListingHandlerFunc(func(params data_set_management.ListingParams, principal interface{}) middleware.Responder {
		ctx := params.HTTPRequest.Context()
		ctx = storeAuth(ctx, principal)
		return c.DataSetManagementAPI.Listing(ctx, params)
	})
	api.DataSetManagementOptionsDatasetUploadHandler = data_set_management.OptionsDatasetUploadHandlerFunc(func(params data_set_management.OptionsDatasetUploadParams, principal interface{}) middleware.Responder {
		ctx := params.HTTPRequest.Context()
		ctx = storeAuth(ctx, principal)
		return c.DataSetManagementAPI.OptionsDatasetUpload(ctx, params)
	})
	api.DataSetManagementPIDHandler = data_set_management.PIDHandlerFunc(func(params data_set_management.PIDParams, principal interface{}) middleware.Responder {
		ctx := params.HTTPRequest.Context()
		ctx = storeAuth(ctx, principal)
		return c.DataSetManagementAPI.PID(ctx, params)
	})
	api.DataSetManagementPostDatasetUploadHandler = data_set_management.PostDatasetUploadHandlerFunc(func(params data_set_management.PostDatasetUploadParams, principal interface{}) middleware.Responder {
		ctx := params.HTTPRequest.Context()
		ctx = storeAuth(ctx, principal)
		return c.DataSetManagementAPI.PostDatasetUpload(ctx, params)
	})
	api.DataSetManagementPostStagingDownloadHandler = data_set_management.PostStagingDownloadHandlerFunc(func(params data_set_management.PostStagingDownloadParams, principal interface{}) middleware.Responder {
		ctx := params.HTTPRequest.Context()
		ctx = storeAuth(ctx, principal)
		return c.DataSetManagementAPI.PostStagingDownload(ctx, params)
	})
	api.DataSetManagementQueryDatasetsHandler = data_set_management.QueryDatasetsHandlerFunc(func(params data_set_management.QueryDatasetsParams, principal interface{}) middleware.Responder {
		ctx := params.HTTPRequest.Context()
		ctx = storeAuth(ctx, principal)
		return c.DataSetManagementAPI.QueryDatasets(ctx, params)
	})
	api.DataSetManagementRemoveGridmapEntryHandler = data_set_management.RemoveGridmapEntryHandlerFunc(func(params data_set_management.RemoveGridmapEntryParams, principal interface{}) middleware.Responder {
		ctx := params.HTTPRequest.Context()
		ctx = storeAuth(ctx, principal)
		return c.DataSetManagementAPI.RemoveGridmapEntry(ctx, params)
	})
	api.DataSetManagementReplicateHandler = data_set_management.ReplicateHandlerFunc(func(params data_set_management.ReplicateParams, principal interface{}) middleware.Responder {
		ctx := params.HTTPRequest.Context()
		ctx = storeAuth(ctx, principal)
		return c.DataSetManagementAPI.Replicate(ctx, params)
	})
	api.DataSetManagementSizeHandler = data_set_management.SizeHandlerFunc(func(params data_set_management.SizeParams, principal interface{}) middleware.Responder {
		ctx := params.HTTPRequest.Context()
		ctx = storeAuth(ctx, principal)
		return c.DataSetManagementAPI.Size(ctx, params)
	})
	api.StagingStageHandler = staging.StageHandlerFunc(func(params staging.StageParams, principal interface{}) middleware.Responder {
		ctx := params.HTTPRequest.Context()
		ctx = storeAuth(ctx, principal)
		return c.StagingAPI.Stage(ctx, params)
	})
	api.StagingStagingInfoHandler = staging.StagingInfoHandlerFunc(func(params staging.StagingInfoParams, principal interface{}) middleware.Responder {
		ctx := params.HTTPRequest.Context()
		ctx = storeAuth(ctx, principal)
		return c.StagingAPI.StagingInfo(ctx, params)
	})
	api.DataSetManagementCreateDatasetHandler = data_set_management.CreateDatasetHandlerFunc(func(params data_set_management.CreateDatasetParams, principal interface{}) middleware.Responder {
		ctx := params.HTTPRequest.Context()
		ctx = storeAuth(ctx, principal)
		return c.DataSetManagementAPI.CreateDataset(ctx, params)
	})
	api.StatusManagementGetStatusHandler = status_management.GetStatusHandlerFunc(func(params status_management.GetStatusParams, principal interface{}) middleware.Responder {
		ctx := params.HTTPRequest.Context()
		ctx = storeAuth(ctx, principal)
		return c.StatusManagementAPI.GetStatus(ctx, params)
	})
	api.StatusManagementShowStatusHandler = status_management.ShowStatusHandlerFunc(func(params status_management.ShowStatusParams, principal interface{}) middleware.Responder {
		ctx := params.HTTPRequest.Context()
		ctx = storeAuth(ctx, principal)
		return c.StatusManagementAPI.ShowStatus(ctx, params)
	})
	api.ServerShutdown = func() {}
	return api.Serve(c.InnerMiddleware), api, nil
}

// swaggerCopy copies the swagger json to prevent data races in runtime
func swaggerCopy(orig json.RawMessage) json.RawMessage {
	c := make(json.RawMessage, len(orig))
	copy(c, orig)
	return c
}

// authorizer is a helper function to implement the runtime.Authorizer interface.
type authorizer func(*http.Request) error

func (a authorizer) Authorize(req *http.Request, principal interface{}) error {
	if a == nil {
		return nil
	}
	ctx := storeAuth(req.Context(), principal)
	return a(req.WithContext(ctx))
}

func storeAuth(ctx context.Context, principal interface{}) context.Context {
	return context.WithValue(ctx, AuthKey, principal)
}
