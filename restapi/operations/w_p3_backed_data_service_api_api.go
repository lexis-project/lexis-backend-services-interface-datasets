// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"net/http"
	"strings"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/loads"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/runtime/security"
	"github.com/go-openapi/spec"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"code.it4i.cz/lexis/wp8/dataset-management-interface.git/restapi/operations/data_set_management"
	"code.it4i.cz/lexis/wp8/dataset-management-interface.git/restapi/operations/staging"
	"code.it4i.cz/lexis/wp8/dataset-management-interface.git/restapi/operations/status_management"
)

// NewWP3BackedDataServiceAPIAPI creates a new WP3BackedDataServiceAPI instance
func NewWP3BackedDataServiceAPIAPI(spec *loads.Document) *WP3BackedDataServiceAPIAPI {
	return &WP3BackedDataServiceAPIAPI{
		handlers:            make(map[string]map[string]http.Handler),
		formats:             strfmt.Default,
		defaultConsumes:     "application/json",
		defaultProduces:     "application/json",
		customConsumers:     make(map[string]runtime.Consumer),
		customProducers:     make(map[string]runtime.Producer),
		PreServerShutdown:   func() {},
		ServerShutdown:      func() {},
		spec:                spec,
		useSwaggerUI:        false,
		ServeError:          errors.ServeError,
		BasicAuthenticator:  security.BasicAuth,
		APIKeyAuthenticator: security.APIKeyAuth,
		BearerAuthenticator: security.BearerAuth,

		BinConsumer:  runtime.ByteStreamConsumer(),
		JSONConsumer: runtime.JSONConsumer(),

		BinProducer:  runtime.ByteStreamProducer(),
		JSONProducer: runtime.JSONProducer(),

		DataSetManagementAddGridmapEntryHandler: data_set_management.AddGridmapEntryHandlerFunc(func(params data_set_management.AddGridmapEntryParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation data_set_management.AddGridmapEntry has not yet been implemented")
		}),
		DataSetManagementAddProjectAdminHandler: data_set_management.AddProjectAdminHandlerFunc(func(params data_set_management.AddProjectAdminParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation data_set_management.AddProjectAdmin has not yet been implemented")
		}),
		DataSetManagementAddProjectUserHandler: data_set_management.AddProjectUserHandlerFunc(func(params data_set_management.AddProjectUserParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation data_set_management.AddProjectUser has not yet been implemented")
		}),
		DataSetManagementAddSupportUserHandler: data_set_management.AddSupportUserHandlerFunc(func(params data_set_management.AddSupportUserParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation data_set_management.AddSupportUser has not yet been implemented")
		}),
		DataSetManagementCertificateHandler: data_set_management.CertificateHandlerFunc(func(params data_set_management.CertificateParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation data_set_management.Certificate has not yet been implemented")
		}),
		StagingCheckCloudNFSExportAddStatusHandler: staging.CheckCloudNFSExportAddStatusHandlerFunc(func(params staging.CheckCloudNFSExportAddStatusParams) middleware.Responder {
			return middleware.NotImplemented("operation staging.CheckCloudNFSExportAddStatus has not yet been implemented")
		}),
		StagingCheckCloudNFSExportRemoveStatusHandler: staging.CheckCloudNFSExportRemoveStatusHandlerFunc(func(params staging.CheckCloudNFSExportRemoveStatusParams) middleware.Responder {
			return middleware.NotImplemented("operation staging.CheckCloudNFSExportRemoveStatus has not yet been implemented")
		}),
		StagingCheckCompressToZipStatusHandler: staging.CheckCompressToZipStatusHandlerFunc(func(params staging.CheckCompressToZipStatusParams) middleware.Responder {
			return middleware.NotImplemented("operation staging.CheckCompressToZipStatus has not yet been implemented")
		}),
		DataSetManagementCheckCompressionEncryptionStatusHandler: data_set_management.CheckCompressionEncryptionStatusHandlerFunc(func(params data_set_management.CheckCompressionEncryptionStatusParams) middleware.Responder {
			return middleware.NotImplemented("operation data_set_management.CheckCompressionEncryptionStatus has not yet been implemented")
		}),
		DataSetManagementCheckCompressionStatusHandler: data_set_management.CheckCompressionStatusHandlerFunc(func(params data_set_management.CheckCompressionStatusParams) middleware.Responder {
			return middleware.NotImplemented("operation data_set_management.CheckCompressionStatus has not yet been implemented")
		}),
		DataSetManagementCheckDecompressionStatusHandler: data_set_management.CheckDecompressionStatusHandlerFunc(func(params data_set_management.CheckDecompressionStatusParams) middleware.Responder {
			return middleware.NotImplemented("operation data_set_management.CheckDecompressionStatus has not yet been implemented")
		}),
		DataSetManagementCheckDecryptionDecompressionStatusHandler: data_set_management.CheckDecryptionDecompressionStatusHandlerFunc(func(params data_set_management.CheckDecryptionDecompressionStatusParams) middleware.Responder {
			return middleware.NotImplemented("operation data_set_management.CheckDecryptionDecompressionStatus has not yet been implemented")
		}),
		DataSetManagementCheckDecryptionStatusHandler: data_set_management.CheckDecryptionStatusHandlerFunc(func(params data_set_management.CheckDecryptionStatusParams) middleware.Responder {
			return middleware.NotImplemented("operation data_set_management.CheckDecryptionStatus has not yet been implemented")
		}),
		StagingCheckDeletionStatusHandler: staging.CheckDeletionStatusHandlerFunc(func(params staging.CheckDeletionStatusParams) middleware.Responder {
			return middleware.NotImplemented("operation staging.CheckDeletionStatus has not yet been implemented")
		}),
		StagingCheckDuplicationStatusHandler: staging.CheckDuplicationStatusHandlerFunc(func(params staging.CheckDuplicationStatusParams) middleware.Responder {
			return middleware.NotImplemented("operation staging.CheckDuplicationStatus has not yet been implemented")
		}),
		DataSetManagementCheckEncryptionStatusHandler: data_set_management.CheckEncryptionStatusHandlerFunc(func(params data_set_management.CheckEncryptionStatusParams) middleware.Responder {
			return middleware.NotImplemented("operation data_set_management.CheckEncryptionStatus has not yet been implemented")
		}),
		DataSetManagementCheckPIDStatusHandler: data_set_management.CheckPIDStatusHandlerFunc(func(params data_set_management.CheckPIDStatusParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation data_set_management.CheckPIDStatus has not yet been implemented")
		}),
		DataSetManagementCheckPermissionHandler: data_set_management.CheckPermissionHandlerFunc(func(params data_set_management.CheckPermissionParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation data_set_management.CheckPermission has not yet been implemented")
		}),
		DataSetManagementCheckReplicateStatusHandler: data_set_management.CheckReplicateStatusHandlerFunc(func(params data_set_management.CheckReplicateStatusParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation data_set_management.CheckReplicateStatus has not yet been implemented")
		}),
		DataSetManagementCheckSizeStatusHandler: data_set_management.CheckSizeStatusHandlerFunc(func(params data_set_management.CheckSizeStatusParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation data_set_management.CheckSizeStatus has not yet been implemented")
		}),
		StagingCheckStageStatusHandler: staging.CheckStageStatusHandlerFunc(func(params staging.CheckStageStatusParams) middleware.Responder {
			return middleware.NotImplemented("operation staging.CheckStageStatus has not yet been implemented")
		}),
		StagingCloudNFSExportAddHandler: staging.CloudNFSExportAddHandlerFunc(func(params staging.CloudNFSExportAddParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation staging.CloudNFSExportAdd has not yet been implemented")
		}),
		StagingCloudNFSExportRemoveHandler: staging.CloudNFSExportRemoveHandlerFunc(func(params staging.CloudNFSExportRemoveParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation staging.CloudNFSExportRemove has not yet been implemented")
		}),
		DataSetManagementCompressHandler: data_set_management.CompressHandlerFunc(func(params data_set_management.CompressParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation data_set_management.Compress has not yet been implemented")
		}),
		DataSetManagementCompressEncryptHandler: data_set_management.CompressEncryptHandlerFunc(func(params data_set_management.CompressEncryptParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation data_set_management.CompressEncrypt has not yet been implemented")
		}),
		StagingCompressToZipHandler: staging.CompressToZipHandlerFunc(func(params staging.CompressToZipParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation staging.CompressToZip has not yet been implemented")
		}),
		DataSetManagementCreateProjectHandler: data_set_management.CreateProjectHandlerFunc(func(params data_set_management.CreateProjectParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation data_set_management.CreateProject has not yet been implemented")
		}),
		DataSetManagementCreateSSHFSExportHandler: data_set_management.CreateSSHFSExportHandlerFunc(func(params data_set_management.CreateSSHFSExportParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation data_set_management.CreateSSHFSExport has not yet been implemented")
		}),
		DataSetManagementCreateUserHandler: data_set_management.CreateUserHandlerFunc(func(params data_set_management.CreateUserParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation data_set_management.CreateUser has not yet been implemented")
		}),
		DataSetManagementDecompressHandler: data_set_management.DecompressHandlerFunc(func(params data_set_management.DecompressParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation data_set_management.Decompress has not yet been implemented")
		}),
		DataSetManagementDecryptHandler: data_set_management.DecryptHandlerFunc(func(params data_set_management.DecryptParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation data_set_management.Decrypt has not yet been implemented")
		}),
		DataSetManagementDecryptDecompressHandler: data_set_management.DecryptDecompressHandlerFunc(func(params data_set_management.DecryptDecompressParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation data_set_management.DecryptDecompress has not yet been implemented")
		}),
		StagingDeleteHandler: staging.DeleteHandlerFunc(func(params staging.DeleteParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation staging.Delete has not yet been implemented")
		}),
		DataSetManagementDeleteDatasetHandler: data_set_management.DeleteDatasetHandlerFunc(func(params data_set_management.DeleteDatasetParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation data_set_management.DeleteDataset has not yet been implemented")
		}),
		DataSetManagementDeleteDatasetByMetadataHandler: data_set_management.DeleteDatasetByMetadataHandlerFunc(func(params data_set_management.DeleteDatasetByMetadataParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation data_set_management.DeleteDatasetByMetadata has not yet been implemented")
		}),
		DataSetManagementDeleteProjectHandler: data_set_management.DeleteProjectHandlerFunc(func(params data_set_management.DeleteProjectParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation data_set_management.DeleteProject has not yet been implemented")
		}),
		DataSetManagementDeleteProjectAdminHandler: data_set_management.DeleteProjectAdminHandlerFunc(func(params data_set_management.DeleteProjectAdminParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation data_set_management.DeleteProjectAdmin has not yet been implemented")
		}),
		DataSetManagementDeleteProjectUserHandler: data_set_management.DeleteProjectUserHandlerFunc(func(params data_set_management.DeleteProjectUserParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation data_set_management.DeleteProjectUser has not yet been implemented")
		}),
		DataSetManagementDeleteSSHFSExportHandler: data_set_management.DeleteSSHFSExportHandlerFunc(func(params data_set_management.DeleteSSHFSExportParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation data_set_management.DeleteSSHFSExport has not yet been implemented")
		}),
		DataSetManagementDeleteSupportUserHandler: data_set_management.DeleteSupportUserHandlerFunc(func(params data_set_management.DeleteSupportUserParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation data_set_management.DeleteSupportUser has not yet been implemented")
		}),
		DataSetManagementDeleteUserHandler: data_set_management.DeleteUserHandlerFunc(func(params data_set_management.DeleteUserParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation data_set_management.DeleteUser has not yet been implemented")
		}),
		DataSetManagementDownloadDatasetHandler: data_set_management.DownloadDatasetHandlerFunc(func(params data_set_management.DownloadDatasetParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation data_set_management.DownloadDataset has not yet been implemented")
		}),
		StagingDuplicateHandler: staging.DuplicateHandlerFunc(func(params staging.DuplicateParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation staging.Duplicate has not yet been implemented")
		}),
		DataSetManagementEncryptHandler: data_set_management.EncryptHandlerFunc(func(params data_set_management.EncryptParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation data_set_management.Encrypt has not yet been implemented")
		}),
		DataSetManagementFilePatchHandler: data_set_management.FilePatchHandlerFunc(func(params data_set_management.FilePatchParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation data_set_management.FilePatch has not yet been implemented")
		}),
		DataSetManagementFilesDeleteHandler: data_set_management.FilesDeleteHandlerFunc(func(params data_set_management.FilesDeleteParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation data_set_management.FilesDelete has not yet been implemented")
		}),
		DataSetManagementFilesHeadHandler: data_set_management.FilesHeadHandlerFunc(func(params data_set_management.FilesHeadParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation data_set_management.FilesHead has not yet been implemented")
		}),
		DataSetManagementListingHandler: data_set_management.ListingHandlerFunc(func(params data_set_management.ListingParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation data_set_management.Listing has not yet been implemented")
		}),
		DataSetManagementOptionsDatasetUploadHandler: data_set_management.OptionsDatasetUploadHandlerFunc(func(params data_set_management.OptionsDatasetUploadParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation data_set_management.OptionsDatasetUpload has not yet been implemented")
		}),
		DataSetManagementPIDHandler: data_set_management.PIDHandlerFunc(func(params data_set_management.PIDParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation data_set_management.PID has not yet been implemented")
		}),
		DataSetManagementPostDatasetUploadHandler: data_set_management.PostDatasetUploadHandlerFunc(func(params data_set_management.PostDatasetUploadParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation data_set_management.PostDatasetUpload has not yet been implemented")
		}),
		DataSetManagementPostStagingDownloadHandler: data_set_management.PostStagingDownloadHandlerFunc(func(params data_set_management.PostStagingDownloadParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation data_set_management.PostStagingDownload has not yet been implemented")
		}),
		DataSetManagementQueryDatasetsHandler: data_set_management.QueryDatasetsHandlerFunc(func(params data_set_management.QueryDatasetsParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation data_set_management.QueryDatasets has not yet been implemented")
		}),
		DataSetManagementRemoveGridmapEntryHandler: data_set_management.RemoveGridmapEntryHandlerFunc(func(params data_set_management.RemoveGridmapEntryParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation data_set_management.RemoveGridmapEntry has not yet been implemented")
		}),
		DataSetManagementReplicateHandler: data_set_management.ReplicateHandlerFunc(func(params data_set_management.ReplicateParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation data_set_management.Replicate has not yet been implemented")
		}),
		DataSetManagementSizeHandler: data_set_management.SizeHandlerFunc(func(params data_set_management.SizeParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation data_set_management.Size has not yet been implemented")
		}),
		StagingStageHandler: staging.StageHandlerFunc(func(params staging.StageParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation staging.Stage has not yet been implemented")
		}),
		StagingStagingInfoHandler: staging.StagingInfoHandlerFunc(func(params staging.StagingInfoParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation staging.StagingInfo has not yet been implemented")
		}),
		DataSetManagementCreateDatasetHandler: data_set_management.CreateDatasetHandlerFunc(func(params data_set_management.CreateDatasetParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation data_set_management.CreateDataset has not yet been implemented")
		}),
		StatusManagementGetStatusHandler: status_management.GetStatusHandlerFunc(func(params status_management.GetStatusParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation status_management.GetStatus has not yet been implemented")
		}),
		StatusManagementShowStatusHandler: status_management.ShowStatusHandlerFunc(func(params status_management.ShowStatusParams, principal interface{}) middleware.Responder {
			return middleware.NotImplemented("operation status_management.ShowStatus has not yet been implemented")
		}),

		KeycloakAuth: func(token string, scopes []string) (interface{}, error) {
			return nil, errors.NotImplemented("oauth2 bearer auth (Keycloak) has not yet been implemented")
		},
		// default authorizer is authorized meaning no requests are blocked
		APIAuthorizer: security.Authorized(),
	}
}

/*WP3BackedDataServiceAPIAPI An API which supports querying available LEXIS data sets */
type WP3BackedDataServiceAPIAPI struct {
	spec            *loads.Document
	context         *middleware.Context
	handlers        map[string]map[string]http.Handler
	formats         strfmt.Registry
	customConsumers map[string]runtime.Consumer
	customProducers map[string]runtime.Producer
	defaultConsumes string
	defaultProduces string
	Middleware      func(middleware.Builder) http.Handler
	useSwaggerUI    bool

	// BasicAuthenticator generates a runtime.Authenticator from the supplied basic auth function.
	// It has a default implementation in the security package, however you can replace it for your particular usage.
	BasicAuthenticator func(security.UserPassAuthentication) runtime.Authenticator
	// APIKeyAuthenticator generates a runtime.Authenticator from the supplied token auth function.
	// It has a default implementation in the security package, however you can replace it for your particular usage.
	APIKeyAuthenticator func(string, string, security.TokenAuthentication) runtime.Authenticator
	// BearerAuthenticator generates a runtime.Authenticator from the supplied bearer token auth function.
	// It has a default implementation in the security package, however you can replace it for your particular usage.
	BearerAuthenticator func(string, security.ScopedTokenAuthentication) runtime.Authenticator

	// BinConsumer registers a consumer for the following mime types:
	//   - application/offset+octet-stream
	BinConsumer runtime.Consumer
	// JSONConsumer registers a consumer for the following mime types:
	//   - application/json
	JSONConsumer runtime.Consumer

	// BinProducer registers a producer for the following mime types:
	//   - application/octet-stream
	BinProducer runtime.Producer
	// JSONProducer registers a producer for the following mime types:
	//   - application/json
	JSONProducer runtime.Producer

	// KeycloakAuth registers a function that takes an access token and a collection of required scopes and returns a principal
	// it performs authentication based on an oauth2 bearer token provided in the request
	KeycloakAuth func(string, []string) (interface{}, error)

	// APIAuthorizer provides access control (ACL/RBAC/ABAC) by providing access to the request and authenticated principal
	APIAuthorizer runtime.Authorizer

	// DataSetManagementAddGridmapEntryHandler sets the operation handler for the add gridmap entry operation
	DataSetManagementAddGridmapEntryHandler data_set_management.AddGridmapEntryHandler
	// DataSetManagementAddProjectAdminHandler sets the operation handler for the add project admin operation
	DataSetManagementAddProjectAdminHandler data_set_management.AddProjectAdminHandler
	// DataSetManagementAddProjectUserHandler sets the operation handler for the add project user operation
	DataSetManagementAddProjectUserHandler data_set_management.AddProjectUserHandler
	// DataSetManagementAddSupportUserHandler sets the operation handler for the add support user operation
	DataSetManagementAddSupportUserHandler data_set_management.AddSupportUserHandler
	// DataSetManagementCertificateHandler sets the operation handler for the certificate operation
	DataSetManagementCertificateHandler data_set_management.CertificateHandler
	// StagingCheckCloudNFSExportAddStatusHandler sets the operation handler for the check cloud n f s export add status operation
	StagingCheckCloudNFSExportAddStatusHandler staging.CheckCloudNFSExportAddStatusHandler
	// StagingCheckCloudNFSExportRemoveStatusHandler sets the operation handler for the check cloud n f s export remove status operation
	StagingCheckCloudNFSExportRemoveStatusHandler staging.CheckCloudNFSExportRemoveStatusHandler
	// StagingCheckCompressToZipStatusHandler sets the operation handler for the check compress to zip status operation
	StagingCheckCompressToZipStatusHandler staging.CheckCompressToZipStatusHandler
	// DataSetManagementCheckCompressionEncryptionStatusHandler sets the operation handler for the check compression encryption status operation
	DataSetManagementCheckCompressionEncryptionStatusHandler data_set_management.CheckCompressionEncryptionStatusHandler
	// DataSetManagementCheckCompressionStatusHandler sets the operation handler for the check compression status operation
	DataSetManagementCheckCompressionStatusHandler data_set_management.CheckCompressionStatusHandler
	// DataSetManagementCheckDecompressionStatusHandler sets the operation handler for the check decompression status operation
	DataSetManagementCheckDecompressionStatusHandler data_set_management.CheckDecompressionStatusHandler
	// DataSetManagementCheckDecryptionDecompressionStatusHandler sets the operation handler for the check decryption decompression status operation
	DataSetManagementCheckDecryptionDecompressionStatusHandler data_set_management.CheckDecryptionDecompressionStatusHandler
	// DataSetManagementCheckDecryptionStatusHandler sets the operation handler for the check decryption status operation
	DataSetManagementCheckDecryptionStatusHandler data_set_management.CheckDecryptionStatusHandler
	// StagingCheckDeletionStatusHandler sets the operation handler for the check deletion status operation
	StagingCheckDeletionStatusHandler staging.CheckDeletionStatusHandler
	// StagingCheckDuplicationStatusHandler sets the operation handler for the check duplication status operation
	StagingCheckDuplicationStatusHandler staging.CheckDuplicationStatusHandler
	// DataSetManagementCheckEncryptionStatusHandler sets the operation handler for the check encryption status operation
	DataSetManagementCheckEncryptionStatusHandler data_set_management.CheckEncryptionStatusHandler
	// DataSetManagementCheckPIDStatusHandler sets the operation handler for the check p ID status operation
	DataSetManagementCheckPIDStatusHandler data_set_management.CheckPIDStatusHandler
	// DataSetManagementCheckPermissionHandler sets the operation handler for the check permission operation
	DataSetManagementCheckPermissionHandler data_set_management.CheckPermissionHandler
	// DataSetManagementCheckReplicateStatusHandler sets the operation handler for the check replicate status operation
	DataSetManagementCheckReplicateStatusHandler data_set_management.CheckReplicateStatusHandler
	// DataSetManagementCheckSizeStatusHandler sets the operation handler for the check size status operation
	DataSetManagementCheckSizeStatusHandler data_set_management.CheckSizeStatusHandler
	// StagingCheckStageStatusHandler sets the operation handler for the check stage status operation
	StagingCheckStageStatusHandler staging.CheckStageStatusHandler
	// StagingCloudNFSExportAddHandler sets the operation handler for the cloud n f s export add operation
	StagingCloudNFSExportAddHandler staging.CloudNFSExportAddHandler
	// StagingCloudNFSExportRemoveHandler sets the operation handler for the cloud n f s export remove operation
	StagingCloudNFSExportRemoveHandler staging.CloudNFSExportRemoveHandler
	// DataSetManagementCompressHandler sets the operation handler for the compress operation
	DataSetManagementCompressHandler data_set_management.CompressHandler
	// DataSetManagementCompressEncryptHandler sets the operation handler for the compress encrypt operation
	DataSetManagementCompressEncryptHandler data_set_management.CompressEncryptHandler
	// StagingCompressToZipHandler sets the operation handler for the compress to zip operation
	StagingCompressToZipHandler staging.CompressToZipHandler
	// DataSetManagementCreateProjectHandler sets the operation handler for the create project operation
	DataSetManagementCreateProjectHandler data_set_management.CreateProjectHandler
	// DataSetManagementCreateSSHFSExportHandler sets the operation handler for the create SSH f s export operation
	DataSetManagementCreateSSHFSExportHandler data_set_management.CreateSSHFSExportHandler
	// DataSetManagementCreateUserHandler sets the operation handler for the create user operation
	DataSetManagementCreateUserHandler data_set_management.CreateUserHandler
	// DataSetManagementDecompressHandler sets the operation handler for the decompress operation
	DataSetManagementDecompressHandler data_set_management.DecompressHandler
	// DataSetManagementDecryptHandler sets the operation handler for the decrypt operation
	DataSetManagementDecryptHandler data_set_management.DecryptHandler
	// DataSetManagementDecryptDecompressHandler sets the operation handler for the decrypt decompress operation
	DataSetManagementDecryptDecompressHandler data_set_management.DecryptDecompressHandler
	// StagingDeleteHandler sets the operation handler for the delete operation
	StagingDeleteHandler staging.DeleteHandler
	// DataSetManagementDeleteDatasetHandler sets the operation handler for the delete dataset operation
	DataSetManagementDeleteDatasetHandler data_set_management.DeleteDatasetHandler
	// DataSetManagementDeleteDatasetByMetadataHandler sets the operation handler for the delete dataset by metadata operation
	DataSetManagementDeleteDatasetByMetadataHandler data_set_management.DeleteDatasetByMetadataHandler
	// DataSetManagementDeleteProjectHandler sets the operation handler for the delete project operation
	DataSetManagementDeleteProjectHandler data_set_management.DeleteProjectHandler
	// DataSetManagementDeleteProjectAdminHandler sets the operation handler for the delete project admin operation
	DataSetManagementDeleteProjectAdminHandler data_set_management.DeleteProjectAdminHandler
	// DataSetManagementDeleteProjectUserHandler sets the operation handler for the delete project user operation
	DataSetManagementDeleteProjectUserHandler data_set_management.DeleteProjectUserHandler
	// DataSetManagementDeleteSSHFSExportHandler sets the operation handler for the delete SSH f s export operation
	DataSetManagementDeleteSSHFSExportHandler data_set_management.DeleteSSHFSExportHandler
	// DataSetManagementDeleteSupportUserHandler sets the operation handler for the delete support user operation
	DataSetManagementDeleteSupportUserHandler data_set_management.DeleteSupportUserHandler
	// DataSetManagementDeleteUserHandler sets the operation handler for the delete user operation
	DataSetManagementDeleteUserHandler data_set_management.DeleteUserHandler
	// DataSetManagementDownloadDatasetHandler sets the operation handler for the download dataset operation
	DataSetManagementDownloadDatasetHandler data_set_management.DownloadDatasetHandler
	// StagingDuplicateHandler sets the operation handler for the duplicate operation
	StagingDuplicateHandler staging.DuplicateHandler
	// DataSetManagementEncryptHandler sets the operation handler for the encrypt operation
	DataSetManagementEncryptHandler data_set_management.EncryptHandler
	// DataSetManagementFilePatchHandler sets the operation handler for the file patch operation
	DataSetManagementFilePatchHandler data_set_management.FilePatchHandler
	// DataSetManagementFilesDeleteHandler sets the operation handler for the files delete operation
	DataSetManagementFilesDeleteHandler data_set_management.FilesDeleteHandler
	// DataSetManagementFilesHeadHandler sets the operation handler for the files head operation
	DataSetManagementFilesHeadHandler data_set_management.FilesHeadHandler
	// DataSetManagementListingHandler sets the operation handler for the listing operation
	DataSetManagementListingHandler data_set_management.ListingHandler
	// DataSetManagementOptionsDatasetUploadHandler sets the operation handler for the options dataset upload operation
	DataSetManagementOptionsDatasetUploadHandler data_set_management.OptionsDatasetUploadHandler
	// DataSetManagementPIDHandler sets the operation handler for the p ID operation
	DataSetManagementPIDHandler data_set_management.PIDHandler
	// DataSetManagementPostDatasetUploadHandler sets the operation handler for the post dataset upload operation
	DataSetManagementPostDatasetUploadHandler data_set_management.PostDatasetUploadHandler
	// DataSetManagementPostStagingDownloadHandler sets the operation handler for the post staging download operation
	DataSetManagementPostStagingDownloadHandler data_set_management.PostStagingDownloadHandler
	// DataSetManagementQueryDatasetsHandler sets the operation handler for the query datasets operation
	DataSetManagementQueryDatasetsHandler data_set_management.QueryDatasetsHandler
	// DataSetManagementRemoveGridmapEntryHandler sets the operation handler for the remove gridmap entry operation
	DataSetManagementRemoveGridmapEntryHandler data_set_management.RemoveGridmapEntryHandler
	// DataSetManagementReplicateHandler sets the operation handler for the replicate operation
	DataSetManagementReplicateHandler data_set_management.ReplicateHandler
	// DataSetManagementSizeHandler sets the operation handler for the size operation
	DataSetManagementSizeHandler data_set_management.SizeHandler
	// StagingStageHandler sets the operation handler for the stage operation
	StagingStageHandler staging.StageHandler
	// StagingStagingInfoHandler sets the operation handler for the staging info operation
	StagingStagingInfoHandler staging.StagingInfoHandler
	// DataSetManagementCreateDatasetHandler sets the operation handler for the create dataset operation
	DataSetManagementCreateDatasetHandler data_set_management.CreateDatasetHandler
	// StatusManagementGetStatusHandler sets the operation handler for the get status operation
	StatusManagementGetStatusHandler status_management.GetStatusHandler
	// StatusManagementShowStatusHandler sets the operation handler for the show status operation
	StatusManagementShowStatusHandler status_management.ShowStatusHandler
	// ServeError is called when an error is received, there is a default handler
	// but you can set your own with this
	ServeError func(http.ResponseWriter, *http.Request, error)

	// PreServerShutdown is called before the HTTP(S) server is shutdown
	// This allows for custom functions to get executed before the HTTP(S) server stops accepting traffic
	PreServerShutdown func()

	// ServerShutdown is called when the HTTP(S) server is shut down and done
	// handling all active connections and does not accept connections any more
	ServerShutdown func()

	// Custom command line argument groups with their descriptions
	CommandLineOptionsGroups []swag.CommandLineOptionsGroup

	// User defined logger function.
	Logger func(string, ...interface{})
}

// UseRedoc for documentation at /docs
func (o *WP3BackedDataServiceAPIAPI) UseRedoc() {
	o.useSwaggerUI = false
}

// UseSwaggerUI for documentation at /docs
func (o *WP3BackedDataServiceAPIAPI) UseSwaggerUI() {
	o.useSwaggerUI = true
}

// SetDefaultProduces sets the default produces media type
func (o *WP3BackedDataServiceAPIAPI) SetDefaultProduces(mediaType string) {
	o.defaultProduces = mediaType
}

// SetDefaultConsumes returns the default consumes media type
func (o *WP3BackedDataServiceAPIAPI) SetDefaultConsumes(mediaType string) {
	o.defaultConsumes = mediaType
}

// SetSpec sets a spec that will be served for the clients.
func (o *WP3BackedDataServiceAPIAPI) SetSpec(spec *loads.Document) {
	o.spec = spec
}

// DefaultProduces returns the default produces media type
func (o *WP3BackedDataServiceAPIAPI) DefaultProduces() string {
	return o.defaultProduces
}

// DefaultConsumes returns the default consumes media type
func (o *WP3BackedDataServiceAPIAPI) DefaultConsumes() string {
	return o.defaultConsumes
}

// Formats returns the registered string formats
func (o *WP3BackedDataServiceAPIAPI) Formats() strfmt.Registry {
	return o.formats
}

// RegisterFormat registers a custom format validator
func (o *WP3BackedDataServiceAPIAPI) RegisterFormat(name string, format strfmt.Format, validator strfmt.Validator) {
	o.formats.Add(name, format, validator)
}

// Validate validates the registrations in the WP3BackedDataServiceAPIAPI
func (o *WP3BackedDataServiceAPIAPI) Validate() error {
	var unregistered []string

	if o.BinConsumer == nil {
		unregistered = append(unregistered, "BinConsumer")
	}
	if o.JSONConsumer == nil {
		unregistered = append(unregistered, "JSONConsumer")
	}

	if o.BinProducer == nil {
		unregistered = append(unregistered, "BinProducer")
	}
	if o.JSONProducer == nil {
		unregistered = append(unregistered, "JSONProducer")
	}

	if o.KeycloakAuth == nil {
		unregistered = append(unregistered, "KeycloakAuth")
	}

	if o.DataSetManagementAddGridmapEntryHandler == nil {
		unregistered = append(unregistered, "data_set_management.AddGridmapEntryHandler")
	}
	if o.DataSetManagementAddProjectAdminHandler == nil {
		unregistered = append(unregistered, "data_set_management.AddProjectAdminHandler")
	}
	if o.DataSetManagementAddProjectUserHandler == nil {
		unregistered = append(unregistered, "data_set_management.AddProjectUserHandler")
	}
	if o.DataSetManagementAddSupportUserHandler == nil {
		unregistered = append(unregistered, "data_set_management.AddSupportUserHandler")
	}
	if o.DataSetManagementCertificateHandler == nil {
		unregistered = append(unregistered, "data_set_management.CertificateHandler")
	}
	if o.StagingCheckCloudNFSExportAddStatusHandler == nil {
		unregistered = append(unregistered, "staging.CheckCloudNFSExportAddStatusHandler")
	}
	if o.StagingCheckCloudNFSExportRemoveStatusHandler == nil {
		unregistered = append(unregistered, "staging.CheckCloudNFSExportRemoveStatusHandler")
	}
	if o.StagingCheckCompressToZipStatusHandler == nil {
		unregistered = append(unregistered, "staging.CheckCompressToZipStatusHandler")
	}
	if o.DataSetManagementCheckCompressionEncryptionStatusHandler == nil {
		unregistered = append(unregistered, "data_set_management.CheckCompressionEncryptionStatusHandler")
	}
	if o.DataSetManagementCheckCompressionStatusHandler == nil {
		unregistered = append(unregistered, "data_set_management.CheckCompressionStatusHandler")
	}
	if o.DataSetManagementCheckDecompressionStatusHandler == nil {
		unregistered = append(unregistered, "data_set_management.CheckDecompressionStatusHandler")
	}
	if o.DataSetManagementCheckDecryptionDecompressionStatusHandler == nil {
		unregistered = append(unregistered, "data_set_management.CheckDecryptionDecompressionStatusHandler")
	}
	if o.DataSetManagementCheckDecryptionStatusHandler == nil {
		unregistered = append(unregistered, "data_set_management.CheckDecryptionStatusHandler")
	}
	if o.StagingCheckDeletionStatusHandler == nil {
		unregistered = append(unregistered, "staging.CheckDeletionStatusHandler")
	}
	if o.StagingCheckDuplicationStatusHandler == nil {
		unregistered = append(unregistered, "staging.CheckDuplicationStatusHandler")
	}
	if o.DataSetManagementCheckEncryptionStatusHandler == nil {
		unregistered = append(unregistered, "data_set_management.CheckEncryptionStatusHandler")
	}
	if o.DataSetManagementCheckPIDStatusHandler == nil {
		unregistered = append(unregistered, "data_set_management.CheckPIDStatusHandler")
	}
	if o.DataSetManagementCheckPermissionHandler == nil {
		unregistered = append(unregistered, "data_set_management.CheckPermissionHandler")
	}
	if o.DataSetManagementCheckReplicateStatusHandler == nil {
		unregistered = append(unregistered, "data_set_management.CheckReplicateStatusHandler")
	}
	if o.DataSetManagementCheckSizeStatusHandler == nil {
		unregistered = append(unregistered, "data_set_management.CheckSizeStatusHandler")
	}
	if o.StagingCheckStageStatusHandler == nil {
		unregistered = append(unregistered, "staging.CheckStageStatusHandler")
	}
	if o.StagingCloudNFSExportAddHandler == nil {
		unregistered = append(unregistered, "staging.CloudNFSExportAddHandler")
	}
	if o.StagingCloudNFSExportRemoveHandler == nil {
		unregistered = append(unregistered, "staging.CloudNFSExportRemoveHandler")
	}
	if o.DataSetManagementCompressHandler == nil {
		unregistered = append(unregistered, "data_set_management.CompressHandler")
	}
	if o.DataSetManagementCompressEncryptHandler == nil {
		unregistered = append(unregistered, "data_set_management.CompressEncryptHandler")
	}
	if o.StagingCompressToZipHandler == nil {
		unregistered = append(unregistered, "staging.CompressToZipHandler")
	}
	if o.DataSetManagementCreateProjectHandler == nil {
		unregistered = append(unregistered, "data_set_management.CreateProjectHandler")
	}
	if o.DataSetManagementCreateSSHFSExportHandler == nil {
		unregistered = append(unregistered, "data_set_management.CreateSSHFSExportHandler")
	}
	if o.DataSetManagementCreateUserHandler == nil {
		unregistered = append(unregistered, "data_set_management.CreateUserHandler")
	}
	if o.DataSetManagementDecompressHandler == nil {
		unregistered = append(unregistered, "data_set_management.DecompressHandler")
	}
	if o.DataSetManagementDecryptHandler == nil {
		unregistered = append(unregistered, "data_set_management.DecryptHandler")
	}
	if o.DataSetManagementDecryptDecompressHandler == nil {
		unregistered = append(unregistered, "data_set_management.DecryptDecompressHandler")
	}
	if o.StagingDeleteHandler == nil {
		unregistered = append(unregistered, "staging.DeleteHandler")
	}
	if o.DataSetManagementDeleteDatasetHandler == nil {
		unregistered = append(unregistered, "data_set_management.DeleteDatasetHandler")
	}
	if o.DataSetManagementDeleteDatasetByMetadataHandler == nil {
		unregistered = append(unregistered, "data_set_management.DeleteDatasetByMetadataHandler")
	}
	if o.DataSetManagementDeleteProjectHandler == nil {
		unregistered = append(unregistered, "data_set_management.DeleteProjectHandler")
	}
	if o.DataSetManagementDeleteProjectAdminHandler == nil {
		unregistered = append(unregistered, "data_set_management.DeleteProjectAdminHandler")
	}
	if o.DataSetManagementDeleteProjectUserHandler == nil {
		unregistered = append(unregistered, "data_set_management.DeleteProjectUserHandler")
	}
	if o.DataSetManagementDeleteSSHFSExportHandler == nil {
		unregistered = append(unregistered, "data_set_management.DeleteSSHFSExportHandler")
	}
	if o.DataSetManagementDeleteSupportUserHandler == nil {
		unregistered = append(unregistered, "data_set_management.DeleteSupportUserHandler")
	}
	if o.DataSetManagementDeleteUserHandler == nil {
		unregistered = append(unregistered, "data_set_management.DeleteUserHandler")
	}
	if o.DataSetManagementDownloadDatasetHandler == nil {
		unregistered = append(unregistered, "data_set_management.DownloadDatasetHandler")
	}
	if o.StagingDuplicateHandler == nil {
		unregistered = append(unregistered, "staging.DuplicateHandler")
	}
	if o.DataSetManagementEncryptHandler == nil {
		unregistered = append(unregistered, "data_set_management.EncryptHandler")
	}
	if o.DataSetManagementFilePatchHandler == nil {
		unregistered = append(unregistered, "data_set_management.FilePatchHandler")
	}
	if o.DataSetManagementFilesDeleteHandler == nil {
		unregistered = append(unregistered, "data_set_management.FilesDeleteHandler")
	}
	if o.DataSetManagementFilesHeadHandler == nil {
		unregistered = append(unregistered, "data_set_management.FilesHeadHandler")
	}
	if o.DataSetManagementListingHandler == nil {
		unregistered = append(unregistered, "data_set_management.ListingHandler")
	}
	if o.DataSetManagementOptionsDatasetUploadHandler == nil {
		unregistered = append(unregistered, "data_set_management.OptionsDatasetUploadHandler")
	}
	if o.DataSetManagementPIDHandler == nil {
		unregistered = append(unregistered, "data_set_management.PIDHandler")
	}
	if o.DataSetManagementPostDatasetUploadHandler == nil {
		unregistered = append(unregistered, "data_set_management.PostDatasetUploadHandler")
	}
	if o.DataSetManagementPostStagingDownloadHandler == nil {
		unregistered = append(unregistered, "data_set_management.PostStagingDownloadHandler")
	}
	if o.DataSetManagementQueryDatasetsHandler == nil {
		unregistered = append(unregistered, "data_set_management.QueryDatasetsHandler")
	}
	if o.DataSetManagementRemoveGridmapEntryHandler == nil {
		unregistered = append(unregistered, "data_set_management.RemoveGridmapEntryHandler")
	}
	if o.DataSetManagementReplicateHandler == nil {
		unregistered = append(unregistered, "data_set_management.ReplicateHandler")
	}
	if o.DataSetManagementSizeHandler == nil {
		unregistered = append(unregistered, "data_set_management.SizeHandler")
	}
	if o.StagingStageHandler == nil {
		unregistered = append(unregistered, "staging.StageHandler")
	}
	if o.StagingStagingInfoHandler == nil {
		unregistered = append(unregistered, "staging.StagingInfoHandler")
	}
	if o.DataSetManagementCreateDatasetHandler == nil {
		unregistered = append(unregistered, "data_set_management.CreateDatasetHandler")
	}
	if o.StatusManagementGetStatusHandler == nil {
		unregistered = append(unregistered, "status_management.GetStatusHandler")
	}
	if o.StatusManagementShowStatusHandler == nil {
		unregistered = append(unregistered, "status_management.ShowStatusHandler")
	}

	if len(unregistered) > 0 {
		return fmt.Errorf("missing registration: %s", strings.Join(unregistered, ", "))
	}

	return nil
}

// ServeErrorFor gets a error handler for a given operation id
func (o *WP3BackedDataServiceAPIAPI) ServeErrorFor(operationID string) func(http.ResponseWriter, *http.Request, error) {
	return o.ServeError
}

// AuthenticatorsFor gets the authenticators for the specified security schemes
func (o *WP3BackedDataServiceAPIAPI) AuthenticatorsFor(schemes map[string]spec.SecurityScheme) map[string]runtime.Authenticator {
	result := make(map[string]runtime.Authenticator)
	for name := range schemes {
		switch name {
		case "Keycloak":
			result[name] = o.BearerAuthenticator(name, o.KeycloakAuth)

		}
	}
	return result
}

// Authorizer returns the registered authorizer
func (o *WP3BackedDataServiceAPIAPI) Authorizer() runtime.Authorizer {
	return o.APIAuthorizer
}

// ConsumersFor gets the consumers for the specified media types.
// MIME type parameters are ignored here.
func (o *WP3BackedDataServiceAPIAPI) ConsumersFor(mediaTypes []string) map[string]runtime.Consumer {
	result := make(map[string]runtime.Consumer, len(mediaTypes))
	for _, mt := range mediaTypes {
		switch mt {
		case "application/offset+octet-stream":
			result["application/offset+octet-stream"] = o.BinConsumer
		case "application/json":
			result["application/json"] = o.JSONConsumer
		}

		if c, ok := o.customConsumers[mt]; ok {
			result[mt] = c
		}
	}
	return result
}

// ProducersFor gets the producers for the specified media types.
// MIME type parameters are ignored here.
func (o *WP3BackedDataServiceAPIAPI) ProducersFor(mediaTypes []string) map[string]runtime.Producer {
	result := make(map[string]runtime.Producer, len(mediaTypes))
	for _, mt := range mediaTypes {
		switch mt {
		case "application/octet-stream":
			result["application/octet-stream"] = o.BinProducer
		case "application/json":
			result["application/json"] = o.JSONProducer
		}

		if p, ok := o.customProducers[mt]; ok {
			result[mt] = p
		}
	}
	return result
}

// HandlerFor gets a http.Handler for the provided operation method and path
func (o *WP3BackedDataServiceAPIAPI) HandlerFor(method, path string) (http.Handler, bool) {
	if o.handlers == nil {
		return nil, false
	}
	um := strings.ToUpper(method)
	if _, ok := o.handlers[um]; !ok {
		return nil, false
	}
	if path == "/" {
		path = ""
	}
	h, ok := o.handlers[um][path]
	return h, ok
}

// Context returns the middleware context for the w p3 backed data service API API
func (o *WP3BackedDataServiceAPIAPI) Context() *middleware.Context {
	if o.context == nil {
		o.context = middleware.NewRoutableContext(o.spec, o, nil)
	}

	return o.context
}

func (o *WP3BackedDataServiceAPIAPI) initHandlerCache() {
	o.Context() // don't care about the result, just that the initialization happened
	if o.handlers == nil {
		o.handlers = make(map[string]map[string]http.Handler)
	}

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/gridftp/gridmap"] = data_set_management.NewAddGridmapEntry(o.context, o.DataSetManagementAddGridmapEntryHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/project/admin"] = data_set_management.NewAddProjectAdmin(o.context, o.DataSetManagementAddProjectAdminHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/project/user"] = data_set_management.NewAddProjectUser(o.context, o.DataSetManagementAddProjectUserHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/support"] = data_set_management.NewAddSupportUser(o.context, o.DataSetManagementAddSupportUserHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/cert"] = data_set_management.NewCertificate(o.context, o.DataSetManagementCertificateHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/cloud/add/{param}"] = staging.NewCheckCloudNFSExportAddStatus(o.context, o.StagingCheckCloudNFSExportAddStatusHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/cloud/remove/{param}"] = staging.NewCheckCloudNFSExportRemoveStatus(o.context, o.StagingCheckCloudNFSExportRemoveStatusHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/compress/zip/{request_id}"] = staging.NewCheckCompressToZipStatus(o.context, o.StagingCheckCompressToZipStatusHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/encryption/compress_encrypt/{request_id}"] = data_set_management.NewCheckCompressionEncryptionStatus(o.context, o.DataSetManagementCheckCompressionEncryptionStatusHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/encryption/compress/{request_id}"] = data_set_management.NewCheckCompressionStatus(o.context, o.DataSetManagementCheckCompressionStatusHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/encryption/decompress/{request_id}"] = data_set_management.NewCheckDecompressionStatus(o.context, o.DataSetManagementCheckDecompressionStatusHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/encryption/decrypt_decompress/{request_id}"] = data_set_management.NewCheckDecryptionDecompressionStatus(o.context, o.DataSetManagementCheckDecryptionDecompressionStatusHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/encryption/decrypt/{request_id}"] = data_set_management.NewCheckDecryptionStatus(o.context, o.DataSetManagementCheckDecryptionStatusHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/staging/delete/{request_id}"] = staging.NewCheckDeletionStatus(o.context, o.StagingCheckDeletionStatusHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/staging/duplicate/{request_id}"] = staging.NewCheckDuplicationStatus(o.context, o.StagingCheckDuplicationStatusHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/encryption/encrypt/{request_id}"] = data_set_management.NewCheckEncryptionStatus(o.context, o.DataSetManagementCheckEncryptionStatusHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/pid/{request_id}"] = data_set_management.NewCheckPIDStatus(o.context, o.DataSetManagementCheckPIDStatusHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/dataset/checkpermission"] = data_set_management.NewCheckPermission(o.context, o.DataSetManagementCheckPermissionHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/replicate/{request_id}"] = data_set_management.NewCheckReplicateStatus(o.context, o.DataSetManagementCheckReplicateStatusHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/data/size/{request_id}"] = data_set_management.NewCheckSizeStatus(o.context, o.DataSetManagementCheckSizeStatusHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/staging/stage/{request_id}"] = staging.NewCheckStageStatus(o.context, o.StagingCheckStageStatusHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/cloud/add/{param}"] = staging.NewCloudNFSExportAdd(o.context, o.StagingCloudNFSExportAddHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/cloud/remove/{param}"] = staging.NewCloudNFSExportRemove(o.context, o.StagingCloudNFSExportRemoveHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/encryption/compress"] = data_set_management.NewCompress(o.context, o.DataSetManagementCompressHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/encryption/compress_encrypt"] = data_set_management.NewCompressEncrypt(o.context, o.DataSetManagementCompressEncryptHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/compress/zip"] = staging.NewCompressToZip(o.context, o.StagingCompressToZipHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/project"] = data_set_management.NewCreateProject(o.context, o.DataSetManagementCreateProjectHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/ssh/sshfsexport"] = data_set_management.NewCreateSSHFSExport(o.context, o.DataSetManagementCreateSSHFSExportHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/user"] = data_set_management.NewCreateUser(o.context, o.DataSetManagementCreateUserHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/encryption/decompress"] = data_set_management.NewDecompress(o.context, o.DataSetManagementDecompressHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/encryption/decrypt"] = data_set_management.NewDecrypt(o.context, o.DataSetManagementDecryptHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/encryption/decrypt_decompress"] = data_set_management.NewDecryptDecompress(o.context, o.DataSetManagementDecryptDecompressHandler)
	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/staging/delete"] = staging.NewDelete(o.context, o.StagingDeleteHandler)
	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/dataset"] = data_set_management.NewDeleteDataset(o.context, o.DataSetManagementDeleteDatasetHandler)
	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/dataset/search/metadata"] = data_set_management.NewDeleteDatasetByMetadata(o.context, o.DataSetManagementDeleteDatasetByMetadataHandler)
	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/project"] = data_set_management.NewDeleteProject(o.context, o.DataSetManagementDeleteProjectHandler)
	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/project/admin"] = data_set_management.NewDeleteProjectAdmin(o.context, o.DataSetManagementDeleteProjectAdminHandler)
	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/project/user"] = data_set_management.NewDeleteProjectUser(o.context, o.DataSetManagementDeleteProjectUserHandler)
	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/ssh/sshfsexport"] = data_set_management.NewDeleteSSHFSExport(o.context, o.DataSetManagementDeleteSSHFSExportHandler)
	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/support"] = data_set_management.NewDeleteSupportUser(o.context, o.DataSetManagementDeleteSupportUserHandler)
	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/user"] = data_set_management.NewDeleteUser(o.context, o.DataSetManagementDeleteUserHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/dataset/download"] = data_set_management.NewDownloadDataset(o.context, o.DataSetManagementDownloadDatasetHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/staging/duplicate"] = staging.NewDuplicate(o.context, o.StagingDuplicateHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/encryption/encrypt"] = data_set_management.NewEncrypt(o.context, o.DataSetManagementEncryptHandler)
	if o.handlers["PATCH"] == nil {
		o.handlers["PATCH"] = make(map[string]http.Handler)
	}
	o.handlers["PATCH"]["/dataset/upload/{id}"] = data_set_management.NewFilePatch(o.context, o.DataSetManagementFilePatchHandler)
	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/dataset/upload/{id}"] = data_set_management.NewFilesDelete(o.context, o.DataSetManagementFilesDeleteHandler)
	if o.handlers["HEAD"] == nil {
		o.handlers["HEAD"] = make(map[string]http.Handler)
	}
	o.handlers["HEAD"]["/dataset/upload/{id}"] = data_set_management.NewFilesHead(o.context, o.DataSetManagementFilesHeadHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/dataset/listing"] = data_set_management.NewListing(o.context, o.DataSetManagementListingHandler)
	if o.handlers["OPTIONS"] == nil {
		o.handlers["OPTIONS"] = make(map[string]http.Handler)
	}
	o.handlers["OPTIONS"]["/dataset/upload"] = data_set_management.NewOptionsDatasetUpload(o.context, o.DataSetManagementOptionsDatasetUploadHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/pid/assign"] = data_set_management.NewPID(o.context, o.DataSetManagementPIDHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/dataset/upload"] = data_set_management.NewPostDatasetUpload(o.context, o.DataSetManagementPostDatasetUploadHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/staging/download"] = data_set_management.NewPostStagingDownload(o.context, o.DataSetManagementPostStagingDownloadHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/dataset/search/metadata"] = data_set_management.NewQueryDatasets(o.context, o.DataSetManagementQueryDatasetsHandler)
	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/gridftp/gridmap"] = data_set_management.NewRemoveGridmapEntry(o.context, o.DataSetManagementRemoveGridmapEntryHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/replicate"] = data_set_management.NewReplicate(o.context, o.DataSetManagementReplicateHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/data/size"] = data_set_management.NewSize(o.context, o.DataSetManagementSizeHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/staging/stage"] = staging.NewStage(o.context, o.StagingStageHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/staging/info"] = staging.NewStagingInfo(o.context, o.StagingStagingInfoHandler)
	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/dataset"] = data_set_management.NewCreateDataset(o.context, o.DataSetManagementCreateDatasetHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/status/{id}"] = status_management.NewGetStatus(o.context, o.StatusManagementGetStatusHandler)
	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/status"] = status_management.NewShowStatus(o.context, o.StatusManagementShowStatusHandler)
}

// Serve creates a http handler to serve the API over HTTP
// can be used directly in http.ListenAndServe(":8000", api.Serve(nil))
func (o *WP3BackedDataServiceAPIAPI) Serve(builder middleware.Builder) http.Handler {
	o.Init()

	if o.Middleware != nil {
		return o.Middleware(builder)
	}
	if o.useSwaggerUI {
		return o.context.APIHandlerSwaggerUI(builder)
	}
	return o.context.APIHandler(builder)
}

// Init allows you to just initialize the handler cache, you can then recompose the middleware as you see fit
func (o *WP3BackedDataServiceAPIAPI) Init() {
	if len(o.handlers) == 0 {
		o.initHandlerCache()
	}
}

// RegisterConsumer allows you to add (or override) a consumer for a media type.
func (o *WP3BackedDataServiceAPIAPI) RegisterConsumer(mediaType string, consumer runtime.Consumer) {
	o.customConsumers[mediaType] = consumer
}

// RegisterProducer allows you to add (or override) a producer for a media type.
func (o *WP3BackedDataServiceAPIAPI) RegisterProducer(mediaType string, producer runtime.Producer) {
	o.customProducers[mediaType] = producer
}

// AddMiddlewareFor adds a http middleware to existing handler
func (o *WP3BackedDataServiceAPIAPI) AddMiddlewareFor(method, path string, builder middleware.Builder) {
	um := strings.ToUpper(method)
	if path == "/" {
		path = ""
	}
	o.Init()
	if h, ok := o.handlers[um][path]; ok {
		o.handlers[method][path] = builder(h)
	}
}
