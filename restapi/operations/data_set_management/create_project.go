// Code generated by go-swagger; DO NOT EDIT.

package data_set_management

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CreateProjectHandlerFunc turns a function with the right signature into a create project handler
type CreateProjectHandlerFunc func(CreateProjectParams, interface{}) middleware.Responder

// Handle executing the request and returning a response
func (fn CreateProjectHandlerFunc) Handle(params CreateProjectParams, principal interface{}) middleware.Responder {
	return fn(params, principal)
}

// CreateProjectHandler interface for that can handle valid create project params
type CreateProjectHandler interface {
	Handle(CreateProjectParams, interface{}) middleware.Responder
}

// NewCreateProject creates a new http.Handler for the create project operation
func NewCreateProject(ctx *middleware.Context, handler CreateProjectHandler) *CreateProject {
	return &CreateProject{Context: ctx, Handler: handler}
}

/*CreateProject swagger:route POST /project dataSetManagement iRODSPermissionManagement createProject

Create a project in iRODS WP3 DDI

Create a project in iRODS WP3 DDI

*/
type CreateProject struct {
	Context *middleware.Context
	Handler CreateProjectHandler
}

func (o *CreateProject) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewCreateProjectParams()

	uprinc, aCtx, err := o.Context.Authorize(r, route)
	if err != nil {
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}
	if aCtx != nil {
		r = aCtx
	}
	var principal interface{}
	if uprinc != nil {
		principal = uprinc
	}

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params, principal) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}

// CreateProjectBody create project body
//
// swagger:model CreateProjectBody
type CreateProjectBody struct {

	// Project name (Keycloak group)
	// Required: true
	Projectname *string `json:"projectname"`
}

// Validate validates this create project body
func (o *CreateProjectBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateProjectname(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CreateProjectBody) validateProjectname(formats strfmt.Registry) error {

	if err := validate.Required("ProjectInfo"+"."+"projectname", "body", o.Projectname); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *CreateProjectBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreateProjectBody) UnmarshalBinary(b []byte) error {
	var res CreateProjectBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
