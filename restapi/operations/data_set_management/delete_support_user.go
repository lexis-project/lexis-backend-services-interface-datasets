// Code generated by go-swagger; DO NOT EDIT.

package data_set_management

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// DeleteSupportUserHandlerFunc turns a function with the right signature into a delete support user handler
type DeleteSupportUserHandlerFunc func(DeleteSupportUserParams, interface{}) middleware.Responder

// Handle executing the request and returning a response
func (fn DeleteSupportUserHandlerFunc) Handle(params DeleteSupportUserParams, principal interface{}) middleware.Responder {
	return fn(params, principal)
}

// DeleteSupportUserHandler interface for that can handle valid delete support user params
type DeleteSupportUserHandler interface {
	Handle(DeleteSupportUserParams, interface{}) middleware.Responder
}

// NewDeleteSupportUser creates a new http.Handler for the delete support user operation
func NewDeleteSupportUser(ctx *middleware.Context, handler DeleteSupportUserHandler) *DeleteSupportUser {
	return &DeleteSupportUser{Context: ctx, Handler: handler}
}

/*DeleteSupportUser swagger:route DELETE /support dataSetManagement deleteSupportUser

Remove user from support duties in iRODS WP3 DDI

Remove user from support duties in iRODS WP3 DDI

*/
type DeleteSupportUser struct {
	Context *middleware.Context
	Handler DeleteSupportUserHandler
}

func (o *DeleteSupportUser) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewDeleteSupportUserParams()

	uprinc, aCtx, err := o.Context.Authorize(r, route)
	if err != nil {
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}
	if aCtx != nil {
		r = aCtx
	}
	var principal interface{}
	if uprinc != nil {
		principal = uprinc
	}

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params, principal) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}

// DeleteSupportUserBody delete support user body
//
// swagger:model DeleteSupportUserBody
type DeleteSupportUserBody struct {

	// Keycloak / iRODS Username
	// Required: true
	Username *string `json:"username"`
}

// Validate validates this delete support user body
func (o *DeleteSupportUserBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateUsername(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *DeleteSupportUserBody) validateUsername(formats strfmt.Registry) error {

	if err := validate.Required("Username"+"."+"username", "body", o.Username); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *DeleteSupportUserBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *DeleteSupportUserBody) UnmarshalBinary(b []byte) error {
	var res DeleteSupportUserBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
