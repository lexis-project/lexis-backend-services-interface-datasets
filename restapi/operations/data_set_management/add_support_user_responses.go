// Code generated by go-swagger; DO NOT EDIT.

package data_set_management

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"code.it4i.cz/lexis/wp8/dataset-management-interface.git/models"
)

// AddSupportUserCreatedCode is the HTTP code returned for type AddSupportUserCreated
const AddSupportUserCreatedCode int = 201

/*AddSupportUserCreated User was added to support group

swagger:response addSupportUserCreated
*/
type AddSupportUserCreated struct {
}

// NewAddSupportUserCreated creates AddSupportUserCreated with default headers values
func NewAddSupportUserCreated() *AddSupportUserCreated {

	return &AddSupportUserCreated{}
}

// WriteResponse to the client
func (o *AddSupportUserCreated) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.Header().Del(runtime.HeaderContentType) //Remove Content-Type on empty responses

	rw.WriteHeader(201)
}

// AddSupportUserBadRequestCode is the HTTP code returned for type AddSupportUserBadRequest
const AddSupportUserBadRequestCode int = 400

/*AddSupportUserBadRequest Malformed request

swagger:response addSupportUserBadRequest
*/
type AddSupportUserBadRequest struct {

	/*
	  In: Body
	*/
	Payload *models.ErrorResponse `json:"body,omitempty"`
}

// NewAddSupportUserBadRequest creates AddSupportUserBadRequest with default headers values
func NewAddSupportUserBadRequest() *AddSupportUserBadRequest {

	return &AddSupportUserBadRequest{}
}

// WithPayload adds the payload to the add support user bad request response
func (o *AddSupportUserBadRequest) WithPayload(payload *models.ErrorResponse) *AddSupportUserBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the add support user bad request response
func (o *AddSupportUserBadRequest) SetPayload(payload *models.ErrorResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *AddSupportUserBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(400)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// AddSupportUserUnauthorizedCode is the HTTP code returned for type AddSupportUserUnauthorized
const AddSupportUserUnauthorizedCode int = 401

/*AddSupportUserUnauthorized Unauthorized

swagger:response addSupportUserUnauthorized
*/
type AddSupportUserUnauthorized struct {

	/*
	  In: Body
	*/
	Payload *models.ErrorResponse `json:"body,omitempty"`
}

// NewAddSupportUserUnauthorized creates AddSupportUserUnauthorized with default headers values
func NewAddSupportUserUnauthorized() *AddSupportUserUnauthorized {

	return &AddSupportUserUnauthorized{}
}

// WithPayload adds the payload to the add support user unauthorized response
func (o *AddSupportUserUnauthorized) WithPayload(payload *models.ErrorResponse) *AddSupportUserUnauthorized {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the add support user unauthorized response
func (o *AddSupportUserUnauthorized) SetPayload(payload *models.ErrorResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *AddSupportUserUnauthorized) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(401)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// AddSupportUserInternalServerErrorCode is the HTTP code returned for type AddSupportUserInternalServerError
const AddSupportUserInternalServerErrorCode int = 500

/*AddSupportUserInternalServerError Internal error processing request

swagger:response addSupportUserInternalServerError
*/
type AddSupportUserInternalServerError struct {

	/*
	  In: Body
	*/
	Payload *models.ErrorResponse `json:"body,omitempty"`
}

// NewAddSupportUserInternalServerError creates AddSupportUserInternalServerError with default headers values
func NewAddSupportUserInternalServerError() *AddSupportUserInternalServerError {

	return &AddSupportUserInternalServerError{}
}

// WithPayload adds the payload to the add support user internal server error response
func (o *AddSupportUserInternalServerError) WithPayload(payload *models.ErrorResponse) *AddSupportUserInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the add support user internal server error response
func (o *AddSupportUserInternalServerError) SetPayload(payload *models.ErrorResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *AddSupportUserInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// AddSupportUserBadGatewayCode is the HTTP code returned for type AddSupportUserBadGateway
const AddSupportUserBadGatewayCode int = 502

/*AddSupportUserBadGateway Bad Gateway

swagger:response addSupportUserBadGateway
*/
type AddSupportUserBadGateway struct {

	/*
	  In: Body
	*/
	Payload *models.ErrorResponse `json:"body,omitempty"`
}

// NewAddSupportUserBadGateway creates AddSupportUserBadGateway with default headers values
func NewAddSupportUserBadGateway() *AddSupportUserBadGateway {

	return &AddSupportUserBadGateway{}
}

// WithPayload adds the payload to the add support user bad gateway response
func (o *AddSupportUserBadGateway) WithPayload(payload *models.ErrorResponse) *AddSupportUserBadGateway {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the add support user bad gateway response
func (o *AddSupportUserBadGateway) SetPayload(payload *models.ErrorResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *AddSupportUserBadGateway) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(502)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
