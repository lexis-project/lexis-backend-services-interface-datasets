// Code generated by go-swagger; DO NOT EDIT.

package data_set_management

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"code.it4i.cz/lexis/wp8/dataset-management-interface.git/models"
)

// DeleteProjectNoContentCode is the HTTP code returned for type DeleteProjectNoContent
const DeleteProjectNoContentCode int = 204

/*DeleteProjectNoContent Project was deleted or does not exist

swagger:response deleteProjectNoContent
*/
type DeleteProjectNoContent struct {
}

// NewDeleteProjectNoContent creates DeleteProjectNoContent with default headers values
func NewDeleteProjectNoContent() *DeleteProjectNoContent {

	return &DeleteProjectNoContent{}
}

// WriteResponse to the client
func (o *DeleteProjectNoContent) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.Header().Del(runtime.HeaderContentType) //Remove Content-Type on empty responses

	rw.WriteHeader(204)
}

// DeleteProjectBadRequestCode is the HTTP code returned for type DeleteProjectBadRequest
const DeleteProjectBadRequestCode int = 400

/*DeleteProjectBadRequest Malformed request

swagger:response deleteProjectBadRequest
*/
type DeleteProjectBadRequest struct {

	/*
	  In: Body
	*/
	Payload *models.ErrorResponse `json:"body,omitempty"`
}

// NewDeleteProjectBadRequest creates DeleteProjectBadRequest with default headers values
func NewDeleteProjectBadRequest() *DeleteProjectBadRequest {

	return &DeleteProjectBadRequest{}
}

// WithPayload adds the payload to the delete project bad request response
func (o *DeleteProjectBadRequest) WithPayload(payload *models.ErrorResponse) *DeleteProjectBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the delete project bad request response
func (o *DeleteProjectBadRequest) SetPayload(payload *models.ErrorResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *DeleteProjectBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(400)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// DeleteProjectUnauthorizedCode is the HTTP code returned for type DeleteProjectUnauthorized
const DeleteProjectUnauthorizedCode int = 401

/*DeleteProjectUnauthorized Unauthorized

swagger:response deleteProjectUnauthorized
*/
type DeleteProjectUnauthorized struct {

	/*
	  In: Body
	*/
	Payload *models.ErrorResponse `json:"body,omitempty"`
}

// NewDeleteProjectUnauthorized creates DeleteProjectUnauthorized with default headers values
func NewDeleteProjectUnauthorized() *DeleteProjectUnauthorized {

	return &DeleteProjectUnauthorized{}
}

// WithPayload adds the payload to the delete project unauthorized response
func (o *DeleteProjectUnauthorized) WithPayload(payload *models.ErrorResponse) *DeleteProjectUnauthorized {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the delete project unauthorized response
func (o *DeleteProjectUnauthorized) SetPayload(payload *models.ErrorResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *DeleteProjectUnauthorized) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(401)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// DeleteProjectInternalServerErrorCode is the HTTP code returned for type DeleteProjectInternalServerError
const DeleteProjectInternalServerErrorCode int = 500

/*DeleteProjectInternalServerError Internal error processing request

swagger:response deleteProjectInternalServerError
*/
type DeleteProjectInternalServerError struct {

	/*
	  In: Body
	*/
	Payload *models.ErrorResponse `json:"body,omitempty"`
}

// NewDeleteProjectInternalServerError creates DeleteProjectInternalServerError with default headers values
func NewDeleteProjectInternalServerError() *DeleteProjectInternalServerError {

	return &DeleteProjectInternalServerError{}
}

// WithPayload adds the payload to the delete project internal server error response
func (o *DeleteProjectInternalServerError) WithPayload(payload *models.ErrorResponse) *DeleteProjectInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the delete project internal server error response
func (o *DeleteProjectInternalServerError) SetPayload(payload *models.ErrorResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *DeleteProjectInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// DeleteProjectBadGatewayCode is the HTTP code returned for type DeleteProjectBadGateway
const DeleteProjectBadGatewayCode int = 502

/*DeleteProjectBadGateway Bad Gateway

swagger:response deleteProjectBadGateway
*/
type DeleteProjectBadGateway struct {

	/*
	  In: Body
	*/
	Payload *models.ErrorResponse `json:"body,omitempty"`
}

// NewDeleteProjectBadGateway creates DeleteProjectBadGateway with default headers values
func NewDeleteProjectBadGateway() *DeleteProjectBadGateway {

	return &DeleteProjectBadGateway{}
}

// WithPayload adds the payload to the delete project bad gateway response
func (o *DeleteProjectBadGateway) WithPayload(payload *models.ErrorResponse) *DeleteProjectBadGateway {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the delete project bad gateway response
func (o *DeleteProjectBadGateway) SetPayload(payload *models.ErrorResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *DeleteProjectBadGateway) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(502)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
