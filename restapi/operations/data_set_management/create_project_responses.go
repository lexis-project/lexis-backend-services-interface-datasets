// Code generated by go-swagger; DO NOT EDIT.

package data_set_management

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"code.it4i.cz/lexis/wp8/dataset-management-interface.git/models"
)

// CreateProjectCreatedCode is the HTTP code returned for type CreateProjectCreated
const CreateProjectCreatedCode int = 201

/*CreateProjectCreated Project was created

swagger:response createProjectCreated
*/
type CreateProjectCreated struct {
}

// NewCreateProjectCreated creates CreateProjectCreated with default headers values
func NewCreateProjectCreated() *CreateProjectCreated {

	return &CreateProjectCreated{}
}

// WriteResponse to the client
func (o *CreateProjectCreated) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.Header().Del(runtime.HeaderContentType) //Remove Content-Type on empty responses

	rw.WriteHeader(201)
}

// CreateProjectBadRequestCode is the HTTP code returned for type CreateProjectBadRequest
const CreateProjectBadRequestCode int = 400

/*CreateProjectBadRequest Malformed request

swagger:response createProjectBadRequest
*/
type CreateProjectBadRequest struct {

	/*
	  In: Body
	*/
	Payload *models.ErrorResponse `json:"body,omitempty"`
}

// NewCreateProjectBadRequest creates CreateProjectBadRequest with default headers values
func NewCreateProjectBadRequest() *CreateProjectBadRequest {

	return &CreateProjectBadRequest{}
}

// WithPayload adds the payload to the create project bad request response
func (o *CreateProjectBadRequest) WithPayload(payload *models.ErrorResponse) *CreateProjectBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the create project bad request response
func (o *CreateProjectBadRequest) SetPayload(payload *models.ErrorResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *CreateProjectBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(400)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// CreateProjectUnauthorizedCode is the HTTP code returned for type CreateProjectUnauthorized
const CreateProjectUnauthorizedCode int = 401

/*CreateProjectUnauthorized Unauthorized

swagger:response createProjectUnauthorized
*/
type CreateProjectUnauthorized struct {

	/*
	  In: Body
	*/
	Payload *models.ErrorResponse `json:"body,omitempty"`
}

// NewCreateProjectUnauthorized creates CreateProjectUnauthorized with default headers values
func NewCreateProjectUnauthorized() *CreateProjectUnauthorized {

	return &CreateProjectUnauthorized{}
}

// WithPayload adds the payload to the create project unauthorized response
func (o *CreateProjectUnauthorized) WithPayload(payload *models.ErrorResponse) *CreateProjectUnauthorized {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the create project unauthorized response
func (o *CreateProjectUnauthorized) SetPayload(payload *models.ErrorResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *CreateProjectUnauthorized) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(401)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// CreateProjectForbiddenCode is the HTTP code returned for type CreateProjectForbidden
const CreateProjectForbiddenCode int = 403

/*CreateProjectForbidden Permission denied

swagger:response createProjectForbidden
*/
type CreateProjectForbidden struct {

	/*
	  In: Body
	*/
	Payload *models.ErrorResponse `json:"body,omitempty"`
}

// NewCreateProjectForbidden creates CreateProjectForbidden with default headers values
func NewCreateProjectForbidden() *CreateProjectForbidden {

	return &CreateProjectForbidden{}
}

// WithPayload adds the payload to the create project forbidden response
func (o *CreateProjectForbidden) WithPayload(payload *models.ErrorResponse) *CreateProjectForbidden {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the create project forbidden response
func (o *CreateProjectForbidden) SetPayload(payload *models.ErrorResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *CreateProjectForbidden) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(403)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// CreateProjectConflictCode is the HTTP code returned for type CreateProjectConflict
const CreateProjectConflictCode int = 409

/*CreateProjectConflict Conflict: the project already exists

swagger:response createProjectConflict
*/
type CreateProjectConflict struct {

	/*
	  In: Body
	*/
	Payload *models.ErrorResponse `json:"body,omitempty"`
}

// NewCreateProjectConflict creates CreateProjectConflict with default headers values
func NewCreateProjectConflict() *CreateProjectConflict {

	return &CreateProjectConflict{}
}

// WithPayload adds the payload to the create project conflict response
func (o *CreateProjectConflict) WithPayload(payload *models.ErrorResponse) *CreateProjectConflict {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the create project conflict response
func (o *CreateProjectConflict) SetPayload(payload *models.ErrorResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *CreateProjectConflict) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(409)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// CreateProjectInternalServerErrorCode is the HTTP code returned for type CreateProjectInternalServerError
const CreateProjectInternalServerErrorCode int = 500

/*CreateProjectInternalServerError Internal error processing request

swagger:response createProjectInternalServerError
*/
type CreateProjectInternalServerError struct {

	/*
	  In: Body
	*/
	Payload *models.ErrorResponse `json:"body,omitempty"`
}

// NewCreateProjectInternalServerError creates CreateProjectInternalServerError with default headers values
func NewCreateProjectInternalServerError() *CreateProjectInternalServerError {

	return &CreateProjectInternalServerError{}
}

// WithPayload adds the payload to the create project internal server error response
func (o *CreateProjectInternalServerError) WithPayload(payload *models.ErrorResponse) *CreateProjectInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the create project internal server error response
func (o *CreateProjectInternalServerError) SetPayload(payload *models.ErrorResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *CreateProjectInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// CreateProjectBadGatewayCode is the HTTP code returned for type CreateProjectBadGateway
const CreateProjectBadGatewayCode int = 502

/*CreateProjectBadGateway Bad Gateway

swagger:response createProjectBadGateway
*/
type CreateProjectBadGateway struct {

	/*
	  In: Body
	*/
	Payload *models.ErrorResponse `json:"body,omitempty"`
}

// NewCreateProjectBadGateway creates CreateProjectBadGateway with default headers values
func NewCreateProjectBadGateway() *CreateProjectBadGateway {

	return &CreateProjectBadGateway{}
}

// WithPayload adds the payload to the create project bad gateway response
func (o *CreateProjectBadGateway) WithPayload(payload *models.ErrorResponse) *CreateProjectBadGateway {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the create project bad gateway response
func (o *CreateProjectBadGateway) SetPayload(payload *models.ErrorResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *CreateProjectBadGateway) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(502)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
