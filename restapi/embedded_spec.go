// Code generated by go-swagger; DO NOT EDIT.

package restapi

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
)

var (
	// SwaggerJSON embedded version of the swagger document used at generation time
	SwaggerJSON json.RawMessage
	// FlatSwaggerJSON embedded flattened version of the swagger document used at generation time
	FlatSwaggerJSON json.RawMessage
)

func init() {
	SwaggerJSON = json.RawMessage([]byte(`{
  "swagger": "2.0",
  "info": {
    "description": "An API which supports querying available LEXIS data sets",
    "title": "WP3-backed Data Service API",
    "contact": {
      "email": "ruben@lrz.de"
    },
    "license": {
      "name": "Apache 2.0",
      "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
    },
    "version": "0.1.1"
  },
  "basePath": "/api/v0.1.1",
  "paths": {
    "/cert": {
      "get": {
        "description": "download public key for WP3 APIs",
        "produces": [
          "application/octet-stream"
        ],
        "tags": [
          "dataSetManagement"
        ],
        "summary": "download public key for WP3 APIs",
        "operationId": "Certificate",
        "responses": {
          "200": {
            "description": "Certificate download in body of response",
            "schema": {
              "type": "file"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "Internal error processing request",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "502": {
            "description": "Bad Gateway",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "503": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/cloud/add/{param}": {
      "get": {
        "security": [],
        "description": "Check the status of a nfs export add request for the cloud",
        "produces": [
          "application/json"
        ],
        "tags": [
          "staging"
        ],
        "summary": "Check the status of a nfs export add request for the cloud",
        "operationId": "CheckCloudNFSExportAddStatus",
        "parameters": [
          {
            "type": "string",
            "description": "queue identifier returned by a POST request at /cloud/add/{param}",
            "name": "param",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "This means that the status has been returned to the user in the response body.",
            "schema": {
              "type": "object",
              "required": [
                "status"
              ],
              "properties": {
                "status": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "This means that the request ID given by the user is incorrect.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "This means that the user is not authenticated with keycloak and NFS export can't be triggered unless the user first log in with a valid user",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "The IP is outside of the allowed range",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "This means that the ID doesn't exist and thus a status can't be returned.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "414": {
            "description": "This means that the the request ID is longer than the server is willing to interpret.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "This means that something has gone wrong on the data transfer steering server. The user is advised to wait and send the request again.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      },
      "post": {
        "security": [
          {
            "Keycloak": []
          }
        ],
        "description": "Request that an nfs export be created for an LRZ cloud instance",
        "produces": [
          "application/json"
        ],
        "tags": [
          "staging"
        ],
        "summary": "Request that an nfs export be created for an LRZ cloud instance",
        "operationId": "CloudNFSExportAdd",
        "parameters": [
          {
            "type": "string",
            "description": "IP of the cloud machine",
            "name": "param",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "201": {
            "description": "The response code means that the request for addition has been initiated. Status of the addition process can be checked by querying the status.",
            "schema": {
              "$ref": "#/definitions/RequestID"
            }
          },
          "400": {
            "description": "This means that the request ID given by the user is incorrect.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "This means that the user is not authenticated with keycloak and data transfer can't be triggered unless the user first log in with a valid user",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "The IP is outside of the allowed range",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "414": {
            "description": "This means that the the request ID is longer than the server is willing to interpret.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "This means that something has gone wrong on the data transfer steering server. The user is advised to wait and send the request again.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/cloud/remove/{param}": {
      "get": {
        "security": [],
        "description": "Check the status of a nfs export remove request for the cloud",
        "produces": [
          "application/json"
        ],
        "tags": [
          "staging"
        ],
        "summary": "Check the status of a nfs export remove request for the cloud",
        "operationId": "CheckCloudNFSExportRemoveStatus",
        "parameters": [
          {
            "type": "string",
            "description": "queue identifier returned by a POST request at /cloud/remove/{param}",
            "name": "param",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "This means that the status has been returned to the user in the response body.",
            "schema": {
              "type": "object",
              "required": [
                "status"
              ],
              "properties": {
                "status": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "This means that the request ID given by the user is incorrect.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "This means that the user is not authenticated with keycloak and data transfer can't be triggered unless the user first log in with a valid user",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "This means that the ID doesn't exist and thus a status can't be returned.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "414": {
            "description": "This means that the the request ID is longer than the server is willing to interpret.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "This means that something has gone wrong on the data transfer steering server. The user is advised to wait and send the request again.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      },
      "post": {
        "security": [
          {
            "Keycloak": []
          }
        ],
        "description": "Request that an nfs export be removed for an LRZ cloud instance",
        "produces": [
          "application/json"
        ],
        "tags": [
          "staging"
        ],
        "summary": "Request that an nfs export be removed for an LRZ cloud instance",
        "operationId": "CloudNFSExportRemove",
        "parameters": [
          {
            "type": "string",
            "description": "IP of the cloud machine",
            "name": "param",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "201": {
            "description": "The response code means that the request for removal has been initiated. Status of the removal process can be checked by querying the status.",
            "schema": {
              "$ref": "#/definitions/RequestID"
            }
          },
          "400": {
            "description": "This means that the request ID given by the user is incorrect.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "This means that the user is not authenticated with keycloak and data transfer can't be triggered unless the user first log in with a valid user",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "414": {
            "description": "This means that the the request ID is longer than the server is willing to interpret.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "This means that something has gone wrong on the data transfer steering server. The user is advised to wait and send the request again.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/compress/zip": {
      "post": {
        "description": "Creates a multipart zip file from a staging api source_system/source_path combination",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "staging",
          "CompressAPI"
        ],
        "summary": "Creates a multipart zip file from a staging api source_system/source_path combination",
        "operationId": "CompressToZip",
        "parameters": [
          {
            "description": "parameters",
            "name": "parameters",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "required": [
                "source_system",
                "source_path",
                "size"
              ],
              "properties": {
                "size": {
                  "type": "integer"
                },
                "source_path": {
                  "type": "string"
                },
                "source_system": {
                  "type": "string",
                  "enum": [
                    "lrz_iRODS"
                  ]
                }
              }
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Request was added to the queue",
            "schema": {
              "$ref": "#/definitions/RequestID"
            }
          },
          "400": {
            "description": "Malformed Request",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "502": {
            "description": "Bad Gateway",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "503": {
            "description": "Server error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/compress/zip/{request_id}": {
      "get": {
        "security": [],
        "description": "Check the status of a multipart zip creation.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "staging",
          "dataSetManagement"
        ],
        "summary": "Check the status of a multipart zip creation.",
        "operationId": "CheckCompressToZipStatus",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "name": "request_id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "This means that the status has been returned to the user in the response body.",
            "schema": {
              "type": "object",
              "required": [
                "status"
              ],
              "properties": {
                "status": {
                  "type": "string"
                },
                "target_paths": {
                  "description": "Multiple paths for CompressAPI endpoints",
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              }
            }
          },
          "400": {
            "description": "This means that the request ID given by the user is incorrect.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "This means that the user is not authenticated with keycloak and data transfer can't be triggered unless the user first log in with a valid user",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "This means that the ID doesn't exist and thus a status can't be returned.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "414": {
            "description": "This means that the the request ID is longer than the server is willing to interpret.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "This means that something has gone wrong on the data transfer steering server. The user is advised to wait and send the request again.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/data/size": {
      "post": {
        "description": "This is called when a user requests size of a dataset.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "dataSetManagement"
        ],
        "summary": "This is called when a user requests size of a dataset.",
        "operationId": "Size",
        "parameters": [
          {
            "description": "parameters",
            "name": "parameters",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "required": [
                "target_system",
                "target_path"
              ],
              "properties": {
                "target_path": {
                  "type": "string"
                },
                "target_system": {
                  "type": "string"
                }
              }
            }
          }
        ],
        "responses": {
          "201": {
            "description": "This is called when a user requests size of a dataset.",
            "schema": {
              "$ref": "#/definitions/RequestID"
            }
          },
          "400": {
            "description": "This means that there's something wrong in the input parameters and the server couldn't understand the request.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "This means that the user is not authenticated with keycloak and data transfer can't be triggered unless the user first log in with a valid user",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "This means that the resource the user is trying to transfer from or to is not readable or writable by the user. User doesn't have the correct rights to either read the source file or write on the target system location.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "This means that either the source path or the the target path on the system doesn't exist.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "414": {
            "description": "This means that the either the source path or the target path is longer than the server is willing to interpret.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "429": {
            "description": "This means that the user has sent too many requests in a given amount of time. The user is advised to wait and send the request again.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "This means that something has gone wrong on the data transfer steering server. The user is advised to wait and send the request again.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/data/size/{request_id}": {
      "get": {
        "description": "This is called when a user requests to check the status of datasize request",
        "produces": [
          "application/json"
        ],
        "tags": [
          "dataSetManagement"
        ],
        "summary": "This is called when a user requests to check the status of datasize request",
        "operationId": "CheckSizeStatus",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "name": "request_id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "This means that the status has been returned to the user in the response body.",
            "schema": {
              "$ref": "#/definitions/DataSize"
            }
          },
          "400": {
            "description": "This means that there's something wrong in the input parameters and the server couldn't understand the request.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "This means that the user is not authenticated with keycloak and data transfer can't be triggered unless the user first log in with a valid user",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "This means that the resource the user is trying to transfer from or to is not readable or writable by the user. User doesn't have the correct rights to either read the source file or write on the target system location.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "This means that either the source path or the the target path on the system doesn't exist.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "414": {
            "description": "This means that the either the source path or the target path is longer than the server is willing to interpret.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "429": {
            "description": "This means that the user has sent too many requests in a given amount of time. The user is advised to wait and send the request again.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "This means that something has gone wrong on the data transfer steering server. The user is advised to wait and send the request again.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/dataset": {
      "post": {
        "description": "Creates a new dataset",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "dataSetManagement"
        ],
        "summary": "Create a dataset",
        "operationId": "createDataset",
        "parameters": [
          {
            "description": "parameters",
            "name": "dataset",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "required": [
                "push_method",
                "access",
                "project"
              ],
              "properties": {
                "access": {
                  "$ref": "#/definitions/AccessMode"
                },
                "comp": {
                  "type": "string",
                  "enum": [
                    "yes",
                    "no"
                  ]
                },
                "compress_method": {
                  "$ref": "#/definitions/CompressMethod"
                },
                "enc": {
                  "type": "string",
                  "enum": [
                    "yes",
                    "no"
                  ]
                },
                "file": {
                  "description": "json-encoded file or zip (depending on compress_method)",
                  "type": "string"
                },
                "internalID": {
                  "type": "string"
                },
                "metadata": {
                  "$ref": "#/definitions/Metadata"
                },
                "name": {
                  "description": "name of the file if compress_method is file",
                  "type": "string"
                },
                "path": {
                  "type": "string"
                },
                "project": {
                  "type": "string"
                },
                "push_method": {
                  "$ref": "#/definitions/PushMethod"
                },
                "zone": {
                  "type": "string"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "dataset modified",
            "schema": {
              "$ref": "#/definitions/ItemCreatedResponse"
            }
          },
          "201": {
            "description": "dataset created",
            "schema": {
              "$ref": "#/definitions/ItemCreatedResponse"
            }
          },
          "400": {
            "description": "invalid input, object invalid",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "User not authorized to perform action",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "502": {
            "description": "Bad Gateway",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "503": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      },
      "delete": {
        "description": "Deletes a dataset by internalID (or subdataset by path). Since this is\na synchronous operation, it can only be used in small datasets to avoid \nan HTTP timeout. Use the staging / delete endpoint for large datasets.\n",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "dataSetManagement"
        ],
        "summary": "Delete Dataset",
        "operationId": "DeleteDataset",
        "parameters": [
          {
            "description": "parameter",
            "name": "json",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "required": [
                "internalID",
                "access",
                "project"
              ],
              "properties": {
                "access": {
                  "$ref": "#/definitions/AccessMode"
                },
                "internalID": {
                  "type": "string"
                },
                "path": {
                  "type": "string"
                },
                "project": {
                  "type": "string"
                },
                "zone": {
                  "type": "string"
                }
              }
            }
          }
        ],
        "responses": {
          "201": {
            "description": "The delete request was enqueued. StagingAPI and requestID can be concatenated to obtain a query URL about this request.",
            "schema": {
              "type": "object",
              "properties": {
                "internalID": {
                  "type": "string"
                },
                "request_id": {
                  "type": "string"
                },
                "stagingAPI": {
                  "type": "string"
                }
              }
            }
          },
          "204": {
            "description": "Dataset does not exist"
          },
          "400": {
            "description": "Malformed Request",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "Internal error processing request",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "502": {
            "description": "Bad Gateway",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "503": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/dataset/checkpermission": {
      "post": {
        "description": "Check if a user has permission to access a DDI location for writing",
        "consumes": [
          "application/json"
        ],
        "tags": [
          "dataSetManagement"
        ],
        "summary": "Check if a user has permission to access a DDI location for writing",
        "operationId": "CheckPermission",
        "parameters": [
          {
            "name": "Access",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "required": [
                "access",
                "project"
              ],
              "properties": {
                "access": {
                  "$ref": "#/definitions/AccessMode"
                },
                "project": {
                  "type": "string",
                  "example": "wp6"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "User has permission to write",
            "schema": {
              "type": "object",
              "required": [
                "status"
              ],
              "properties": {
                "status": {
                  "type": "string",
                  "pattern": "200",
                  "example": "200"
                }
              }
            }
          },
          "400": {
            "description": "Malformed request",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "Authorization failed",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "User does not have permission",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "502": {
            "description": "Bad Gateway",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "503": {
            "description": "Error accessing backend service",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/dataset/download": {
      "post": {
        "description": "Downloads a dataset",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/octet-stream"
        ],
        "tags": [
          "dataSetManagement"
        ],
        "summary": "DownloadDataset",
        "operationId": "DownloadDataset",
        "parameters": [
          {
            "description": "parameters",
            "name": "json",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "required": [
                "internalID",
                "access",
                "project"
              ],
              "properties": {
                "access": {
                  "$ref": "#/definitions/AccessMode"
                },
                "archivetype": {
                  "$ref": "#/definitions/ArchiveType"
                },
                "internalID": {
                  "type": "string"
                },
                "path": {
                  "type": "string"
                },
                "project": {
                  "type": "string"
                },
                "push_method": {
                  "type": "string",
                  "enum": [
                    "directupload"
                  ]
                },
                "zone": {
                  "type": "string"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "zip containing dataset",
            "schema": {
              "type": "file"
            }
          },
          "400": {
            "description": "Malformed Request",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "Internal error processing request",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "502": {
            "description": "Bad Gateway",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "503": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/dataset/listing": {
      "post": {
        "description": "List file contents of a dataset.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "dataSetManagement"
        ],
        "summary": "List file contents of a dataset.",
        "operationId": "Listing",
        "parameters": [
          {
            "description": "parameter",
            "name": "json",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "required": [
                "internalID",
                "access",
                "project"
              ],
              "properties": {
                "access": {
                  "$ref": "#/definitions/AccessMode"
                },
                "internalID": {
                  "type": "string"
                },
                "path": {
                  "type": "string",
                  "default": ""
                },
                "project": {
                  "type": "string"
                },
                "recursive": {
                  "type": "boolean",
                  "default": true
                },
                "zone": {
                  "type": "string"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Content of the dataset",
            "schema": {
              "$ref": "#/definitions/DatasetContent"
            }
          },
          "400": {
            "description": "Malformed request",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "Authorization failed",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "User does not have permission",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "502": {
            "description": "Bad Gateway",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "503": {
            "description": "Error accessing backend service",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/dataset/search/metadata": {
      "post": {
        "description": "Search for datasets based on metadata",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "dataSetManagement"
        ],
        "summary": "Search for datasets based on metadata",
        "operationId": "QueryDatasets",
        "parameters": [
          {
            "description": "metadata relating to dataset which is being searched for",
            "name": "metadataQuery",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/MetadataQuery"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Metadata for matching datasets returned",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/MetadataQueryResponse"
              }
            }
          },
          "400": {
            "description": "Malformed request",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "Authorization failed",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "Internal error processing request",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "502": {
            "description": "Bad Gateway",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "503": {
            "description": "unexpected error connecting to further backends",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      },
      "delete": {
        "description": "Search for datasets based on metadata, and delete them",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "dataSetManagement"
        ],
        "summary": "Search for datasets based on metadata, and delete them",
        "operationId": "DeleteDatasetByMetadata",
        "parameters": [
          {
            "description": "metadata relating to dataset which is being searched for",
            "name": "metadataQuery",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/MetadataQuery"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "datasets were deleted"
          },
          "400": {
            "description": "malformed request",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "Authorization failed",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "The user does not have permission to remove dataset",
            "schema": {
              "type": "object",
              "required": [
                "errorString"
              ],
              "properties": {
                "errorString": {
                  "type": "string"
                },
                "permission_error": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "required": [
                      "internalID"
                    ],
                    "properties": {
                      "internalID": {
                        "type": "string"
                      }
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal error processing request",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "502": {
            "description": "Bad Gateway",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "503": {
            "description": "unexpected error connecting to further backends",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/dataset/upload/": {
      "post": {
        "description": "Endpoint for the Creation extension",
        "tags": [
          "dataSetManagement"
        ],
        "summary": "An empty POST request is used to create a new upload resource. The Upload-Length header indicates the size of the entire upload in bytes.",
        "parameters": [
          {
            "type": "integer",
            "description": "Must be 0 for creation extension. May be a positive number for creation-with-upload extension.",
            "name": "Content-Length",
            "in": "header"
          },
          {
            "type": "integer",
            "description": "The Upload-Length request and response header indicates the size of the entire upload in bytes. The value MUST be a non-negative integer. In the concatenation extension, the Client MUST NOT include the Upload-Length header in the final upload creation",
            "name": "Upload-Length",
            "in": "header"
          },
          {
            "type": "string",
            "description": "Added by the Creation extension. The Upload-Metadata request and response header MUST consist of one or more comma-separated key-value pairs. The key and value MUST be separated by a space. The key MUST NOT contain spaces and commas and MUST NOT be empty. The key SHOULD be ASCII encoded and the value MUST be Base64 encoded. All keys MUST be unique. The value MAY be empty. In these cases, the space, which would normally separate the key and the value, MAY be left out. Since metadata can contain arbitrary binary values, Servers SHOULD carefully validate metadata values or sanitize them before using them as header values to avoid header smuggling.",
            "name": "Upload-Metadata",
            "in": "header"
          },
          {
            "type": "string",
            "description": "Added by the Concatenation extension. The Upload-Concat request and response header MUST be set in both partial and final upload creation requests. It indicates whether the upload is either a partial or final upload. If the upload is a partial one, the header value MUST be partial. In the case of a final upload, its value MUST be final followed by a semicolon and a space-separated list of partial upload URLs that will be concatenated. The partial uploads URLs MAY be absolute or relative and MUST NOT contain spaces as defined in RFC 3986.",
            "name": "Upload-Concat",
            "in": "header"
          },
          {
            "enum": [
              1
            ],
            "type": "integer",
            "description": "Added by the creation-defer-length extension. The Upload-Defer-Length request and response header indicates that the size of the upload is not known currently and will be transferred later. Its value MUST be 1. If the length of an upload is not deferred, this header MUST be omitted.",
            "name": "Upload-Defer-Length",
            "in": "header"
          },
          {
            "type": "integer",
            "name": "Upload-offset",
            "in": "header"
          },
          {
            "type": "string",
            "description": "Added by the checksum extension. The Upload-Checksum request header contains information about the checksum of the current body payload. The header MUST consist of the name of the used checksum algorithm and the Base64 encoded checksum separated by a space.",
            "name": "Upload-Checksum",
            "in": "header"
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "headers": {
              "Location": {
                "type": "string",
                "description": "Url of the created resource."
              },
              "Tus-Resumable": {
                "enum": [
                  "1.0.0"
                ],
                "type": "string"
              },
              "Upload-Expires": {
                "type": "string",
                "description": "Added by the Creation With Upload Extension in combination with the expiration extension. The Upload-Expires response header indicates the time after which the unfinished upload expires. A Server MAY wish to remove incomplete uploads after a given period of time to prevent abandoned uploads from taking up extra storage. The Client SHOULD use this header to determine if an upload is still valid before attempting to resume the upload. This header MUST be included in every PATCH response if the upload is going to expire. If the expiration is known at the creation, the Upload-Expires header MUST be included in the response to the initial POST request. Its value MAY change over time. If a Client does attempt to resume an upload which has since been removed by the Server, the Server SHOULD respond with the 404 Not Found or 410 Gone status. The latter one SHOULD be used if the Server is keeping track of expired uploads. In both cases the Client SHOULD start a new upload. The value of the Upload-Expires header MUST be in RFC 7231 datetime format."
              },
              "Upload-Offset": {
                "type": "integer",
                "description": "Added by the Creation With Upload Extension. The Upload-Offset request and response header indicates a byte offset within a resource. The value MUST be a non-negative integer."
              }
            }
          },
          "400": {
            "description": "Added by the Creation With Upload Extension in combination with the checksum extension. The checksum algorithm is not supported by the server",
            "headers": {
              "Tus-Resumable": {
                "enum": [
                  "1.0.0"
                ],
                "type": "string",
                "description": "Protocol version"
              }
            }
          },
          "401": {
            "description": "Authorization failed",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "412": {
            "description": "Precondition Failed",
            "headers": {
              "Tus-Resumable": {
                "enum": [
                  "1.0.0"
                ],
                "type": "string"
              },
              "Tus-Version": {
                "type": "string",
                "description": "The Tus-Version response header MUST be a comma-separated list of protocol versions supported by the Server. The list MUST be sorted by Server's preference where the first one is the most preferred one."
              }
            }
          },
          "413": {
            "description": "If the length of the upload exceeds the maximum, which MAY be specified using the Tus-Max-Size header, the Server MUST respond with the 413 Request Entity Too Large status.",
            "headers": {
              "Tus-Resumable": {
                "enum": [
                  "1.0.0"
                ],
                "type": "string"
              }
            }
          },
          "415": {
            "description": "Added by the Creation With Upload Extension. Content-Type was not application/offset+octet-stream",
            "headers": {
              "Tus-Resumable": {
                "enum": [
                  "1.0.0"
                ],
                "type": "string",
                "description": "Protocol version"
              }
            }
          },
          "460": {
            "description": "Added by the Creation With Upload Extension in combination with the checksum extension. Checksums mismatch",
            "headers": {
              "Tus-Resumable": {
                "enum": [
                  "1.0.0"
                ],
                "type": "string",
                "description": "Protocol version"
              }
            }
          },
          "503": {
            "description": "Service Unavailable",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      },
      "options": {
        "description": "An OPTIONS request MAY be used to gather information about the Server's current configuration. A successful response indicated by the 204 No Content or 200 OK status MUST contain the Tus-Version header. It MAY include the Tus-Extension and Tus-Max-Size headers.",
        "tags": [
          "dataSetManagement"
        ],
        "summary": "Request to gather information about the Server's current configuration",
        "responses": {
          "200": {
            "description": "Success",
            "headers": {
              "Tus-Checksum-Algorithm": {
                "type": "string",
                "description": "Added by the checksum extension. The Tus-Checksum-Algorithm response header MUST be a comma-separated list of the checksum algorithms supported by the server."
              },
              "Tus-Extension": {
                "type": "string",
                "description": "The Tus-Extension response header MUST be a comma-separated list of the extensions supported by the Server. If no extensions are supported, the Tus-Extension header MUST be omitted."
              },
              "Tus-Max-Size": {
                "type": "integer",
                "description": "The Tus-Max-Size response header MUST be a non-negative integer indicating the maximum allowed size of an entire upload in bytes. The Server SHOULD set this header if there is a known hard limit."
              },
              "Tus-Resumable": {
                "enum": [
                  "1.0.0"
                ],
                "type": "string",
                "description": "Protocol version"
              },
              "Tus-Version": {
                "type": "string",
                "description": "The Tus-Version response header MUST be a comma-separated list of protocol versions supported by the Server. The list MUST be sorted by Server's preference where the first one is the most preferred one."
              }
            }
          },
          "204": {
            "description": "Success",
            "headers": {
              "Tus-Checksum-Algorithm": {
                "type": "string",
                "description": "Added by the checksum extension. The Tus-Checksum-Algorithm response header MUST be a comma-separated list of the checksum algorithms supported by the server."
              },
              "Tus-Extension": {
                "type": "string",
                "description": "The Tus-Extension response header MUST be a comma-separated list of the extensions supported by the Server. If no extensions are supported, the Tus-Extension header MUST be omitted."
              },
              "Tus-Max-Size": {
                "type": "integer",
                "description": "The Tus-Max-Size response header MUST be a non-negative integer indicating the maximum allowed size of an entire upload in bytes. The Server SHOULD set this header if there is a known hard limit."
              },
              "Tus-Resumable": {
                "enum": [
                  "1.0.0"
                ],
                "type": "string"
              },
              "Tus-Version": {
                "type": "string",
                "description": "The Tus-Version response header MUST be a comma-separated list of protocol versions supported by the Server. The list MUST be sorted by Server's preference where the first one is the most preferred one."
              }
            }
          },
          "401": {
            "description": "Authorization failed",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "503": {
            "description": "Service Unavailable",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      },
      "parameters": [
        {
          "enum": [
            "1.0.0"
          ],
          "type": "string",
          "description": "Protocol version",
          "name": "Tus-Resumable",
          "in": "header",
          "required": true
        }
      ]
    },
    "/dataset/upload/{id}": {
      "delete": {
        "description": "When receiving a DELETE request for an existing upload the Server SHOULD free associated resources and MUST respond with the 204 No Content status confirming that the upload was terminated. For all future requests to this URL, the Server SHOULD respond with the 404 Not Found or 410 Gone status.",
        "tags": [
          "dataSetManagement"
        ],
        "summary": "Added by the Termination extension.",
        "operationId": "FilesDelete",
        "responses": {
          "204": {
            "description": "Upload was terminated",
            "headers": {
              "Tus-Resumable": {
                "enum": [
                  "1.0.0"
                ],
                "type": "string",
                "description": "Protocol version"
              }
            }
          },
          "401": {
            "description": "Authorization failed",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "412": {
            "description": "Precondition Failed",
            "headers": {
              "Tus-Resumable": {
                "enum": [
                  "1.0.0"
                ],
                "type": "string",
                "description": "Protocol version"
              },
              "Tus-Version": {
                "type": "string",
                "description": "The Tus-Version response header MUST be a comma-separated list of protocol versions supported by the Server. The list MUST be sorted by Server's preference where the first one is the most preferred one."
              }
            }
          },
          "503": {
            "description": "Service Unavailable",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      },
      "head": {
        "description": "Used to determine the offset at which the upload should be continued.",
        "tags": [
          "dataSetManagement"
        ],
        "summary": "Used to determine the offset at which the upload should be continued.",
        "operationId": "FilesHead",
        "responses": {
          "200": {
            "description": "Returns offset",
            "headers": {
              "Cache-Control": {
                "enum": [
                  "no-store"
                ],
                "type": "string"
              },
              "Tus-Resumable": {
                "enum": [
                  "1.0.0"
                ],
                "type": "string",
                "description": "Protocol version"
              },
              "Upload-Length": {
                "type": "integer",
                "description": "If the size of the upload is known, the Server MUST include the Upload-Length header in the response."
              },
              "Upload-Offset": {
                "type": "integer",
                "description": "The Upload-Offset request and response header indicates a byte offset within a resource. The value MUST be a non-negative integer. Offset at which the upload should be continued."
              }
            }
          },
          "401": {
            "description": "Authorization failed",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "If the resource is not found, the Server SHOULD return either the 404 Not Found, 410 Gone or 403 Forbidden status without the Upload-Offset header.",
            "headers": {
              "Tus-Resumable": {
                "enum": [
                  "1.0.0"
                ],
                "type": "string",
                "description": "Protocol version"
              }
            }
          },
          "404": {
            "description": "If the resource is not found, the Server SHOULD return either the 404 Not Found, 410 Gone or 403 Forbidden status without the Upload-Offset header.",
            "headers": {
              "Tus-Resumable": {
                "enum": [
                  "1.0.0"
                ],
                "type": "string",
                "description": "Protocol version"
              }
            }
          },
          "410": {
            "description": "If the resource is not found, the Server SHOULD return either the 404 Not Found, 410 Gone or 403 Forbidden status without the Upload-Offset header.",
            "headers": {
              "Tus-Resumable": {
                "enum": [
                  "1.0.0"
                ],
                "type": "string",
                "description": "Protocol version"
              }
            }
          },
          "412": {
            "description": "Precondition Failed",
            "headers": {
              "Tus-Resumable": {
                "enum": [
                  "1.0.0"
                ],
                "type": "string",
                "description": "Protocol version"
              },
              "Tus-Version": {
                "type": "string",
                "description": "The Tus-Version response header MUST be a comma-separated list of protocol versions supported by the Server. The list MUST be sorted by Server's preference where the first one is the most preferred one."
              }
            }
          },
          "503": {
            "description": "Service Unavailable",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      },
      "patch": {
        "description": "The Server SHOULD accept PATCH requests against any upload URL and apply the bytes contained in the message at the given offset specified by the Upload-Offset header. All PATCH requests MUST use Content-Type: application/offset+octet-stream, otherwise the server SHOULD return a 415 Unsupported Media Type status.",
        "consumes": [
          "application/offset+octet-stream"
        ],
        "tags": [
          "dataSetManagement"
        ],
        "summary": "Used to resume the upload",
        "operationId": "FilePatch",
        "parameters": [
          {
            "name": "Body",
            "in": "body",
            "schema": {
              "type": "string"
            }
          },
          {
            "type": "integer",
            "name": "Content-Length",
            "in": "header",
            "required": true
          },
          {
            "type": "integer",
            "description": "The Upload-Offset request and response header indicates a byte offset within a resource. The value MUST be a non-negative integer.",
            "name": "Upload-offset",
            "in": "header",
            "required": true
          },
          {
            "type": "string",
            "description": "Added by the checksum extension. The Upload-Checksum request header contains information about the checksum of the current body payload. The header MUST consist of the name of the used checksum algorithm and the Base64 encoded checksum separated by a space.",
            "name": "Upload-Checksum",
            "in": "header"
          }
        ],
        "responses": {
          "204": {
            "description": "Upload offset was updated",
            "headers": {
              "Tus-Resumable": {
                "enum": [
                  "1.0.0"
                ],
                "type": "string",
                "description": "Protocol version"
              },
              "Upload-Expires": {
                "type": "string",
                "description": "Added by the expiration extension. The Upload-Expires response header indicates the time after which the unfinished upload expires. A Server MAY wish to remove incomplete uploads after a given period of time to prevent abandoned uploads from taking up extra storage. The Client SHOULD use this header to determine if an upload is still valid before attempting to resume the upload. This header MUST be included in every PATCH response if the upload is going to expire. If the expiration is known at the creation, the Upload-Expires header MUST be included in the response to the initial POST request. Its value MAY change over time. If a Client does attempt to resume an upload which has since been removed by the Server, the Server SHOULD respond with the 404 Not Found or 410 Gone status. The latter one SHOULD be used if the Server is keeping track of expired uploads. In both cases the Client SHOULD start a new upload. The value of the Upload-Expires header MUST be in RFC 7231 datetime format."
              },
              "Upload-Offset": {
                "type": "integer",
                "description": "The Upload-Offset request and response header indicates a byte offset within a resource. The value MUST be a non-negative integer."
              }
            }
          },
          "400": {
            "description": "Added by the checksum extension. The checksum algorithm is not supported by the server",
            "headers": {
              "Tus-Resumable": {
                "enum": [
                  "1.0.0"
                ],
                "type": "string",
                "description": "Protocol version"
              }
            }
          },
          "401": {
            "description": "Authorization failed",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "In the concatenation extension, the Server MUST respond with the 403 Forbidden status to PATCH requests against a final upload URL and MUST NOT modify the final or its partial uploads.",
            "headers": {
              "Tus-Resumable": {
                "enum": [
                  "1.0.0"
                ],
                "type": "string",
                "description": "Protocol version"
              }
            }
          },
          "404": {
            "description": "PATCH request against a non-existent resource",
            "headers": {
              "Tus-Resumable": {
                "enum": [
                  "1.0.0"
                ],
                "type": "string",
                "description": "Protocol version"
              }
            }
          },
          "410": {
            "description": "PATCH request against a non-existent resource",
            "headers": {
              "Tus-Resumable": {
                "enum": [
                  "1.0.0"
                ],
                "type": "string",
                "description": "Protocol version"
              }
            }
          },
          "412": {
            "description": "Precondition Failed",
            "headers": {
              "Tus-Resumable": {
                "enum": [
                  "1.0.0"
                ],
                "type": "string",
                "description": "Protocol version"
              },
              "Tus-Version": {
                "type": "string",
                "description": "The Tus-Version response header MUST be a comma-separated list of protocol versions supported by the Server. The list MUST be sorted by Server's preference where the first one is the most preferred one."
              }
            }
          },
          "415": {
            "description": "Content-Type was not application/offset+octet-stream",
            "headers": {
              "Tus-Resumable": {
                "enum": [
                  "1.0.0"
                ],
                "type": "string",
                "description": "Protocol version"
              }
            }
          },
          "460": {
            "description": "Added by the checksum extension. Checksums mismatch",
            "headers": {
              "Tus-Resumable": {
                "enum": [
                  "1.0.0"
                ],
                "type": "string",
                "description": "Protocol version"
              }
            }
          },
          "503": {
            "description": "Service Unavailable",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "id",
          "in": "path",
          "required": true
        },
        {
          "enum": [
            "1.0.0"
          ],
          "type": "string",
          "description": "Protocol version",
          "name": "Tus-Resumable",
          "in": "header",
          "required": true
        }
      ]
    },
    "/encryption/compress": {
      "post": {
        "description": "Compress a dataset or subdataset (by enqueuing the request for latter processing)",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "dataSetManagement"
        ],
        "summary": "Compress a dataset or subdataset (by enqueuing the request for latter processing)",
        "operationId": "Compress",
        "parameters": [
          {
            "description": "parameters",
            "name": "parameters",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "required": [
                "source_system",
                "source_path"
              ],
              "properties": {
                "source_path": {
                  "type": "string"
                },
                "source_system": {
                  "type": "string"
                }
              }
            }
          }
        ],
        "responses": {
          "201": {
            "description": "The response code means that the compression has been initiated. Status of the operation can be checked by querying the status.",
            "schema": {
              "$ref": "#/definitions/RequestID"
            }
          },
          "400": {
            "description": "This means that there's something wrong in the input parameters and the server couldn't understand the request.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "This means that the user is not authenticated with keycloak and compression can't be triggered unless the user first log in with a valid user",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "This means that the resource the user is trying to compress is not readable. User doesn't have the correct rights to read the source file.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "This means that the source path on the system doesn't exist.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "414": {
            "description": "This means that the either the source path is longer than the server is willing to interpret.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "429": {
            "description": "This means that the user has sent too many requests in a given amount of time. The user is advised to wait and send the request again.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "This means that something has gone wrong on the burst buffer. The user is advised to wait and send the request again.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/encryption/compress/{request_id}": {
      "get": {
        "security": [],
        "description": "Check the status of a compression",
        "produces": [
          "application/json"
        ],
        "tags": [
          "dataSetManagement"
        ],
        "summary": "Check the status of a compression",
        "operationId": "CheckCompressionStatus",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "name": "request_id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "This means that the status has been returned to the user in the response body.",
            "schema": {
              "type": "object",
              "required": [
                "status"
              ],
              "properties": {
                "status": {
                  "type": "string"
                },
                "target_path": {
                  "description": "Single path for encryption endpoints",
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "This means that the request ID given by the user is incorrect.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "This means that the user is not authenticated with keycloak and compression can't be triggered unless the user first log in with a valid user",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "This means that the ID doesn't exist and thus a status can't be returned.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "414": {
            "description": "This means that the the request ID is longer than the server is willing to interpret.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "This means that something has gone wrong on the burst buffer. The user is advised to wait and send the request again.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/encryption/compress_encrypt": {
      "post": {
        "description": "Compress and encrypt a dataset or subdataset (by enqueuing the request for latter processing)",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "dataSetManagement"
        ],
        "summary": "Compress and encrypt a dataset or subdataset (by enqueuing the request for latter processing)",
        "operationId": "CompressEncrypt",
        "parameters": [
          {
            "description": "parameters",
            "name": "parameters",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "required": [
                "source_system",
                "source_path",
                "project"
              ],
              "properties": {
                "project": {
                  "type": "string"
                },
                "source_path": {
                  "type": "string"
                },
                "source_system": {
                  "type": "string"
                }
              }
            }
          }
        ],
        "responses": {
          "201": {
            "description": "The response code means that the compression and encryption has been initiated. Status of the operation can be checked by querying the status.",
            "schema": {
              "$ref": "#/definitions/RequestID"
            }
          },
          "400": {
            "description": "This means that there's something wrong in the input parameters and the server couldn't understand the request.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "This means that the user is not authenticated with keycloak and compression with encryption can't be triggered unless the user first log in with a valid user",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "This means that the resource the user is trying to compress and encrypt is not readable by the user. User doesn't have the correct rights to read the source file.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "This means that either the source path on the system doesn't exist.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "414": {
            "description": "This means that the source path is longer than the server is willing to interpret.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "429": {
            "description": "This means that the user has sent too many requests in a given amount of time. The user is advised to wait and send the request again.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "This means that something has gone wrong on the burst buffer. The user is advised to wait and send the request again.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/encryption/compress_encrypt/{request_id}": {
      "get": {
        "security": [],
        "description": "Check the status of compression with encryption",
        "produces": [
          "application/json"
        ],
        "tags": [
          "dataSetManagement"
        ],
        "summary": "Check the status of compression with encryption",
        "operationId": "CheckCompressionEncryptionStatus",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "name": "request_id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "This means that the status has been returned to the user in the response body.",
            "schema": {
              "type": "object",
              "required": [
                "status"
              ],
              "properties": {
                "status": {
                  "type": "string"
                },
                "target_path": {
                  "description": "Single path for encryption endpoints",
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "This means that the request ID given by the user is incorrect.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "This means that the user is not authenticated with keycloak and compression with encryption can't be triggered unless the user first log in with a valid user",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "This means that the ID doesn't exist and thus a status can't be returned.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "414": {
            "description": "This means that the the request ID is longer than the server is willing to interpret.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "This means that something has gone wrong on the burst buffer. The user is advised to wait and send the request again.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/encryption/decompress": {
      "post": {
        "description": "Decompress a dataset or subdataset (by enqueuing the request for latter processing)",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "dataSetManagement"
        ],
        "summary": "Decompress a dataset or subdataset (by enqueuing the request for latter processing)",
        "operationId": "Decompress",
        "parameters": [
          {
            "description": "parameters",
            "name": "parameters",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "required": [
                "source_system",
                "source_path"
              ],
              "properties": {
                "source_path": {
                  "type": "string"
                },
                "source_system": {
                  "type": "string"
                }
              }
            }
          }
        ],
        "responses": {
          "201": {
            "description": "The response code means that the decompression has been initiated. Status of the operation can be checked by querying the status.",
            "schema": {
              "$ref": "#/definitions/RequestID"
            }
          },
          "400": {
            "description": "This means that there's something wrong in the input parameters and the server couldn't understand the request.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "This means that the user is not authenticated with keycloak and decompression can't be triggered unless the user first log in with a valid user",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "This means that the resource the user is trying to compress is not readable by the user. User doesn't have the correct rights to read the source file.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "This means that either the source path on the system doesn't exist.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "414": {
            "description": "This means that the either the source path is longer than the server is willing to interpret.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "429": {
            "description": "This means that the user has sent too many requests in a given amount of time. The user is advised to wait and send the request again.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "This means that something has gone wrong on the burst buffer. The user is advised to wait and send the request again.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/encryption/decompress/{request_id}": {
      "get": {
        "security": [],
        "description": "Check the status of a decompression",
        "produces": [
          "application/json"
        ],
        "tags": [
          "dataSetManagement"
        ],
        "summary": "Check the status of a decompression",
        "operationId": "CheckDecompressionStatus",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "name": "request_id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "This means that the status has been returned to the user in the response body.",
            "schema": {
              "type": "object",
              "required": [
                "status"
              ],
              "properties": {
                "status": {
                  "type": "string"
                },
                "target_path": {
                  "description": "Single path for encryption endpoints",
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "This means that the request ID given by the user is incorrect.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "This means that the user is not authenticated with keycloak and decompression can't be triggered unless the user first log in with a valid user",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "This means that the ID doesn't exist and thus a status can't be returned.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "414": {
            "description": "This means that the the request ID is longer than the server is willing to interpret.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "This means that something has gone wrong on the burst buffer. The user is advised to wait and send the request again.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/encryption/decrypt": {
      "post": {
        "description": "Decrypt a dataset or subdataset (by enqueuing the request for latter processing)",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "dataSetManagement"
        ],
        "summary": "Decrypt a dataset or subdataset (by enqueuing the request for latter processing)",
        "operationId": "Decrypt",
        "parameters": [
          {
            "description": "parameters",
            "name": "parameters",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "required": [
                "source_system",
                "source_path",
                "project"
              ],
              "properties": {
                "project": {
                  "type": "string"
                },
                "source_path": {
                  "type": "string"
                },
                "source_system": {
                  "type": "string"
                }
              }
            }
          }
        ],
        "responses": {
          "201": {
            "description": "The response code means that the decryption has been initiated. Status of the operation can be checked by querying the status.",
            "schema": {
              "$ref": "#/definitions/RequestID"
            }
          },
          "400": {
            "description": "This means that there's something wrong in the input parameters and the server couldn't understand the request.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "This means that the user is not authenticated with keycloak and decryption can't be triggered unless the user first log in with a valid user",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "This means that the resource the user is trying to decrypt from or to is not readable. User doesn't have the correct rights to read the source file.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "This means that the source path on the system doesn't exist.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "414": {
            "description": "This means that the either the source path is longer than the server is willing to interpret.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "429": {
            "description": "This means that the user has sent too many requests in a given amount of time. The user is advised to wait and send the request again.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "This means that something has gone wrong on the burst buffer. The user is advised to wait and send the request again.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/encryption/decrypt/{request_id}": {
      "get": {
        "security": [],
        "description": "Check the status of a decryption",
        "produces": [
          "application/json"
        ],
        "tags": [
          "dataSetManagement"
        ],
        "summary": "Check the status of a decryption",
        "operationId": "CheckDecryptionStatus",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "name": "request_id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "This means that the status has been returned to the user in the response body.",
            "schema": {
              "type": "object",
              "required": [
                "status"
              ],
              "properties": {
                "status": {
                  "type": "string"
                },
                "target_path": {
                  "description": "Single path for encryption endpoints",
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "This means that the request ID given by the user is incorrect.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "This means that the user is not authenticated with keycloak and decryption can't be triggered unless the user first log in with a valid user",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "This means that the ID doesn't exist and thus a status can't be returned.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "414": {
            "description": "This means that the the request ID is longer than the server is willing to interpret.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "This means that something has gone wrong on the burst buffer. The user is advised to wait and send the request again.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/encryption/decrypt_decompress": {
      "post": {
        "description": "Decrypt and decompress a dataset or subdataset (by enqueuing the request for latter processing)",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "dataSetManagement"
        ],
        "summary": "Decrypt and decompress a dataset or subdataset (by enqueuing the request for latter processing)",
        "operationId": "DecryptDecompress",
        "parameters": [
          {
            "description": "parameters",
            "name": "parameters",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "required": [
                "source_system",
                "source_path",
                "project"
              ],
              "properties": {
                "project": {
                  "type": "string"
                },
                "source_path": {
                  "type": "string"
                },
                "source_system": {
                  "type": "string"
                }
              }
            }
          }
        ],
        "responses": {
          "201": {
            "description": "The response code means that the decryption and decompression has been initiated. Status of the operation can be checked by querying the status.",
            "schema": {
              "$ref": "#/definitions/RequestID"
            }
          },
          "400": {
            "description": "This means that there's something wrong in the input parameters and the server couldn't understand the request.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "This means that the user is not authenticated with keycloak decryption with decompression can't be triggered unless the user first log in with a valid user",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "This means that the resource the user is trying to decrypt and decompress from or to is not readable or writable by the user. User doesn't have the correct rights to read the source file.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "This means that either the source path on the system doesn't exist.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "414": {
            "description": "This means that the either the source path is longer than the server is willing to interpret.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "429": {
            "description": "This means that the user has sent too many requests in a given amount of time. The user is advised to wait and send the request again.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "This means that something has gone wrong on the burst buffer. The user is advised to wait and send the request again.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/encryption/decrypt_decompress/{request_id}": {
      "get": {
        "security": [],
        "description": "Check the status of decryption with decompression",
        "produces": [
          "application/json"
        ],
        "tags": [
          "dataSetManagement"
        ],
        "summary": "Check the status of decryption with decompression",
        "operationId": "CheckDecryptionDecompressionStatus",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "name": "request_id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "This means that the status has been returned to the user in the response body.",
            "schema": {
              "type": "object",
              "required": [
                "status"
              ],
              "properties": {
                "status": {
                  "type": "string"
                },
                "target_path": {
                  "description": "Single path for encryption endpoints",
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "This means that the request ID given by the user is incorrect.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "This means that the user is not authenticated with keycloak and decryption with decompression can't be triggered unless the user first log in with a valid user",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "This means that the ID doesn't exist and thus a status can't be returned.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "414": {
            "description": "This means that the the request ID is longer than the server is willing to interpret.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "This means that something has gone wrong on the burst buffer. The user is advised to wait and send the request again.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/encryption/encrypt": {
      "post": {
        "description": "Encrypt a dataset or subdataset (by enqueuing the request for latter processing)",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "dataSetManagement"
        ],
        "summary": "Encrypt a dataset or subdataset (by enqueuing the request for latter processing)",
        "operationId": "Encrypt",
        "parameters": [
          {
            "description": "parameters",
            "name": "parameters",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "required": [
                "source_system",
                "source_path",
                "project"
              ],
              "properties": {
                "project": {
                  "type": "string"
                },
                "source_path": {
                  "type": "string"
                },
                "source_system": {
                  "type": "string"
                }
              }
            }
          }
        ],
        "responses": {
          "201": {
            "description": "The response code means that the encryption has been initiated. Status of the operation can be checked by querying the status.",
            "schema": {
              "$ref": "#/definitions/RequestID"
            }
          },
          "400": {
            "description": "This means that there's something wrong in the input parameters and the server couldn't understand the request.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "This means that the user is not authenticated with keycloak and encryption can't be triggered unless the user first log in with a valid user",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "This means that the resource the user is trying to encrypt from or to is not readable. User doesn't have the correct rights to read the source file.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "This means that the source path on the system doesn't exist.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "414": {
            "description": "This means that the source path is longer than the server is willing to interpret.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "429": {
            "description": "This means that the user has sent too many requests in a given amount of time. The user is advised to wait and send the request again.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "This means that something has gone wrong on the burst buffer. The user is advised to wait and send the request again.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/encryption/encrypt/{request_id}": {
      "get": {
        "security": [],
        "description": "Check the status of a encryption",
        "produces": [
          "application/json"
        ],
        "tags": [
          "dataSetManagement"
        ],
        "summary": "Check the status of a encryption",
        "operationId": "CheckEncryptionStatus",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "name": "request_id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "This means that the status has been returned to the user in the response body.",
            "schema": {
              "type": "object",
              "required": [
                "status"
              ],
              "properties": {
                "status": {
                  "type": "string"
                },
                "target_path": {
                  "description": "Single path for encryption endpoints",
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "This means that the request ID given by the user is incorrect.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "This means that the user is not authenticated with keycloak and encryption can't be triggered unless the user first log in with a valid user",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "This means that the ID doesn't exist and thus a status can't be returned.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "414": {
            "description": "This means that the the request ID is longer than the server is willing to interpret.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "This means that something has gone wrong on the burst buffer. The user is advised to wait and send the request again.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/gridftp/gridmap": {
      "post": {
        "description": "Add a DN entry to the DDI B2STAGE GridFTP service",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "dataSetManagement",
          "gridftp"
        ],
        "summary": "Add a DN entry to the DDI B2STAGE GridFTP service",
        "operationId": "AddGridmapEntry",
        "parameters": [
          {
            "description": "parameters",
            "name": "parameters",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "required": [
                "dn"
              ],
              "properties": {
                "dn": {
                  "type": "string"
                },
                "user": {
                  "type": "string"
                }
              }
            }
          }
        ],
        "responses": {
          "201": {
            "description": "DN added"
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "502": {
            "description": "Bad Gateway",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "503": {
            "description": "Server error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      },
      "delete": {
        "description": "Remove a DN entry to the DDI B2STAGE GridFTP service",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "dataSetManagement",
          "gridftp"
        ],
        "summary": "Remove a DN entry to the DDI B2STAGE GridFTP service",
        "operationId": "RemoveGridmapEntry",
        "parameters": [
          {
            "description": "parameters",
            "name": "parameters",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "user": {
                  "type": "string"
                }
              }
            }
          }
        ],
        "responses": {
          "204": {
            "description": "DN removed"
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "502": {
            "description": "Bad Gateway",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "503": {
            "description": "Server error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/pid/assign": {
      "post": {
        "description": "This is called when a user requests PID assignment to a dataset.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "dataSetManagement",
          "EUDATReplication"
        ],
        "summary": "This is called when a user requests PID assignment to a dataset.",
        "operationId": "PID",
        "parameters": [
          {
            "description": "parameters",
            "name": "parameters",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "required": [
                "source_system",
                "source_path"
              ],
              "properties": {
                "parent_pid": {
                  "type": "string"
                },
                "source_path": {
                  "type": "string"
                },
                "source_system": {
                  "type": "string"
                }
              }
            }
          }
        ],
        "responses": {
          "201": {
            "description": "This is called when a user requests PID assignment to a dataset.",
            "schema": {
              "$ref": "#/definitions/RequestID"
            }
          },
          "400": {
            "description": "This means that there's something wrong in the input parameters and the server couldn't understand the request.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "This means that the user is not authenticated with keycloak and data transfer can't be triggered unless the user first log in with a valid user",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "This means that the resource the user is trying to transfer from or to is not readable or writable by the user. User doesn't have the correct rights to either read the source file or write on the target system location.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "This means that either the source path or the the target path on the system doesn't exist.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "414": {
            "description": "This means that the either the source path or the target path is longer than the server is willing to interpret.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "429": {
            "description": "This means that the user has sent too many requests in a given amount of time. The user is advised to wait and send the request again.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "This means that something has gone wrong on the data transfer steering server. The user is advised to wait and send the request again.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/pid/{request_id}": {
      "get": {
        "description": "This is called when a user requests to check the status of his data replication",
        "produces": [
          "application/json"
        ],
        "tags": [
          "dataSetManagement",
          "EUDATReplication"
        ],
        "summary": "This is called when a user requests to check the status of the PID assignment",
        "operationId": "CheckPIDStatus",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "name": "request_id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "This means that the status has been returned to the user in the response body.",
            "schema": {
              "$ref": "#/definitions/DataReplication"
            }
          },
          "400": {
            "description": "This means that there's something wrong in the input parameters and the server couldn't understand the request.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "This means that the user is not authenticated with keycloak and data transfer can't be triggered unless the user first log in with a valid user",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "This means that the resource the user is trying to transfer from or to is not readable or writable by the user. User doesn't have the correct rights to either read the source file or write on the target system location.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "This means that either the source path or the the target path on the system doesn't exist.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "414": {
            "description": "This means that the either the source path or the target path is longer than the server is willing to interpret.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "429": {
            "description": "This means that the user has sent too many requests in a given amount of time. The user is advised to wait and send the request again.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "This means that something has gone wrong on the data transfer steering server. The user is advised to wait and send the request again.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/project": {
      "post": {
        "description": "Create a project in iRODS WP3 DDI",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "dataSetManagement",
          "iRODSPermissionManagement"
        ],
        "summary": "Create a project in iRODS WP3 DDI",
        "operationId": "CreateProject",
        "parameters": [
          {
            "name": "ProjectInfo",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "required": [
                "projectname"
              ],
              "properties": {
                "projectname": {
                  "description": "Project name (Keycloak group)",
                  "type": "string"
                }
              }
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Project was created"
          },
          "400": {
            "description": "Malformed request",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "Permission denied",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "409": {
            "description": "Conflict: the project already exists",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "Internal error processing request",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "502": {
            "description": "Bad Gateway",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      },
      "delete": {
        "description": "Delete a project in iRODS WP3 DDI.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "dataSetManagement"
        ],
        "summary": "Delete a project in iRODS WP3 DDI",
        "operationId": "DeleteProject",
        "parameters": [
          {
            "name": "ProjectInfo",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "required": [
                "name"
              ],
              "properties": {
                "name": {
                  "description": "Project name (Keycloak group)",
                  "type": "string"
                }
              }
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Project was deleted or does not exist"
          },
          "400": {
            "description": "Malformed request",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "Internal error processing request",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "502": {
            "description": "Bad Gateway",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/project/admin": {
      "post": {
        "description": "Add an administrator user to a project in iRODS WP3 DDI",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "dataSetManagement",
          "iRODSPermissionManagement"
        ],
        "summary": "Add an administrator user to a project in iRODS WP3 DDI",
        "operationId": "AddProjectAdmin",
        "parameters": [
          {
            "name": "ProjectAndUserInfo",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UserInProject"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Admin was added to Project"
          },
          "400": {
            "description": "Malformed request",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "409": {
            "description": "Conflict, action could not be performed",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "Internal error processing request",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "502": {
            "description": "Bad Gateway",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      },
      "delete": {
        "description": "Remove user from project in iRODS WP3 DDI",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "dataSetManagement",
          "iRODSPermissionManagement"
        ],
        "summary": "Remove user from project in iRODS WP3 DDI",
        "operationId": "DeleteProjectAdmin",
        "parameters": [
          {
            "name": "ProjectAndUserInfo",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UserInProject"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "User was deleted from admin status"
          },
          "400": {
            "description": "Malformed request",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "409": {
            "description": "Conflict, action could not be performed",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "Internal error processing request",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "502": {
            "description": "Bad Gateway",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/project/user": {
      "post": {
        "description": "Add a user to a project in iRODS WP3 DDI",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "dataSetManagement",
          "iRODSPermissionManagement"
        ],
        "summary": "Add a user to a project in iRODS WP3 DDI",
        "operationId": "AddProjectUser",
        "parameters": [
          {
            "name": "ProjectAndUserInfo",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UserInProject"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "User was added to the project",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "400": {
            "description": "Malformed request",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "409": {
            "description": "Conflict, action could not be performed",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "Internal error processing request",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "502": {
            "description": "Bad Gateway",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      },
      "delete": {
        "description": "Remove user from project in iRODS WP3 DDI",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "dataSetManagement"
        ],
        "summary": "Remove user from project in iRODS WP3 DDI",
        "operationId": "DeleteProjectUser",
        "parameters": [
          {
            "name": "ProjectAndUserInfo",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UserInProject"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "User was removed from project"
          },
          "400": {
            "description": "Malformed request",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "409": {
            "description": "Conflict, action could not be performed",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "Internal error processing request",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "502": {
            "description": "Bad Gateway",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/replicate": {
      "post": {
        "description": "This is called when a user requests data to be replicated between different systems. The request will be added to the jobs queue.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "dataSetManagement",
          "EUDATReplication"
        ],
        "summary": "This is called when a user requests data to be replicated between different systems. The request will be added to the jobs queue.",
        "operationId": "Replicate",
        "parameters": [
          {
            "description": "parameters",
            "name": "parameters",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "required": [
                "source_system",
                "source_path",
                "target_system"
              ],
              "properties": {
                "source_path": {
                  "type": "string"
                },
                "source_system": {
                  "type": "string"
                },
                "target_path": {
                  "type": "string"
                },
                "target_system": {
                  "type": "string"
                }
              }
            }
          }
        ],
        "responses": {
          "201": {
            "description": "The response code means that the data transfer has been initiated. Status of the transfer can be checked by querying the status.",
            "schema": {
              "$ref": "#/definitions/RequestID"
            }
          },
          "400": {
            "description": "This means that there's something wrong in the input parameters and the server couldn't understand the request.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "This means that the user is not authenticated with keycloak and data transfer can't be triggered unless the user first log in with a valid user",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "This means that the resource the user is trying to transfer from or to is not readable or writable by the user. User doesn't have the correct rights to either read the source file or write on the target system location.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "This means that either the source path or the the target path on the system doesn't exist.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "414": {
            "description": "This means that the either the source path or the target path is longer than the server is willing to interpret.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "429": {
            "description": "This means that the user has sent too many requests in a given amount of time. The user is advised to wait and send the request again.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "This means that something has gone wrong on the data transfer steering server. The user is advised to wait and send the request again.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/replicate/{request_id}": {
      "get": {
        "description": "This is called when a user requests to check the status of his data replication",
        "produces": [
          "application/json"
        ],
        "tags": [
          "dataSetManagement",
          "EUDATReplication"
        ],
        "summary": "This is called when a user requests to check the status of his data replication",
        "operationId": "CheckReplicateStatus",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "name": "request_id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "This means that the status has been returned to the user in the response body.",
            "schema": {
              "$ref": "#/definitions/DataReplication"
            }
          },
          "400": {
            "description": "This means that there's something wrong in the input parameters and the server couldn't understand the request.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "This means that the user is not authenticated with keycloak and data transfer can't be triggered unless the user first log in with a valid user",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "This means that the resource the user is trying to transfer from or to is not readable or writable by the user. User doesn't have the correct rights to either read the source file or write on the target system location.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "This means that either the source path or the the target path on the system doesn't exist.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "414": {
            "description": "This means that the either the source path or the target path is longer than the server is willing to interpret.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "429": {
            "description": "This means that the user has sent too many requests in a given amount of time. The user is advised to wait and send the request again.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "This means that something has gone wrong on the data transfer steering server. The user is advised to wait and send the request again.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/ssh/sshfsexport": {
      "post": {
        "description": "Export a directory of the DDI for use via SSHFS",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "dataSetManagement",
          "sshfsexport"
        ],
        "summary": "Export a directory of the DDI for use via SSHFS",
        "operationId": "CreateSSHFSExport",
        "parameters": [
          {
            "description": "parameters",
            "name": "parameters",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "required": [
                "host",
                "pubkey",
                "path"
              ],
              "properties": {
                "host": {
                  "type": "string",
                  "example": "141.40.145.102"
                },
                "path": {
                  "type": "string"
                },
                "pubkey": {
                  "type": "string"
                }
              }
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Export created",
            "schema": {
              "type": "object",
              "required": [
                "user",
                "sshfs"
              ],
              "properties": {
                "sshfs": {
                  "type": "string",
                  "example": "qlecvxbndl@lexis-test.srv.lrz.de:"
                },
                "user": {
                  "type": "string",
                  "example": "qlecvxbndl"
                }
              }
            }
          },
          "400": {
            "description": "This means that there's something wrong in the input parameters and the server couldn't understand the request.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "This means that the user is not authenticated with keycloak and data transfer can't be triggered unless the user first log in with a valid user",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "This means that the resource the user is trying to transfer from or to is not readable or writable by the user. User doesn't have the correct rights to either read the source file or write on the target system location.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "503": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      },
      "delete": {
        "description": "Remove an SSHFS export of a directory of the DDI",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "dataSetManagement",
          "sshfsexport"
        ],
        "summary": "Export a directory of the DDI for use via SSHFS",
        "operationId": "DeleteSSHFSExport",
        "parameters": [
          {
            "description": "parameters",
            "name": "parameters",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "required": [
                "user",
                "path"
              ],
              "properties": {
                "path": {
                  "type": "string"
                },
                "user": {
                  "type": "string",
                  "example": "qlecvxbndl"
                }
              }
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Export removed"
          },
          "400": {
            "description": "This means that there's something wrong in the input parameters and the server couldn't understand the request.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "This means that the user is not authenticated with keycloak and data transfer can't be triggered unless the user first log in with a valid user",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "This means that the resource the user is trying to transfer from or to is not readable or writable by the user. User doesn't have the correct rights to either read the source file or write on the target system location.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "The resource (username, path or both) does not exist",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "502": {
            "description": "Bad Gateway",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "503": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/staging/delete": {
      "delete": {
        "description": "This is called when a user request to delete data. This is only allowed on the staging systems.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "staging",
          "dataSetManagement"
        ],
        "summary": "This is called when a user request to delete data. This is only allowed on the staging systems.",
        "operationId": "Delete",
        "parameters": [
          {
            "description": "parameters",
            "name": "parameters",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "required": [
                "target_system",
                "target_path"
              ],
              "properties": {
                "target_path": {
                  "type": "string"
                },
                "target_system": {
                  "type": "string"
                }
              }
            }
          }
        ],
        "responses": {
          "201": {
            "description": "The response code means that the data deletion has been initiated. Status of the deletion can be checked by querying the status.",
            "schema": {
              "$ref": "#/definitions/RequestID"
            }
          },
          "400": {
            "description": "This means that there's something wrong in the input parameters and the server couldn't understand the request.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "This means that the user is not authenticated with keycloak and data deletion can't be triggered unless the user first log in with a valid user",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "This means that the resource the user is trying to delete from or to is not readable or writable by the user. User doesn't have the correct rights to delete the data on the target system location.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "This means that the the target path on the system doesn't exist.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "414": {
            "description": "This means that the the target path is longer than the server is willing to interpret.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "429": {
            "description": "This means that the user has sent too many requests in a given amount of time. The user is advised to wait and send the request again.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "This means that something has gone wrong on the data transfer steering server. The user is advised to wait and send the request again.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/staging/delete/{request_id}": {
      "get": {
        "security": [],
        "description": "Check the status of a delete request",
        "produces": [
          "application/json"
        ],
        "tags": [
          "staging",
          "dataSetManagement"
        ],
        "summary": "Check the status of a delete request",
        "operationId": "CheckDeletionStatus",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "name": "request_id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "This means that the status has been returned to the user in the response body.",
            "schema": {
              "type": "object",
              "required": [
                "status"
              ],
              "properties": {
                "status": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "This means that the request ID given by the user is incorrect.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "This means that the user is not authenticated with keycloak and data transfer can't be triggered unless the user first log in with a valid user",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "This means that the ID doesn't exist and thus a status can't be returned.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "414": {
            "description": "This means that the the request ID is longer than the server is willing to interpret.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "This means that something has gone wrong on the data transfer steering server. The user is advised to wait and send the request again.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/staging/download": {
      "post": {
        "description": "Download from staging zone",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json",
          "application/octet-stream"
        ],
        "tags": [
          "dataSetManagement"
        ],
        "summary": "Download from staging zone",
        "parameters": [
          {
            "name": "parameters",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "required": [
                "source_system",
                "source_path"
              ],
              "properties": {
                "source_path": {
                  "type": "string"
                },
                "source_system": {
                  "type": "string",
                  "enum": [
                    "lrz_staging_area"
                  ]
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "schema": {
              "type": "file"
            }
          },
          "400": {
            "description": "Malformed Request",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "502": {
            "description": "Bad Gateway",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "503": {
            "description": "Server error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/staging/duplicate": {
      "post": {
        "description": "Duplicate a dataset or subdataset (by enqueuing the request for latter processing)",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "staging",
          "dataSetManagement"
        ],
        "summary": "Duplicate a dataset or subdataset (by enqueuing the request for latter processing)",
        "operationId": "Duplicate",
        "parameters": [
          {
            "description": "parameters",
            "name": "parameters",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "required": [
                "source_system",
                "source_path"
              ],
              "properties": {
                "source_path": {
                  "type": "string"
                },
                "source_system": {
                  "type": "string"
                },
                "target_path": {
                  "type": "string"
                },
                "target_system": {
                  "type": "string"
                },
                "title": {
                  "type": "string"
                }
              }
            }
          }
        ],
        "responses": {
          "201": {
            "description": "The response code means that the duplication has been initiated. Status of the transfer can be checked by querying the status.",
            "schema": {
              "$ref": "#/definitions/RequestID"
            }
          },
          "400": {
            "description": "This means that there's something wrong in the input parameters and the server couldn't understand the request.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "This means that the user is not authenticated with keycloak and duplication can't be triggered unless the user first log in with a valid user",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "This means that the resource the user is trying to duplicate from or to is not readable or writable by the user. User doesn't have the correct rights to either read the source file or write on the target system location.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "This means that either the source path or the the target path on the system doesn't exist.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "414": {
            "description": "This means that the either the source path or the target path is longer than the server is willing to interpret.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "429": {
            "description": "This means that the user has sent too many requests in a given amount of time. The user is advised to wait and send the request again.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "This means that something has gone wrong on the data transfer steering server. The user is advised to wait and send the request again.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/staging/duplicate/{request_id}": {
      "get": {
        "security": [],
        "description": "Check the status of duplication",
        "produces": [
          "application/json"
        ],
        "tags": [
          "staging",
          "dataSetManagement"
        ],
        "summary": "Check the status of duplication",
        "operationId": "CheckDuplicationStatus",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "name": "request_id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "This means that the status has been returned to the user in the response body.",
            "schema": {
              "type": "object",
              "required": [
                "status"
              ],
              "properties": {
                "status": {
                  "type": "string"
                },
                "target_path": {
                  "description": "Single path for staging endpoints",
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "This means that the request ID given by the user is incorrect.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "This means that the user is not authenticated with keycloak and duplication can't be triggered unless the user first log in with a valid user",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "This means that the ID doesn't exist and thus a status can't be returned.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "414": {
            "description": "This means that the the request ID is longer than the server is willing to interpret.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "This means that something has gone wrong on the data transfer steering server. The user is advised to wait and send the request again.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/staging/info": {
      "get": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "staging",
          "dataSetManagement"
        ],
        "summary": "Lists possible target / source systems",
        "operationId": "StagingInfo",
        "responses": {
          "200": {
            "description": "List of possible target / source",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        }
      }
    },
    "/staging/stage": {
      "post": {
        "description": "Stage a dataset or subdataset (by enqueuing the request for latter processing)",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "staging",
          "dataSetManagement"
        ],
        "summary": "Stage a dataset or subdataset (by enqueuing the request for latter processing)",
        "operationId": "Stage",
        "parameters": [
          {
            "description": "parameters",
            "name": "parameters",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "required": [
                "source_system",
                "source_path",
                "target_system",
                "target_path",
                "encryption",
                "compression"
              ],
              "properties": {
                "compression": {
                  "type": "string",
                  "enum": [
                    "yes",
                    "no"
                  ]
                },
                "encryption": {
                  "type": "string",
                  "enum": [
                    "yes",
                    "no"
                  ]
                },
                "heappe_url": {
                  "type": "string"
                },
                "job_id": {
                  "type": "integer"
                },
                "metadata": {
                  "$ref": "#/definitions/Metadata"
                },
                "source_path": {
                  "type": "string"
                },
                "source_system": {
                  "type": "string"
                },
                "target_path": {
                  "type": "string"
                },
                "target_system": {
                  "type": "string"
                },
                "task_id": {
                  "type": "integer"
                }
              }
            }
          }
        ],
        "responses": {
          "201": {
            "description": "The response code means that the data transfer has been initiated. Status of the transfer can be checked by querying the status.",
            "schema": {
              "$ref": "#/definitions/RequestID"
            }
          },
          "400": {
            "description": "This means that there's something wrong in the input parameters and the server couldn't understand the request.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "This means that the user is not authenticated with keycloak and data transfer can't be triggered unless the user first log in with a valid user",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "This means that the resource the user is trying to transfer from or to is not readable or writable by the user. User doesn't have the correct rights to either read the source file or write on the target system location.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "This means that either the source path or the the target path on the system doesn't exist.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "414": {
            "description": "This means that the either the source path or the target path is longer than the server is willing to interpret.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "429": {
            "description": "This means that the user has sent too many requests in a given amount of time. The user is advised to wait and send the request again.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "This means that something has gone wrong on the data transfer steering server. The user is advised to wait and send the request again.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/staging/stage/{request_id}": {
      "get": {
        "security": [],
        "description": "Check the status of a transfer",
        "produces": [
          "application/json"
        ],
        "tags": [
          "staging",
          "dataSetManagement"
        ],
        "summary": "Check the status of a transfer",
        "operationId": "CheckStageStatus",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "name": "request_id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "This means that the status has been returned to the user in the response body.",
            "schema": {
              "type": "object",
              "required": [
                "status"
              ],
              "properties": {
                "status": {
                  "type": "string"
                },
                "target_path": {
                  "description": "Single path for staging endpoints",
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "This means that the request ID given by the user is incorrect.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "This means that the user is not authenticated with keycloak and data transfer can't be triggered unless the user first log in with a valid user",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "This means that the ID doesn't exist and thus a status can't be returned.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "414": {
            "description": "This means that the the request ID is longer than the server is willing to interpret.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "This means that something has gone wrong on the data transfer steering server. The user is advised to wait and send the request again.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/status": {
      "get": {
        "security": [
          {
            "Keycloak": [
              "user"
            ]
          },
          {
            "APIKeyHeader": []
          },
          {
            "APIKeyParam": []
          }
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "statusManagement"
        ],
        "summary": "Basic status of the system",
        "operationId": "showStatus",
        "responses": {
          "200": {
            "description": "Status information of the system",
            "schema": {
              "$ref": "#/definitions/Status"
            }
          }
        }
      }
    },
    "/status/{id}": {
      "get": {
        "security": [
          {
            "Keycloak": [
              "user"
            ]
          },
          {
            "APIKeyHeader": []
          },
          {
            "APIKeyParam": []
          }
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "statusManagement"
        ],
        "summary": "Basic status of the system",
        "operationId": "getStatus",
        "parameters": [
          {
            "enum": [
              "status",
              "certificate",
              "cloudnfs",
              "compress",
              "datasetManager",
              "gridmap",
              "project",
              "replicate",
              "sshfs",
              "stagingDownload",
              "steering",
              "support",
              "tus",
              "user"
            ],
            "type": "string",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Status information of the system",
            "schema": {
              "$ref": "#/definitions/Status"
            }
          },
          "404": {
            "description": "The endpoint provided doesn't exist",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/support": {
      "post": {
        "description": "Add a user to a support duties in iRODS WP3 DDI",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "dataSetManagement",
          "iRODSPermissionManagement"
        ],
        "summary": "Add a user to a support duties in iRODS WP3 DDI",
        "operationId": "AddSupportUser",
        "parameters": [
          {
            "name": "Username",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "required": [
                "username"
              ],
              "properties": {
                "username": {
                  "description": "Keycloak / iRODS Username",
                  "type": "string"
                }
              }
            }
          }
        ],
        "responses": {
          "201": {
            "description": "User was added to support group"
          },
          "400": {
            "description": "Malformed request",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "Internal error processing request",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "502": {
            "description": "Bad Gateway",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      },
      "delete": {
        "description": "Remove user from support duties in iRODS WP3 DDI",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "dataSetManagement"
        ],
        "summary": "Remove user from support duties in iRODS WP3 DDI",
        "operationId": "DeleteSupportUser",
        "parameters": [
          {
            "name": "Username",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "required": [
                "username"
              ],
              "properties": {
                "username": {
                  "description": "Keycloak / iRODS Username",
                  "type": "string"
                }
              }
            }
          }
        ],
        "responses": {
          "204": {
            "description": "User was removed from support duties"
          },
          "400": {
            "description": "Malformed request",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "Internal error processing request",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "502": {
            "description": "Bad Gateway",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/user": {
      "post": {
        "description": "Create a user in iRODS WP3 DDI and connect to Keycloak",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "dataSetManagement",
          "iRODSPermissionManagement"
        ],
        "summary": "Create a user in iRODS WP3 DDI and connect to Keycloak",
        "operationId": "CreateUser",
        "parameters": [
          {
            "name": "UserInfo",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "required": [
                "username",
                "id"
              ],
              "properties": {
                "id": {
                  "description": "Keycloak ID",
                  "type": "string",
                  "format": "uuid",
                  "example": "aaaaaa-bbbb-cccc-dddd-eeeeeeeeeeee"
                },
                "username": {
                  "description": "Keycloak Username",
                  "type": "string"
                }
              }
            }
          }
        ],
        "responses": {
          "201": {
            "description": "User was created"
          },
          "400": {
            "description": "Malformed request",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "Permission denied",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "409": {
            "description": "User already exists",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "Internal error processing request",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "502": {
            "description": "Bad Gateway",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "503": {
            "description": "Service Unavailable",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      },
      "delete": {
        "description": "Delete a user in iRODS WP3 DDI.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "dataSetManagement",
          "iRODSPermissionManagement"
        ],
        "summary": "Delete a user in iRODS WP3 DDI",
        "operationId": "DeleteUser",
        "parameters": [
          {
            "name": "User",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "required": [
                "username"
              ],
              "properties": {
                "username": {
                  "description": "Keycloak Username",
                  "type": "string"
                }
              }
            }
          }
        ],
        "responses": {
          "204": {
            "description": "User was deleted"
          },
          "400": {
            "description": "Malformed request",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "Internal error processing request",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "502": {
            "description": "Bad Gateway",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    }
  },
  "definitions": {
    "AccessMode": {
      "type": "string",
      "enum": [
        "public",
        "project",
        "user"
      ]
    },
    "ArchiveType": {
      "type": "string",
      "enum": [
        "zip",
        "file"
      ]
    },
    "CompressMethod": {
      "type": "string",
      "enum": [
        "zip",
        "file"
      ]
    },
    "DataEncryption": {
      "type": "object",
      "required": [
        "status"
      ],
      "properties": {
        "status": {
          "description": "Status of the data encryption/decryption/compression/decompression process",
          "type": "string",
          "example": "Encryption completed"
        },
        "target_path": {
          "description": "Path to where the data are encrypted",
          "type": "string",
          "example": "/srv/staging_area/burst_buffer/81559c0e-a433-11eb-95ce-3868dd145170/833290c2-a433-11eb-95ce-3868dd145170"
        }
      }
    },
    "DataReplication": {
      "type": "object",
      "required": [
        "status"
      ],
      "properties": {
        "PID": {
          "description": "EUDAT PID of the replicated data",
          "type": "string",
          "example": "1001/e4495e44-dc84-11ea-9c37-0050568f81d2"
        },
        "status": {
          "description": "Status of the data replication process",
          "type": "string",
          "example": "Replication completed"
        },
        "target_path": {
          "description": "Path to where the data are replicated",
          "type": "string",
          "example": "/IT4ILexisZone/project/proj1fc54ae5e387be0d369eddddc2010e5e/datasetL4988"
        }
      }
    },
    "DataSize": {
      "type": "object",
      "required": [
        "result"
      ],
      "properties": {
        "result": {
          "description": "Status of the datasize get process",
          "type": "string",
          "example": "Done"
        },
        "size": {
          "description": "dataset size",
          "type": "string",
          "example": "45645352354"
        },
        "smallfiles": {
          "description": "dataset files smaller than 32 MB",
          "type": "string",
          "example": "2"
        },
        "totalfiles": {
          "description": "dataset files",
          "type": "string",
          "example": "343"
        }
      }
    },
    "DatasetContent": {
      "type": "object",
      "required": [
        "name",
        "type"
      ],
      "properties": {
        "checksum": {
          "type": "string"
        },
        "contents": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/DatasetContent"
          }
        },
        "create_time": {
          "type": "string"
        },
        "name": {
          "description": "filename",
          "type": "string"
        },
        "size": {
          "type": "integer"
        },
        "type": {
          "description": "directory or file",
          "type": "string"
        }
      }
    },
    "ErrorResponse": {
      "type": "object",
      "required": [
        "errorString"
      ],
      "properties": {
        "errorString": {
          "type": "string"
        }
      }
    },
    "Eudat": {
      "type": "object",
      "properties": {
        "EUDAT/FIO": {
          "type": "string"
        },
        "EUDAT/FIXED_CONTENT": {
          "type": "string"
        },
        "EUDAT/PARENT": {
          "type": "string"
        },
        "EUDAT/REPLICA": {
          "type": "string"
        },
        "EUDAT/ROR": {
          "type": "string"
        },
        "PID": {
          "type": "string"
        }
      }
    },
    "ItemCreatedResponse": {
      "type": "object",
      "required": [
        "status",
        "internalID"
      ],
      "properties": {
        "internalID": {
          "type": "string"
        },
        "status": {
          "description": "HTTP status code",
          "type": "string",
          "pattern": "[0-9][0-9][0-9]",
          "example": "201"
        }
      }
    },
    "Location": {
      "type": "object",
      "required": [
        "access",
        "project",
        "internalID",
        "zone"
      ],
      "properties": {
        "access": {
          "$ref": "#/definitions/AccessMode"
        },
        "internalID": {
          "type": "string"
        },
        "project": {
          "type": "string"
        },
        "zone": {
          "type": "string",
          "example": "LRZLexisZone"
        }
      }
    },
    "Message": {
      "type": "object",
      "required": [
        "message"
      ],
      "properties": {
        "message": {
          "type": "string"
        }
      }
    },
    "Metadata": {
      "type": "object",
      "properties": {
        "AlternateIdentifier": {
          "description": "DataCite AlternateIdentifier",
          "type": "array",
          "items": {
            "description": "Pairs [AlternateIdentifierType, AlternateIdentifier]",
            "type": "array",
            "maxItems": 2,
            "minItems": 2,
            "items": {
              "type": "string"
            }
          }
        },
        "CreationDate": {
          "type": "string"
        },
        "CustomMetadata": {
          "type": "object"
        },
        "CustomMetadataSchema": {
          "type": "array",
          "items": {
            "type": "object"
          }
        },
        "Description": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "contributor": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "creator": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "format": {
          "type": "string"
        },
        "identifier": {
          "description": "Datacite identifier (doi), unused for now",
          "type": "string"
        },
        "owner": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "publicationYear": {
          "type": "string"
        },
        "publisher": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "relatedIdentifier": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "relatedSoftware": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "resourceType": {
          "type": "string"
        },
        "resourceTypeGeneral": {
          "type": "string",
          "enum": [
            "Audiovisual",
            "Collection",
            "DataPaper",
            "Dataset",
            "Event",
            "Image",
            "InteractiveResource",
            "Model",
            "PhysicalObject",
            "Service",
            "Software",
            "Sound",
            "Text",
            "Workflow",
            "Other"
          ]
        },
        "rights": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "rightsIdentifier": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "rightsURI": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "scope": {
          "type": "string"
        },
        "title": {
          "type": "string"
        }
      }
    },
    "MetadataQuery": {
      "type": "object",
      "properties": {
        "AlternateIdentifier": {
          "description": "DataCite AlternateIdentifier",
          "type": "string"
        },
        "AlternateIdentifierType": {
          "description": "DataCite AlternateIdentifierType. Size must match AlternateIdentifier",
          "type": "string"
        },
        "CreationDate": {
          "type": "string"
        },
        "CustomMetadata": {
          "type": "object"
        },
        "Description": {
          "type": "string"
        },
        "EUDAT/FIO": {
          "type": "string"
        },
        "EUDAT/FIXED_CONTENT": {
          "type": "string"
        },
        "EUDAT/PARENT": {
          "type": "string"
        },
        "EUDAT/REPLICA": {
          "type": "string"
        },
        "EUDAT/ROR": {
          "type": "string"
        },
        "PID": {
          "type": "string"
        },
        "access": {
          "$ref": "#/definitions/AccessMode"
        },
        "contributor": {
          "type": "string"
        },
        "creator": {
          "type": "string"
        },
        "format": {
          "type": "string"
        },
        "identifier": {
          "description": "DataCite identifier (DOI), unused for now",
          "type": "string"
        },
        "internalID": {
          "description": "iRODS identifier",
          "type": "string"
        },
        "owner": {
          "type": "string"
        },
        "project": {
          "type": "string"
        },
        "publicationYear": {
          "type": "string"
        },
        "publisher": {
          "type": "string"
        },
        "relatedIdentifier": {
          "type": "string"
        },
        "relatedSoftware": {
          "type": "string"
        },
        "resourceType": {
          "type": "string"
        },
        "resourceTypeGeneral": {
          "type": "string"
        },
        "rights": {
          "type": "string"
        },
        "rightsIdentifier": {
          "type": "string"
        },
        "rightsURI": {
          "type": "string"
        },
        "scope": {
          "type": "string"
        },
        "title": {
          "type": "string"
        }
      }
    },
    "MetadataQueryResponse": {
      "type": "object",
      "required": [
        "location",
        "metadata",
        "flags"
      ],
      "properties": {
        "eudat": {
          "$ref": "#/definitions/Eudat"
        },
        "flags": {
          "$ref": "#/definitions/flags"
        },
        "location": {
          "$ref": "#/definitions/Location"
        },
        "metadata": {
          "$ref": "#/definitions/Metadata"
        }
      }
    },
    "PushMethod": {
      "type": "string",
      "enum": [
        "empty",
        "directupload",
        "tus"
      ]
    },
    "RequestID": {
      "type": "object",
      "required": [
        "request_id"
      ],
      "properties": {
        "request_id": {
          "description": "UUID",
          "type": "string",
          "format": "uuid",
          "example": "31279ed6-e7b1-4c9f-ab26-206c863a2264"
        }
      }
    },
    "Status": {
      "type": "object",
      "properties": {
        "AverageResponseTime": {
          "type": "number",
          "format": "double"
        },
        "EndpointsResponseTime": {
          "$ref": "#/definitions/StatusMetadata"
        },
        "LastRequest": {
          "type": "string"
        },
        "RequestsBoT": {
          "type": "integer"
        },
        "RequestsLastHour": {
          "type": "integer"
        },
        "RequestsToday": {
          "type": "integer"
        },
        "SystemState": {
          "type": "string"
        }
      }
    },
    "StatusMetadata": {
      "type": "object",
      "x-go-type": {
        "import": {
          "package": "gitlab.com/cyclops-utilities/datamodels"
        },
        "type": "JSONdb"
      }
    },
    "UserInProject": {
      "type": "object",
      "required": [
        "username",
        "projectname"
      ],
      "properties": {
        "projectname": {
          "description": "Project name (Keycloak group)",
          "type": "string"
        },
        "username": {
          "description": "Username (in iRODS and keycloak)",
          "type": "string"
        }
      }
    },
    "flags": {
      "type": "object",
      "properties": {
        "compression": {
          "type": "string"
        },
        "encryption": {
          "type": "string"
        }
      }
    }
  },
  "securityDefinitions": {
    "Keycloak": {
      "type": "oauth2",
      "flow": "accessCode",
      "authorizationUrl": "https:138.246.232.245:6443/auth",
      "tokenUrl": "https:138.246.232.245:6443/auth"
    }
  },
  "security": [
    {
      "Keycloak": []
    }
  ],
  "tags": [
    {
      "description": "Actions relating to management of datasets",
      "name": "dataSetManagement"
    },
    {
      "description": "Actions relating to staging datasets to other zones",
      "name": "staging"
    },
    {
      "description": "Actions related to compression of datasets into multivolume archives",
      "name": "CompressAPI"
    },
    {
      "description": "Actions related to access permissions in iRODS",
      "name": "iRODSPermissionManagement"
    },
    {
      "description": "Actions related to dataset access via gridftp (permission management)",
      "name": "gridftp"
    },
    {
      "description": "Actions related to export of staged datasets via SSHFS",
      "name": "sshfsexport"
    },
    {
      "description": "Actions relating to the reporting of the state of the service",
      "name": "statusManagement"
    }
  ]
}`))
	FlatSwaggerJSON = json.RawMessage([]byte(`{
  "swagger": "2.0",
  "info": {
    "description": "An API which supports querying available LEXIS data sets",
    "title": "WP3-backed Data Service API",
    "contact": {
      "email": "ruben@lrz.de"
    },
    "license": {
      "name": "Apache 2.0",
      "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
    },
    "version": "0.1.1"
  },
  "basePath": "/api/v0.1.1",
  "paths": {
    "/cert": {
      "get": {
        "description": "download public key for WP3 APIs",
        "produces": [
          "application/octet-stream"
        ],
        "tags": [
          "dataSetManagement"
        ],
        "summary": "download public key for WP3 APIs",
        "operationId": "Certificate",
        "responses": {
          "200": {
            "description": "Certificate download in body of response",
            "schema": {
              "type": "file"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "Internal error processing request",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "502": {
            "description": "Bad Gateway",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "503": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/cloud/add/{param}": {
      "get": {
        "security": [],
        "description": "Check the status of a nfs export add request for the cloud",
        "produces": [
          "application/json"
        ],
        "tags": [
          "staging"
        ],
        "summary": "Check the status of a nfs export add request for the cloud",
        "operationId": "CheckCloudNFSExportAddStatus",
        "parameters": [
          {
            "type": "string",
            "description": "queue identifier returned by a POST request at /cloud/add/{param}",
            "name": "param",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "This means that the status has been returned to the user in the response body.",
            "schema": {
              "type": "object",
              "required": [
                "status"
              ],
              "properties": {
                "status": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "This means that the request ID given by the user is incorrect.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "This means that the user is not authenticated with keycloak and NFS export can't be triggered unless the user first log in with a valid user",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "The IP is outside of the allowed range",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "This means that the ID doesn't exist and thus a status can't be returned.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "414": {
            "description": "This means that the the request ID is longer than the server is willing to interpret.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "This means that something has gone wrong on the data transfer steering server. The user is advised to wait and send the request again.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      },
      "post": {
        "security": [
          {
            "Keycloak": []
          }
        ],
        "description": "Request that an nfs export be created for an LRZ cloud instance",
        "produces": [
          "application/json"
        ],
        "tags": [
          "staging"
        ],
        "summary": "Request that an nfs export be created for an LRZ cloud instance",
        "operationId": "CloudNFSExportAdd",
        "parameters": [
          {
            "type": "string",
            "description": "IP of the cloud machine",
            "name": "param",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "201": {
            "description": "The response code means that the request for addition has been initiated. Status of the addition process can be checked by querying the status.",
            "schema": {
              "$ref": "#/definitions/RequestID"
            }
          },
          "400": {
            "description": "This means that the request ID given by the user is incorrect.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "This means that the user is not authenticated with keycloak and data transfer can't be triggered unless the user first log in with a valid user",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "The IP is outside of the allowed range",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "414": {
            "description": "This means that the the request ID is longer than the server is willing to interpret.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "This means that something has gone wrong on the data transfer steering server. The user is advised to wait and send the request again.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/cloud/remove/{param}": {
      "get": {
        "security": [],
        "description": "Check the status of a nfs export remove request for the cloud",
        "produces": [
          "application/json"
        ],
        "tags": [
          "staging"
        ],
        "summary": "Check the status of a nfs export remove request for the cloud",
        "operationId": "CheckCloudNFSExportRemoveStatus",
        "parameters": [
          {
            "type": "string",
            "description": "queue identifier returned by a POST request at /cloud/remove/{param}",
            "name": "param",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "This means that the status has been returned to the user in the response body.",
            "schema": {
              "type": "object",
              "required": [
                "status"
              ],
              "properties": {
                "status": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "This means that the request ID given by the user is incorrect.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "This means that the user is not authenticated with keycloak and data transfer can't be triggered unless the user first log in with a valid user",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "This means that the ID doesn't exist and thus a status can't be returned.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "414": {
            "description": "This means that the the request ID is longer than the server is willing to interpret.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "This means that something has gone wrong on the data transfer steering server. The user is advised to wait and send the request again.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      },
      "post": {
        "security": [
          {
            "Keycloak": []
          }
        ],
        "description": "Request that an nfs export be removed for an LRZ cloud instance",
        "produces": [
          "application/json"
        ],
        "tags": [
          "staging"
        ],
        "summary": "Request that an nfs export be removed for an LRZ cloud instance",
        "operationId": "CloudNFSExportRemove",
        "parameters": [
          {
            "type": "string",
            "description": "IP of the cloud machine",
            "name": "param",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "201": {
            "description": "The response code means that the request for removal has been initiated. Status of the removal process can be checked by querying the status.",
            "schema": {
              "$ref": "#/definitions/RequestID"
            }
          },
          "400": {
            "description": "This means that the request ID given by the user is incorrect.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "This means that the user is not authenticated with keycloak and data transfer can't be triggered unless the user first log in with a valid user",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "414": {
            "description": "This means that the the request ID is longer than the server is willing to interpret.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "This means that something has gone wrong on the data transfer steering server. The user is advised to wait and send the request again.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/compress/zip": {
      "post": {
        "description": "Creates a multipart zip file from a staging api source_system/source_path combination",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "staging",
          "CompressAPI"
        ],
        "summary": "Creates a multipart zip file from a staging api source_system/source_path combination",
        "operationId": "CompressToZip",
        "parameters": [
          {
            "description": "parameters",
            "name": "parameters",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "required": [
                "source_system",
                "source_path",
                "size"
              ],
              "properties": {
                "size": {
                  "type": "integer"
                },
                "source_path": {
                  "type": "string"
                },
                "source_system": {
                  "type": "string",
                  "enum": [
                    "lrz_iRODS"
                  ]
                }
              }
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Request was added to the queue",
            "schema": {
              "$ref": "#/definitions/RequestID"
            }
          },
          "400": {
            "description": "Malformed Request",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "502": {
            "description": "Bad Gateway",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "503": {
            "description": "Server error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/compress/zip/{request_id}": {
      "get": {
        "security": [],
        "description": "Check the status of a multipart zip creation.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "staging",
          "dataSetManagement"
        ],
        "summary": "Check the status of a multipart zip creation.",
        "operationId": "CheckCompressToZipStatus",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "name": "request_id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "This means that the status has been returned to the user in the response body.",
            "schema": {
              "type": "object",
              "required": [
                "status"
              ],
              "properties": {
                "status": {
                  "type": "string"
                },
                "target_paths": {
                  "description": "Multiple paths for CompressAPI endpoints",
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              }
            }
          },
          "400": {
            "description": "This means that the request ID given by the user is incorrect.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "This means that the user is not authenticated with keycloak and data transfer can't be triggered unless the user first log in with a valid user",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "This means that the ID doesn't exist and thus a status can't be returned.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "414": {
            "description": "This means that the the request ID is longer than the server is willing to interpret.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "This means that something has gone wrong on the data transfer steering server. The user is advised to wait and send the request again.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/data/size": {
      "post": {
        "description": "This is called when a user requests size of a dataset.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "dataSetManagement"
        ],
        "summary": "This is called when a user requests size of a dataset.",
        "operationId": "Size",
        "parameters": [
          {
            "description": "parameters",
            "name": "parameters",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "required": [
                "target_system",
                "target_path"
              ],
              "properties": {
                "target_path": {
                  "type": "string"
                },
                "target_system": {
                  "type": "string"
                }
              }
            }
          }
        ],
        "responses": {
          "201": {
            "description": "This is called when a user requests size of a dataset.",
            "schema": {
              "$ref": "#/definitions/RequestID"
            }
          },
          "400": {
            "description": "This means that there's something wrong in the input parameters and the server couldn't understand the request.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "This means that the user is not authenticated with keycloak and data transfer can't be triggered unless the user first log in with a valid user",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "This means that the resource the user is trying to transfer from or to is not readable or writable by the user. User doesn't have the correct rights to either read the source file or write on the target system location.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "This means that either the source path or the the target path on the system doesn't exist.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "414": {
            "description": "This means that the either the source path or the target path is longer than the server is willing to interpret.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "429": {
            "description": "This means that the user has sent too many requests in a given amount of time. The user is advised to wait and send the request again.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "This means that something has gone wrong on the data transfer steering server. The user is advised to wait and send the request again.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/data/size/{request_id}": {
      "get": {
        "description": "This is called when a user requests to check the status of datasize request",
        "produces": [
          "application/json"
        ],
        "tags": [
          "dataSetManagement"
        ],
        "summary": "This is called when a user requests to check the status of datasize request",
        "operationId": "CheckSizeStatus",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "name": "request_id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "This means that the status has been returned to the user in the response body.",
            "schema": {
              "$ref": "#/definitions/DataSize"
            }
          },
          "400": {
            "description": "This means that there's something wrong in the input parameters and the server couldn't understand the request.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "This means that the user is not authenticated with keycloak and data transfer can't be triggered unless the user first log in with a valid user",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "This means that the resource the user is trying to transfer from or to is not readable or writable by the user. User doesn't have the correct rights to either read the source file or write on the target system location.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "This means that either the source path or the the target path on the system doesn't exist.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "414": {
            "description": "This means that the either the source path or the target path is longer than the server is willing to interpret.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "429": {
            "description": "This means that the user has sent too many requests in a given amount of time. The user is advised to wait and send the request again.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "This means that something has gone wrong on the data transfer steering server. The user is advised to wait and send the request again.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/dataset": {
      "post": {
        "description": "Creates a new dataset",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "dataSetManagement"
        ],
        "summary": "Create a dataset",
        "operationId": "createDataset",
        "parameters": [
          {
            "description": "parameters",
            "name": "dataset",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "required": [
                "push_method",
                "access",
                "project"
              ],
              "properties": {
                "access": {
                  "$ref": "#/definitions/AccessMode"
                },
                "comp": {
                  "type": "string",
                  "enum": [
                    "yes",
                    "no"
                  ]
                },
                "compress_method": {
                  "$ref": "#/definitions/CompressMethod"
                },
                "enc": {
                  "type": "string",
                  "enum": [
                    "yes",
                    "no"
                  ]
                },
                "file": {
                  "description": "json-encoded file or zip (depending on compress_method)",
                  "type": "string"
                },
                "internalID": {
                  "type": "string"
                },
                "metadata": {
                  "$ref": "#/definitions/Metadata"
                },
                "name": {
                  "description": "name of the file if compress_method is file",
                  "type": "string"
                },
                "path": {
                  "type": "string"
                },
                "project": {
                  "type": "string"
                },
                "push_method": {
                  "$ref": "#/definitions/PushMethod"
                },
                "zone": {
                  "type": "string"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "dataset modified",
            "schema": {
              "$ref": "#/definitions/ItemCreatedResponse"
            }
          },
          "201": {
            "description": "dataset created",
            "schema": {
              "$ref": "#/definitions/ItemCreatedResponse"
            }
          },
          "400": {
            "description": "invalid input, object invalid",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "User not authorized to perform action",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "502": {
            "description": "Bad Gateway",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "503": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      },
      "delete": {
        "description": "Deletes a dataset by internalID (or subdataset by path). Since this is\na synchronous operation, it can only be used in small datasets to avoid \nan HTTP timeout. Use the staging / delete endpoint for large datasets.\n",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "dataSetManagement"
        ],
        "summary": "Delete Dataset",
        "operationId": "DeleteDataset",
        "parameters": [
          {
            "description": "parameter",
            "name": "json",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "required": [
                "internalID",
                "access",
                "project"
              ],
              "properties": {
                "access": {
                  "$ref": "#/definitions/AccessMode"
                },
                "internalID": {
                  "type": "string"
                },
                "path": {
                  "type": "string"
                },
                "project": {
                  "type": "string"
                },
                "zone": {
                  "type": "string"
                }
              }
            }
          }
        ],
        "responses": {
          "201": {
            "description": "The delete request was enqueued. StagingAPI and requestID can be concatenated to obtain a query URL about this request.",
            "schema": {
              "type": "object",
              "properties": {
                "internalID": {
                  "type": "string"
                },
                "request_id": {
                  "type": "string"
                },
                "stagingAPI": {
                  "type": "string"
                }
              }
            }
          },
          "204": {
            "description": "Dataset does not exist"
          },
          "400": {
            "description": "Malformed Request",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "Internal error processing request",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "502": {
            "description": "Bad Gateway",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "503": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/dataset/checkpermission": {
      "post": {
        "description": "Check if a user has permission to access a DDI location for writing",
        "consumes": [
          "application/json"
        ],
        "tags": [
          "dataSetManagement"
        ],
        "summary": "Check if a user has permission to access a DDI location for writing",
        "operationId": "CheckPermission",
        "parameters": [
          {
            "name": "Access",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "required": [
                "access",
                "project"
              ],
              "properties": {
                "access": {
                  "$ref": "#/definitions/AccessMode"
                },
                "project": {
                  "type": "string",
                  "example": "wp6"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "User has permission to write",
            "schema": {
              "type": "object",
              "required": [
                "status"
              ],
              "properties": {
                "status": {
                  "type": "string",
                  "pattern": "200",
                  "example": "200"
                }
              }
            }
          },
          "400": {
            "description": "Malformed request",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "Authorization failed",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "User does not have permission",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "502": {
            "description": "Bad Gateway",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "503": {
            "description": "Error accessing backend service",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/dataset/download": {
      "post": {
        "description": "Downloads a dataset",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/octet-stream"
        ],
        "tags": [
          "dataSetManagement"
        ],
        "summary": "DownloadDataset",
        "operationId": "DownloadDataset",
        "parameters": [
          {
            "description": "parameters",
            "name": "json",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "required": [
                "internalID",
                "access",
                "project"
              ],
              "properties": {
                "access": {
                  "$ref": "#/definitions/AccessMode"
                },
                "archivetype": {
                  "$ref": "#/definitions/ArchiveType"
                },
                "internalID": {
                  "type": "string"
                },
                "path": {
                  "type": "string"
                },
                "project": {
                  "type": "string"
                },
                "push_method": {
                  "type": "string",
                  "enum": [
                    "directupload"
                  ]
                },
                "zone": {
                  "type": "string"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "zip containing dataset",
            "schema": {
              "type": "file"
            }
          },
          "400": {
            "description": "Malformed Request",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "Internal error processing request",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "502": {
            "description": "Bad Gateway",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "503": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/dataset/listing": {
      "post": {
        "description": "List file contents of a dataset.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "dataSetManagement"
        ],
        "summary": "List file contents of a dataset.",
        "operationId": "Listing",
        "parameters": [
          {
            "description": "parameter",
            "name": "json",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "required": [
                "internalID",
                "access",
                "project"
              ],
              "properties": {
                "access": {
                  "$ref": "#/definitions/AccessMode"
                },
                "internalID": {
                  "type": "string"
                },
                "path": {
                  "type": "string",
                  "default": ""
                },
                "project": {
                  "type": "string"
                },
                "recursive": {
                  "type": "boolean",
                  "default": true
                },
                "zone": {
                  "type": "string"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Content of the dataset",
            "schema": {
              "$ref": "#/definitions/DatasetContent"
            }
          },
          "400": {
            "description": "Malformed request",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "Authorization failed",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "User does not have permission",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "502": {
            "description": "Bad Gateway",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "503": {
            "description": "Error accessing backend service",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/dataset/search/metadata": {
      "post": {
        "description": "Search for datasets based on metadata",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "dataSetManagement"
        ],
        "summary": "Search for datasets based on metadata",
        "operationId": "QueryDatasets",
        "parameters": [
          {
            "description": "metadata relating to dataset which is being searched for",
            "name": "metadataQuery",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/MetadataQuery"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Metadata for matching datasets returned",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/MetadataQueryResponse"
              }
            }
          },
          "400": {
            "description": "Malformed request",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "Authorization failed",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "Internal error processing request",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "502": {
            "description": "Bad Gateway",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "503": {
            "description": "unexpected error connecting to further backends",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      },
      "delete": {
        "description": "Search for datasets based on metadata, and delete them",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "dataSetManagement"
        ],
        "summary": "Search for datasets based on metadata, and delete them",
        "operationId": "DeleteDatasetByMetadata",
        "parameters": [
          {
            "description": "metadata relating to dataset which is being searched for",
            "name": "metadataQuery",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/MetadataQuery"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "datasets were deleted"
          },
          "400": {
            "description": "malformed request",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "Authorization failed",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "The user does not have permission to remove dataset",
            "schema": {
              "type": "object",
              "required": [
                "errorString"
              ],
              "properties": {
                "errorString": {
                  "type": "string"
                },
                "permission_error": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/PermissionErrorItems0"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal error processing request",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "502": {
            "description": "Bad Gateway",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "503": {
            "description": "unexpected error connecting to further backends",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/dataset/upload/": {
      "post": {
        "description": "Endpoint for the Creation extension",
        "tags": [
          "dataSetManagement"
        ],
        "summary": "An empty POST request is used to create a new upload resource. The Upload-Length header indicates the size of the entire upload in bytes.",
        "parameters": [
          {
            "type": "integer",
            "description": "Must be 0 for creation extension. May be a positive number for creation-with-upload extension.",
            "name": "Content-Length",
            "in": "header"
          },
          {
            "type": "integer",
            "description": "The Upload-Length request and response header indicates the size of the entire upload in bytes. The value MUST be a non-negative integer. In the concatenation extension, the Client MUST NOT include the Upload-Length header in the final upload creation",
            "name": "Upload-Length",
            "in": "header"
          },
          {
            "type": "string",
            "description": "Added by the Creation extension. The Upload-Metadata request and response header MUST consist of one or more comma-separated key-value pairs. The key and value MUST be separated by a space. The key MUST NOT contain spaces and commas and MUST NOT be empty. The key SHOULD be ASCII encoded and the value MUST be Base64 encoded. All keys MUST be unique. The value MAY be empty. In these cases, the space, which would normally separate the key and the value, MAY be left out. Since metadata can contain arbitrary binary values, Servers SHOULD carefully validate metadata values or sanitize them before using them as header values to avoid header smuggling.",
            "name": "Upload-Metadata",
            "in": "header"
          },
          {
            "type": "string",
            "description": "Added by the Concatenation extension. The Upload-Concat request and response header MUST be set in both partial and final upload creation requests. It indicates whether the upload is either a partial or final upload. If the upload is a partial one, the header value MUST be partial. In the case of a final upload, its value MUST be final followed by a semicolon and a space-separated list of partial upload URLs that will be concatenated. The partial uploads URLs MAY be absolute or relative and MUST NOT contain spaces as defined in RFC 3986.",
            "name": "Upload-Concat",
            "in": "header"
          },
          {
            "enum": [
              1
            ],
            "type": "integer",
            "description": "Added by the creation-defer-length extension. The Upload-Defer-Length request and response header indicates that the size of the upload is not known currently and will be transferred later. Its value MUST be 1. If the length of an upload is not deferred, this header MUST be omitted.",
            "name": "Upload-Defer-Length",
            "in": "header"
          },
          {
            "type": "integer",
            "name": "Upload-offset",
            "in": "header"
          },
          {
            "type": "string",
            "description": "Added by the checksum extension. The Upload-Checksum request header contains information about the checksum of the current body payload. The header MUST consist of the name of the used checksum algorithm and the Base64 encoded checksum separated by a space.",
            "name": "Upload-Checksum",
            "in": "header"
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "headers": {
              "Location": {
                "type": "string",
                "description": "Url of the created resource."
              },
              "Tus-Resumable": {
                "enum": [
                  "1.0.0"
                ],
                "type": "string"
              },
              "Upload-Expires": {
                "type": "string",
                "description": "Added by the Creation With Upload Extension in combination with the expiration extension. The Upload-Expires response header indicates the time after which the unfinished upload expires. A Server MAY wish to remove incomplete uploads after a given period of time to prevent abandoned uploads from taking up extra storage. The Client SHOULD use this header to determine if an upload is still valid before attempting to resume the upload. This header MUST be included in every PATCH response if the upload is going to expire. If the expiration is known at the creation, the Upload-Expires header MUST be included in the response to the initial POST request. Its value MAY change over time. If a Client does attempt to resume an upload which has since been removed by the Server, the Server SHOULD respond with the 404 Not Found or 410 Gone status. The latter one SHOULD be used if the Server is keeping track of expired uploads. In both cases the Client SHOULD start a new upload. The value of the Upload-Expires header MUST be in RFC 7231 datetime format."
              },
              "Upload-Offset": {
                "type": "integer",
                "description": "Added by the Creation With Upload Extension. The Upload-Offset request and response header indicates a byte offset within a resource. The value MUST be a non-negative integer."
              }
            }
          },
          "400": {
            "description": "Added by the Creation With Upload Extension in combination with the checksum extension. The checksum algorithm is not supported by the server",
            "headers": {
              "Tus-Resumable": {
                "enum": [
                  "1.0.0"
                ],
                "type": "string",
                "description": "Protocol version"
              }
            }
          },
          "401": {
            "description": "Authorization failed",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "412": {
            "description": "Precondition Failed",
            "headers": {
              "Tus-Resumable": {
                "enum": [
                  "1.0.0"
                ],
                "type": "string"
              },
              "Tus-Version": {
                "type": "string",
                "description": "The Tus-Version response header MUST be a comma-separated list of protocol versions supported by the Server. The list MUST be sorted by Server's preference where the first one is the most preferred one."
              }
            }
          },
          "413": {
            "description": "If the length of the upload exceeds the maximum, which MAY be specified using the Tus-Max-Size header, the Server MUST respond with the 413 Request Entity Too Large status.",
            "headers": {
              "Tus-Resumable": {
                "enum": [
                  "1.0.0"
                ],
                "type": "string"
              }
            }
          },
          "415": {
            "description": "Added by the Creation With Upload Extension. Content-Type was not application/offset+octet-stream",
            "headers": {
              "Tus-Resumable": {
                "enum": [
                  "1.0.0"
                ],
                "type": "string",
                "description": "Protocol version"
              }
            }
          },
          "460": {
            "description": "Added by the Creation With Upload Extension in combination with the checksum extension. Checksums mismatch",
            "headers": {
              "Tus-Resumable": {
                "enum": [
                  "1.0.0"
                ],
                "type": "string",
                "description": "Protocol version"
              }
            }
          },
          "503": {
            "description": "Service Unavailable",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      },
      "options": {
        "description": "An OPTIONS request MAY be used to gather information about the Server's current configuration. A successful response indicated by the 204 No Content or 200 OK status MUST contain the Tus-Version header. It MAY include the Tus-Extension and Tus-Max-Size headers.",
        "tags": [
          "dataSetManagement"
        ],
        "summary": "Request to gather information about the Server's current configuration",
        "responses": {
          "200": {
            "description": "Success",
            "headers": {
              "Tus-Checksum-Algorithm": {
                "type": "string",
                "description": "Added by the checksum extension. The Tus-Checksum-Algorithm response header MUST be a comma-separated list of the checksum algorithms supported by the server."
              },
              "Tus-Extension": {
                "type": "string",
                "description": "The Tus-Extension response header MUST be a comma-separated list of the extensions supported by the Server. If no extensions are supported, the Tus-Extension header MUST be omitted."
              },
              "Tus-Max-Size": {
                "type": "integer",
                "description": "The Tus-Max-Size response header MUST be a non-negative integer indicating the maximum allowed size of an entire upload in bytes. The Server SHOULD set this header if there is a known hard limit."
              },
              "Tus-Resumable": {
                "enum": [
                  "1.0.0"
                ],
                "type": "string",
                "description": "Protocol version"
              },
              "Tus-Version": {
                "type": "string",
                "description": "The Tus-Version response header MUST be a comma-separated list of protocol versions supported by the Server. The list MUST be sorted by Server's preference where the first one is the most preferred one."
              }
            }
          },
          "204": {
            "description": "Success",
            "headers": {
              "Tus-Checksum-Algorithm": {
                "type": "string",
                "description": "Added by the checksum extension. The Tus-Checksum-Algorithm response header MUST be a comma-separated list of the checksum algorithms supported by the server."
              },
              "Tus-Extension": {
                "type": "string",
                "description": "The Tus-Extension response header MUST be a comma-separated list of the extensions supported by the Server. If no extensions are supported, the Tus-Extension header MUST be omitted."
              },
              "Tus-Max-Size": {
                "type": "integer",
                "description": "The Tus-Max-Size response header MUST be a non-negative integer indicating the maximum allowed size of an entire upload in bytes. The Server SHOULD set this header if there is a known hard limit."
              },
              "Tus-Resumable": {
                "enum": [
                  "1.0.0"
                ],
                "type": "string"
              },
              "Tus-Version": {
                "type": "string",
                "description": "The Tus-Version response header MUST be a comma-separated list of protocol versions supported by the Server. The list MUST be sorted by Server's preference where the first one is the most preferred one."
              }
            }
          },
          "401": {
            "description": "Authorization failed",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "503": {
            "description": "Service Unavailable",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      },
      "parameters": [
        {
          "enum": [
            "1.0.0"
          ],
          "type": "string",
          "description": "Protocol version",
          "name": "Tus-Resumable",
          "in": "header",
          "required": true
        }
      ]
    },
    "/dataset/upload/{id}": {
      "delete": {
        "description": "When receiving a DELETE request for an existing upload the Server SHOULD free associated resources and MUST respond with the 204 No Content status confirming that the upload was terminated. For all future requests to this URL, the Server SHOULD respond with the 404 Not Found or 410 Gone status.",
        "tags": [
          "dataSetManagement"
        ],
        "summary": "Added by the Termination extension.",
        "operationId": "FilesDelete",
        "responses": {
          "204": {
            "description": "Upload was terminated",
            "headers": {
              "Tus-Resumable": {
                "enum": [
                  "1.0.0"
                ],
                "type": "string",
                "description": "Protocol version"
              }
            }
          },
          "401": {
            "description": "Authorization failed",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "412": {
            "description": "Precondition Failed",
            "headers": {
              "Tus-Resumable": {
                "enum": [
                  "1.0.0"
                ],
                "type": "string",
                "description": "Protocol version"
              },
              "Tus-Version": {
                "type": "string",
                "description": "The Tus-Version response header MUST be a comma-separated list of protocol versions supported by the Server. The list MUST be sorted by Server's preference where the first one is the most preferred one."
              }
            }
          },
          "503": {
            "description": "Service Unavailable",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      },
      "head": {
        "description": "Used to determine the offset at which the upload should be continued.",
        "tags": [
          "dataSetManagement"
        ],
        "summary": "Used to determine the offset at which the upload should be continued.",
        "operationId": "FilesHead",
        "responses": {
          "200": {
            "description": "Returns offset",
            "headers": {
              "Cache-Control": {
                "enum": [
                  "no-store"
                ],
                "type": "string"
              },
              "Tus-Resumable": {
                "enum": [
                  "1.0.0"
                ],
                "type": "string",
                "description": "Protocol version"
              },
              "Upload-Length": {
                "type": "integer",
                "description": "If the size of the upload is known, the Server MUST include the Upload-Length header in the response."
              },
              "Upload-Offset": {
                "type": "integer",
                "description": "The Upload-Offset request and response header indicates a byte offset within a resource. The value MUST be a non-negative integer. Offset at which the upload should be continued."
              }
            }
          },
          "401": {
            "description": "Authorization failed",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "If the resource is not found, the Server SHOULD return either the 404 Not Found, 410 Gone or 403 Forbidden status without the Upload-Offset header.",
            "headers": {
              "Tus-Resumable": {
                "enum": [
                  "1.0.0"
                ],
                "type": "string",
                "description": "Protocol version"
              }
            }
          },
          "404": {
            "description": "If the resource is not found, the Server SHOULD return either the 404 Not Found, 410 Gone or 403 Forbidden status without the Upload-Offset header.",
            "headers": {
              "Tus-Resumable": {
                "enum": [
                  "1.0.0"
                ],
                "type": "string",
                "description": "Protocol version"
              }
            }
          },
          "410": {
            "description": "If the resource is not found, the Server SHOULD return either the 404 Not Found, 410 Gone or 403 Forbidden status without the Upload-Offset header.",
            "headers": {
              "Tus-Resumable": {
                "enum": [
                  "1.0.0"
                ],
                "type": "string",
                "description": "Protocol version"
              }
            }
          },
          "412": {
            "description": "Precondition Failed",
            "headers": {
              "Tus-Resumable": {
                "enum": [
                  "1.0.0"
                ],
                "type": "string",
                "description": "Protocol version"
              },
              "Tus-Version": {
                "type": "string",
                "description": "The Tus-Version response header MUST be a comma-separated list of protocol versions supported by the Server. The list MUST be sorted by Server's preference where the first one is the most preferred one."
              }
            }
          },
          "503": {
            "description": "Service Unavailable",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      },
      "patch": {
        "description": "The Server SHOULD accept PATCH requests against any upload URL and apply the bytes contained in the message at the given offset specified by the Upload-Offset header. All PATCH requests MUST use Content-Type: application/offset+octet-stream, otherwise the server SHOULD return a 415 Unsupported Media Type status.",
        "consumes": [
          "application/offset+octet-stream"
        ],
        "tags": [
          "dataSetManagement"
        ],
        "summary": "Used to resume the upload",
        "operationId": "FilePatch",
        "parameters": [
          {
            "name": "Body",
            "in": "body",
            "schema": {
              "type": "string"
            }
          },
          {
            "type": "integer",
            "name": "Content-Length",
            "in": "header",
            "required": true
          },
          {
            "type": "integer",
            "description": "The Upload-Offset request and response header indicates a byte offset within a resource. The value MUST be a non-negative integer.",
            "name": "Upload-offset",
            "in": "header",
            "required": true
          },
          {
            "type": "string",
            "description": "Added by the checksum extension. The Upload-Checksum request header contains information about the checksum of the current body payload. The header MUST consist of the name of the used checksum algorithm and the Base64 encoded checksum separated by a space.",
            "name": "Upload-Checksum",
            "in": "header"
          }
        ],
        "responses": {
          "204": {
            "description": "Upload offset was updated",
            "headers": {
              "Tus-Resumable": {
                "enum": [
                  "1.0.0"
                ],
                "type": "string",
                "description": "Protocol version"
              },
              "Upload-Expires": {
                "type": "string",
                "description": "Added by the expiration extension. The Upload-Expires response header indicates the time after which the unfinished upload expires. A Server MAY wish to remove incomplete uploads after a given period of time to prevent abandoned uploads from taking up extra storage. The Client SHOULD use this header to determine if an upload is still valid before attempting to resume the upload. This header MUST be included in every PATCH response if the upload is going to expire. If the expiration is known at the creation, the Upload-Expires header MUST be included in the response to the initial POST request. Its value MAY change over time. If a Client does attempt to resume an upload which has since been removed by the Server, the Server SHOULD respond with the 404 Not Found or 410 Gone status. The latter one SHOULD be used if the Server is keeping track of expired uploads. In both cases the Client SHOULD start a new upload. The value of the Upload-Expires header MUST be in RFC 7231 datetime format."
              },
              "Upload-Offset": {
                "type": "integer",
                "description": "The Upload-Offset request and response header indicates a byte offset within a resource. The value MUST be a non-negative integer."
              }
            }
          },
          "400": {
            "description": "Added by the checksum extension. The checksum algorithm is not supported by the server",
            "headers": {
              "Tus-Resumable": {
                "enum": [
                  "1.0.0"
                ],
                "type": "string",
                "description": "Protocol version"
              }
            }
          },
          "401": {
            "description": "Authorization failed",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "In the concatenation extension, the Server MUST respond with the 403 Forbidden status to PATCH requests against a final upload URL and MUST NOT modify the final or its partial uploads.",
            "headers": {
              "Tus-Resumable": {
                "enum": [
                  "1.0.0"
                ],
                "type": "string",
                "description": "Protocol version"
              }
            }
          },
          "404": {
            "description": "PATCH request against a non-existent resource",
            "headers": {
              "Tus-Resumable": {
                "enum": [
                  "1.0.0"
                ],
                "type": "string",
                "description": "Protocol version"
              }
            }
          },
          "410": {
            "description": "PATCH request against a non-existent resource",
            "headers": {
              "Tus-Resumable": {
                "enum": [
                  "1.0.0"
                ],
                "type": "string",
                "description": "Protocol version"
              }
            }
          },
          "412": {
            "description": "Precondition Failed",
            "headers": {
              "Tus-Resumable": {
                "enum": [
                  "1.0.0"
                ],
                "type": "string",
                "description": "Protocol version"
              },
              "Tus-Version": {
                "type": "string",
                "description": "The Tus-Version response header MUST be a comma-separated list of protocol versions supported by the Server. The list MUST be sorted by Server's preference where the first one is the most preferred one."
              }
            }
          },
          "415": {
            "description": "Content-Type was not application/offset+octet-stream",
            "headers": {
              "Tus-Resumable": {
                "enum": [
                  "1.0.0"
                ],
                "type": "string",
                "description": "Protocol version"
              }
            }
          },
          "460": {
            "description": "Added by the checksum extension. Checksums mismatch",
            "headers": {
              "Tus-Resumable": {
                "enum": [
                  "1.0.0"
                ],
                "type": "string",
                "description": "Protocol version"
              }
            }
          },
          "503": {
            "description": "Service Unavailable",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "id",
          "in": "path",
          "required": true
        },
        {
          "enum": [
            "1.0.0"
          ],
          "type": "string",
          "description": "Protocol version",
          "name": "Tus-Resumable",
          "in": "header",
          "required": true
        }
      ]
    },
    "/encryption/compress": {
      "post": {
        "description": "Compress a dataset or subdataset (by enqueuing the request for latter processing)",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "dataSetManagement"
        ],
        "summary": "Compress a dataset or subdataset (by enqueuing the request for latter processing)",
        "operationId": "Compress",
        "parameters": [
          {
            "description": "parameters",
            "name": "parameters",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "required": [
                "source_system",
                "source_path"
              ],
              "properties": {
                "source_path": {
                  "type": "string"
                },
                "source_system": {
                  "type": "string"
                }
              }
            }
          }
        ],
        "responses": {
          "201": {
            "description": "The response code means that the compression has been initiated. Status of the operation can be checked by querying the status.",
            "schema": {
              "$ref": "#/definitions/RequestID"
            }
          },
          "400": {
            "description": "This means that there's something wrong in the input parameters and the server couldn't understand the request.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "This means that the user is not authenticated with keycloak and compression can't be triggered unless the user first log in with a valid user",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "This means that the resource the user is trying to compress is not readable. User doesn't have the correct rights to read the source file.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "This means that the source path on the system doesn't exist.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "414": {
            "description": "This means that the either the source path is longer than the server is willing to interpret.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "429": {
            "description": "This means that the user has sent too many requests in a given amount of time. The user is advised to wait and send the request again.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "This means that something has gone wrong on the burst buffer. The user is advised to wait and send the request again.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/encryption/compress/{request_id}": {
      "get": {
        "security": [],
        "description": "Check the status of a compression",
        "produces": [
          "application/json"
        ],
        "tags": [
          "dataSetManagement"
        ],
        "summary": "Check the status of a compression",
        "operationId": "CheckCompressionStatus",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "name": "request_id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "This means that the status has been returned to the user in the response body.",
            "schema": {
              "type": "object",
              "required": [
                "status"
              ],
              "properties": {
                "status": {
                  "type": "string"
                },
                "target_path": {
                  "description": "Single path for encryption endpoints",
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "This means that the request ID given by the user is incorrect.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "This means that the user is not authenticated with keycloak and compression can't be triggered unless the user first log in with a valid user",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "This means that the ID doesn't exist and thus a status can't be returned.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "414": {
            "description": "This means that the the request ID is longer than the server is willing to interpret.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "This means that something has gone wrong on the burst buffer. The user is advised to wait and send the request again.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/encryption/compress_encrypt": {
      "post": {
        "description": "Compress and encrypt a dataset or subdataset (by enqueuing the request for latter processing)",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "dataSetManagement"
        ],
        "summary": "Compress and encrypt a dataset or subdataset (by enqueuing the request for latter processing)",
        "operationId": "CompressEncrypt",
        "parameters": [
          {
            "description": "parameters",
            "name": "parameters",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "required": [
                "source_system",
                "source_path",
                "project"
              ],
              "properties": {
                "project": {
                  "type": "string"
                },
                "source_path": {
                  "type": "string"
                },
                "source_system": {
                  "type": "string"
                }
              }
            }
          }
        ],
        "responses": {
          "201": {
            "description": "The response code means that the compression and encryption has been initiated. Status of the operation can be checked by querying the status.",
            "schema": {
              "$ref": "#/definitions/RequestID"
            }
          },
          "400": {
            "description": "This means that there's something wrong in the input parameters and the server couldn't understand the request.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "This means that the user is not authenticated with keycloak and compression with encryption can't be triggered unless the user first log in with a valid user",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "This means that the resource the user is trying to compress and encrypt is not readable by the user. User doesn't have the correct rights to read the source file.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "This means that either the source path on the system doesn't exist.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "414": {
            "description": "This means that the source path is longer than the server is willing to interpret.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "429": {
            "description": "This means that the user has sent too many requests in a given amount of time. The user is advised to wait and send the request again.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "This means that something has gone wrong on the burst buffer. The user is advised to wait and send the request again.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/encryption/compress_encrypt/{request_id}": {
      "get": {
        "security": [],
        "description": "Check the status of compression with encryption",
        "produces": [
          "application/json"
        ],
        "tags": [
          "dataSetManagement"
        ],
        "summary": "Check the status of compression with encryption",
        "operationId": "CheckCompressionEncryptionStatus",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "name": "request_id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "This means that the status has been returned to the user in the response body.",
            "schema": {
              "type": "object",
              "required": [
                "status"
              ],
              "properties": {
                "status": {
                  "type": "string"
                },
                "target_path": {
                  "description": "Single path for encryption endpoints",
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "This means that the request ID given by the user is incorrect.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "This means that the user is not authenticated with keycloak and compression with encryption can't be triggered unless the user first log in with a valid user",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "This means that the ID doesn't exist and thus a status can't be returned.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "414": {
            "description": "This means that the the request ID is longer than the server is willing to interpret.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "This means that something has gone wrong on the burst buffer. The user is advised to wait and send the request again.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/encryption/decompress": {
      "post": {
        "description": "Decompress a dataset or subdataset (by enqueuing the request for latter processing)",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "dataSetManagement"
        ],
        "summary": "Decompress a dataset or subdataset (by enqueuing the request for latter processing)",
        "operationId": "Decompress",
        "parameters": [
          {
            "description": "parameters",
            "name": "parameters",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "required": [
                "source_system",
                "source_path"
              ],
              "properties": {
                "source_path": {
                  "type": "string"
                },
                "source_system": {
                  "type": "string"
                }
              }
            }
          }
        ],
        "responses": {
          "201": {
            "description": "The response code means that the decompression has been initiated. Status of the operation can be checked by querying the status.",
            "schema": {
              "$ref": "#/definitions/RequestID"
            }
          },
          "400": {
            "description": "This means that there's something wrong in the input parameters and the server couldn't understand the request.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "This means that the user is not authenticated with keycloak and decompression can't be triggered unless the user first log in with a valid user",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "This means that the resource the user is trying to compress is not readable by the user. User doesn't have the correct rights to read the source file.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "This means that either the source path on the system doesn't exist.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "414": {
            "description": "This means that the either the source path is longer than the server is willing to interpret.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "429": {
            "description": "This means that the user has sent too many requests in a given amount of time. The user is advised to wait and send the request again.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "This means that something has gone wrong on the burst buffer. The user is advised to wait and send the request again.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/encryption/decompress/{request_id}": {
      "get": {
        "security": [],
        "description": "Check the status of a decompression",
        "produces": [
          "application/json"
        ],
        "tags": [
          "dataSetManagement"
        ],
        "summary": "Check the status of a decompression",
        "operationId": "CheckDecompressionStatus",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "name": "request_id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "This means that the status has been returned to the user in the response body.",
            "schema": {
              "type": "object",
              "required": [
                "status"
              ],
              "properties": {
                "status": {
                  "type": "string"
                },
                "target_path": {
                  "description": "Single path for encryption endpoints",
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "This means that the request ID given by the user is incorrect.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "This means that the user is not authenticated with keycloak and decompression can't be triggered unless the user first log in with a valid user",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "This means that the ID doesn't exist and thus a status can't be returned.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "414": {
            "description": "This means that the the request ID is longer than the server is willing to interpret.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "This means that something has gone wrong on the burst buffer. The user is advised to wait and send the request again.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/encryption/decrypt": {
      "post": {
        "description": "Decrypt a dataset or subdataset (by enqueuing the request for latter processing)",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "dataSetManagement"
        ],
        "summary": "Decrypt a dataset or subdataset (by enqueuing the request for latter processing)",
        "operationId": "Decrypt",
        "parameters": [
          {
            "description": "parameters",
            "name": "parameters",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "required": [
                "source_system",
                "source_path",
                "project"
              ],
              "properties": {
                "project": {
                  "type": "string"
                },
                "source_path": {
                  "type": "string"
                },
                "source_system": {
                  "type": "string"
                }
              }
            }
          }
        ],
        "responses": {
          "201": {
            "description": "The response code means that the decryption has been initiated. Status of the operation can be checked by querying the status.",
            "schema": {
              "$ref": "#/definitions/RequestID"
            }
          },
          "400": {
            "description": "This means that there's something wrong in the input parameters and the server couldn't understand the request.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "This means that the user is not authenticated with keycloak and decryption can't be triggered unless the user first log in with a valid user",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "This means that the resource the user is trying to decrypt from or to is not readable. User doesn't have the correct rights to read the source file.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "This means that the source path on the system doesn't exist.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "414": {
            "description": "This means that the either the source path is longer than the server is willing to interpret.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "429": {
            "description": "This means that the user has sent too many requests in a given amount of time. The user is advised to wait and send the request again.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "This means that something has gone wrong on the burst buffer. The user is advised to wait and send the request again.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/encryption/decrypt/{request_id}": {
      "get": {
        "security": [],
        "description": "Check the status of a decryption",
        "produces": [
          "application/json"
        ],
        "tags": [
          "dataSetManagement"
        ],
        "summary": "Check the status of a decryption",
        "operationId": "CheckDecryptionStatus",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "name": "request_id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "This means that the status has been returned to the user in the response body.",
            "schema": {
              "type": "object",
              "required": [
                "status"
              ],
              "properties": {
                "status": {
                  "type": "string"
                },
                "target_path": {
                  "description": "Single path for encryption endpoints",
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "This means that the request ID given by the user is incorrect.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "This means that the user is not authenticated with keycloak and decryption can't be triggered unless the user first log in with a valid user",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "This means that the ID doesn't exist and thus a status can't be returned.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "414": {
            "description": "This means that the the request ID is longer than the server is willing to interpret.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "This means that something has gone wrong on the burst buffer. The user is advised to wait and send the request again.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/encryption/decrypt_decompress": {
      "post": {
        "description": "Decrypt and decompress a dataset or subdataset (by enqueuing the request for latter processing)",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "dataSetManagement"
        ],
        "summary": "Decrypt and decompress a dataset or subdataset (by enqueuing the request for latter processing)",
        "operationId": "DecryptDecompress",
        "parameters": [
          {
            "description": "parameters",
            "name": "parameters",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "required": [
                "source_system",
                "source_path",
                "project"
              ],
              "properties": {
                "project": {
                  "type": "string"
                },
                "source_path": {
                  "type": "string"
                },
                "source_system": {
                  "type": "string"
                }
              }
            }
          }
        ],
        "responses": {
          "201": {
            "description": "The response code means that the decryption and decompression has been initiated. Status of the operation can be checked by querying the status.",
            "schema": {
              "$ref": "#/definitions/RequestID"
            }
          },
          "400": {
            "description": "This means that there's something wrong in the input parameters and the server couldn't understand the request.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "This means that the user is not authenticated with keycloak decryption with decompression can't be triggered unless the user first log in with a valid user",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "This means that the resource the user is trying to decrypt and decompress from or to is not readable or writable by the user. User doesn't have the correct rights to read the source file.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "This means that either the source path on the system doesn't exist.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "414": {
            "description": "This means that the either the source path is longer than the server is willing to interpret.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "429": {
            "description": "This means that the user has sent too many requests in a given amount of time. The user is advised to wait and send the request again.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "This means that something has gone wrong on the burst buffer. The user is advised to wait and send the request again.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/encryption/decrypt_decompress/{request_id}": {
      "get": {
        "security": [],
        "description": "Check the status of decryption with decompression",
        "produces": [
          "application/json"
        ],
        "tags": [
          "dataSetManagement"
        ],
        "summary": "Check the status of decryption with decompression",
        "operationId": "CheckDecryptionDecompressionStatus",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "name": "request_id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "This means that the status has been returned to the user in the response body.",
            "schema": {
              "type": "object",
              "required": [
                "status"
              ],
              "properties": {
                "status": {
                  "type": "string"
                },
                "target_path": {
                  "description": "Single path for encryption endpoints",
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "This means that the request ID given by the user is incorrect.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "This means that the user is not authenticated with keycloak and decryption with decompression can't be triggered unless the user first log in with a valid user",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "This means that the ID doesn't exist and thus a status can't be returned.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "414": {
            "description": "This means that the the request ID is longer than the server is willing to interpret.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "This means that something has gone wrong on the burst buffer. The user is advised to wait and send the request again.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/encryption/encrypt": {
      "post": {
        "description": "Encrypt a dataset or subdataset (by enqueuing the request for latter processing)",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "dataSetManagement"
        ],
        "summary": "Encrypt a dataset or subdataset (by enqueuing the request for latter processing)",
        "operationId": "Encrypt",
        "parameters": [
          {
            "description": "parameters",
            "name": "parameters",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "required": [
                "source_system",
                "source_path",
                "project"
              ],
              "properties": {
                "project": {
                  "type": "string"
                },
                "source_path": {
                  "type": "string"
                },
                "source_system": {
                  "type": "string"
                }
              }
            }
          }
        ],
        "responses": {
          "201": {
            "description": "The response code means that the encryption has been initiated. Status of the operation can be checked by querying the status.",
            "schema": {
              "$ref": "#/definitions/RequestID"
            }
          },
          "400": {
            "description": "This means that there's something wrong in the input parameters and the server couldn't understand the request.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "This means that the user is not authenticated with keycloak and encryption can't be triggered unless the user first log in with a valid user",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "This means that the resource the user is trying to encrypt from or to is not readable. User doesn't have the correct rights to read the source file.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "This means that the source path on the system doesn't exist.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "414": {
            "description": "This means that the source path is longer than the server is willing to interpret.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "429": {
            "description": "This means that the user has sent too many requests in a given amount of time. The user is advised to wait and send the request again.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "This means that something has gone wrong on the burst buffer. The user is advised to wait and send the request again.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/encryption/encrypt/{request_id}": {
      "get": {
        "security": [],
        "description": "Check the status of a encryption",
        "produces": [
          "application/json"
        ],
        "tags": [
          "dataSetManagement"
        ],
        "summary": "Check the status of a encryption",
        "operationId": "CheckEncryptionStatus",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "name": "request_id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "This means that the status has been returned to the user in the response body.",
            "schema": {
              "type": "object",
              "required": [
                "status"
              ],
              "properties": {
                "status": {
                  "type": "string"
                },
                "target_path": {
                  "description": "Single path for encryption endpoints",
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "This means that the request ID given by the user is incorrect.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "This means that the user is not authenticated with keycloak and encryption can't be triggered unless the user first log in with a valid user",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "This means that the ID doesn't exist and thus a status can't be returned.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "414": {
            "description": "This means that the the request ID is longer than the server is willing to interpret.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "This means that something has gone wrong on the burst buffer. The user is advised to wait and send the request again.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/gridftp/gridmap": {
      "post": {
        "description": "Add a DN entry to the DDI B2STAGE GridFTP service",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "dataSetManagement",
          "gridftp"
        ],
        "summary": "Add a DN entry to the DDI B2STAGE GridFTP service",
        "operationId": "AddGridmapEntry",
        "parameters": [
          {
            "description": "parameters",
            "name": "parameters",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "required": [
                "dn"
              ],
              "properties": {
                "dn": {
                  "type": "string"
                },
                "user": {
                  "type": "string"
                }
              }
            }
          }
        ],
        "responses": {
          "201": {
            "description": "DN added"
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "502": {
            "description": "Bad Gateway",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "503": {
            "description": "Server error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      },
      "delete": {
        "description": "Remove a DN entry to the DDI B2STAGE GridFTP service",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "dataSetManagement",
          "gridftp"
        ],
        "summary": "Remove a DN entry to the DDI B2STAGE GridFTP service",
        "operationId": "RemoveGridmapEntry",
        "parameters": [
          {
            "description": "parameters",
            "name": "parameters",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "user": {
                  "type": "string"
                }
              }
            }
          }
        ],
        "responses": {
          "204": {
            "description": "DN removed"
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "502": {
            "description": "Bad Gateway",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "503": {
            "description": "Server error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/pid/assign": {
      "post": {
        "description": "This is called when a user requests PID assignment to a dataset.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "dataSetManagement",
          "EUDATReplication"
        ],
        "summary": "This is called when a user requests PID assignment to a dataset.",
        "operationId": "PID",
        "parameters": [
          {
            "description": "parameters",
            "name": "parameters",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "required": [
                "source_system",
                "source_path"
              ],
              "properties": {
                "parent_pid": {
                  "type": "string"
                },
                "source_path": {
                  "type": "string"
                },
                "source_system": {
                  "type": "string"
                }
              }
            }
          }
        ],
        "responses": {
          "201": {
            "description": "This is called when a user requests PID assignment to a dataset.",
            "schema": {
              "$ref": "#/definitions/RequestID"
            }
          },
          "400": {
            "description": "This means that there's something wrong in the input parameters and the server couldn't understand the request.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "This means that the user is not authenticated with keycloak and data transfer can't be triggered unless the user first log in with a valid user",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "This means that the resource the user is trying to transfer from or to is not readable or writable by the user. User doesn't have the correct rights to either read the source file or write on the target system location.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "This means that either the source path or the the target path on the system doesn't exist.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "414": {
            "description": "This means that the either the source path or the target path is longer than the server is willing to interpret.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "429": {
            "description": "This means that the user has sent too many requests in a given amount of time. The user is advised to wait and send the request again.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "This means that something has gone wrong on the data transfer steering server. The user is advised to wait and send the request again.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/pid/{request_id}": {
      "get": {
        "description": "This is called when a user requests to check the status of his data replication",
        "produces": [
          "application/json"
        ],
        "tags": [
          "dataSetManagement",
          "EUDATReplication"
        ],
        "summary": "This is called when a user requests to check the status of the PID assignment",
        "operationId": "CheckPIDStatus",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "name": "request_id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "This means that the status has been returned to the user in the response body.",
            "schema": {
              "$ref": "#/definitions/DataReplication"
            }
          },
          "400": {
            "description": "This means that there's something wrong in the input parameters and the server couldn't understand the request.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "This means that the user is not authenticated with keycloak and data transfer can't be triggered unless the user first log in with a valid user",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "This means that the resource the user is trying to transfer from or to is not readable or writable by the user. User doesn't have the correct rights to either read the source file or write on the target system location.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "This means that either the source path or the the target path on the system doesn't exist.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "414": {
            "description": "This means that the either the source path or the target path is longer than the server is willing to interpret.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "429": {
            "description": "This means that the user has sent too many requests in a given amount of time. The user is advised to wait and send the request again.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "This means that something has gone wrong on the data transfer steering server. The user is advised to wait and send the request again.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/project": {
      "post": {
        "description": "Create a project in iRODS WP3 DDI",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "dataSetManagement",
          "iRODSPermissionManagement"
        ],
        "summary": "Create a project in iRODS WP3 DDI",
        "operationId": "CreateProject",
        "parameters": [
          {
            "name": "ProjectInfo",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "required": [
                "projectname"
              ],
              "properties": {
                "projectname": {
                  "description": "Project name (Keycloak group)",
                  "type": "string"
                }
              }
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Project was created"
          },
          "400": {
            "description": "Malformed request",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "Permission denied",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "409": {
            "description": "Conflict: the project already exists",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "Internal error processing request",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "502": {
            "description": "Bad Gateway",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      },
      "delete": {
        "description": "Delete a project in iRODS WP3 DDI.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "dataSetManagement"
        ],
        "summary": "Delete a project in iRODS WP3 DDI",
        "operationId": "DeleteProject",
        "parameters": [
          {
            "name": "ProjectInfo",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "required": [
                "name"
              ],
              "properties": {
                "name": {
                  "description": "Project name (Keycloak group)",
                  "type": "string"
                }
              }
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Project was deleted or does not exist"
          },
          "400": {
            "description": "Malformed request",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "Internal error processing request",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "502": {
            "description": "Bad Gateway",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/project/admin": {
      "post": {
        "description": "Add an administrator user to a project in iRODS WP3 DDI",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "dataSetManagement",
          "iRODSPermissionManagement"
        ],
        "summary": "Add an administrator user to a project in iRODS WP3 DDI",
        "operationId": "AddProjectAdmin",
        "parameters": [
          {
            "name": "ProjectAndUserInfo",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UserInProject"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Admin was added to Project"
          },
          "400": {
            "description": "Malformed request",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "409": {
            "description": "Conflict, action could not be performed",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "Internal error processing request",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "502": {
            "description": "Bad Gateway",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      },
      "delete": {
        "description": "Remove user from project in iRODS WP3 DDI",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "dataSetManagement",
          "iRODSPermissionManagement"
        ],
        "summary": "Remove user from project in iRODS WP3 DDI",
        "operationId": "DeleteProjectAdmin",
        "parameters": [
          {
            "name": "ProjectAndUserInfo",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UserInProject"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "User was deleted from admin status"
          },
          "400": {
            "description": "Malformed request",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "409": {
            "description": "Conflict, action could not be performed",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "Internal error processing request",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "502": {
            "description": "Bad Gateway",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/project/user": {
      "post": {
        "description": "Add a user to a project in iRODS WP3 DDI",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "dataSetManagement",
          "iRODSPermissionManagement"
        ],
        "summary": "Add a user to a project in iRODS WP3 DDI",
        "operationId": "AddProjectUser",
        "parameters": [
          {
            "name": "ProjectAndUserInfo",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UserInProject"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "User was added to the project",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "400": {
            "description": "Malformed request",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "409": {
            "description": "Conflict, action could not be performed",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "Internal error processing request",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "502": {
            "description": "Bad Gateway",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      },
      "delete": {
        "description": "Remove user from project in iRODS WP3 DDI",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "dataSetManagement"
        ],
        "summary": "Remove user from project in iRODS WP3 DDI",
        "operationId": "DeleteProjectUser",
        "parameters": [
          {
            "name": "ProjectAndUserInfo",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UserInProject"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "User was removed from project"
          },
          "400": {
            "description": "Malformed request",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "409": {
            "description": "Conflict, action could not be performed",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "Internal error processing request",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "502": {
            "description": "Bad Gateway",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/replicate": {
      "post": {
        "description": "This is called when a user requests data to be replicated between different systems. The request will be added to the jobs queue.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "dataSetManagement",
          "EUDATReplication"
        ],
        "summary": "This is called when a user requests data to be replicated between different systems. The request will be added to the jobs queue.",
        "operationId": "Replicate",
        "parameters": [
          {
            "description": "parameters",
            "name": "parameters",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "required": [
                "source_system",
                "source_path",
                "target_system"
              ],
              "properties": {
                "source_path": {
                  "type": "string"
                },
                "source_system": {
                  "type": "string"
                },
                "target_path": {
                  "type": "string"
                },
                "target_system": {
                  "type": "string"
                }
              }
            }
          }
        ],
        "responses": {
          "201": {
            "description": "The response code means that the data transfer has been initiated. Status of the transfer can be checked by querying the status.",
            "schema": {
              "$ref": "#/definitions/RequestID"
            }
          },
          "400": {
            "description": "This means that there's something wrong in the input parameters and the server couldn't understand the request.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "This means that the user is not authenticated with keycloak and data transfer can't be triggered unless the user first log in with a valid user",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "This means that the resource the user is trying to transfer from or to is not readable or writable by the user. User doesn't have the correct rights to either read the source file or write on the target system location.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "This means that either the source path or the the target path on the system doesn't exist.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "414": {
            "description": "This means that the either the source path or the target path is longer than the server is willing to interpret.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "429": {
            "description": "This means that the user has sent too many requests in a given amount of time. The user is advised to wait and send the request again.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "This means that something has gone wrong on the data transfer steering server. The user is advised to wait and send the request again.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/replicate/{request_id}": {
      "get": {
        "description": "This is called when a user requests to check the status of his data replication",
        "produces": [
          "application/json"
        ],
        "tags": [
          "dataSetManagement",
          "EUDATReplication"
        ],
        "summary": "This is called when a user requests to check the status of his data replication",
        "operationId": "CheckReplicateStatus",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "name": "request_id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "This means that the status has been returned to the user in the response body.",
            "schema": {
              "$ref": "#/definitions/DataReplication"
            }
          },
          "400": {
            "description": "This means that there's something wrong in the input parameters and the server couldn't understand the request.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "This means that the user is not authenticated with keycloak and data transfer can't be triggered unless the user first log in with a valid user",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "This means that the resource the user is trying to transfer from or to is not readable or writable by the user. User doesn't have the correct rights to either read the source file or write on the target system location.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "This means that either the source path or the the target path on the system doesn't exist.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "414": {
            "description": "This means that the either the source path or the target path is longer than the server is willing to interpret.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "429": {
            "description": "This means that the user has sent too many requests in a given amount of time. The user is advised to wait and send the request again.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "This means that something has gone wrong on the data transfer steering server. The user is advised to wait and send the request again.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/ssh/sshfsexport": {
      "post": {
        "description": "Export a directory of the DDI for use via SSHFS",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "dataSetManagement",
          "sshfsexport"
        ],
        "summary": "Export a directory of the DDI for use via SSHFS",
        "operationId": "CreateSSHFSExport",
        "parameters": [
          {
            "description": "parameters",
            "name": "parameters",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "required": [
                "host",
                "pubkey",
                "path"
              ],
              "properties": {
                "host": {
                  "type": "string",
                  "example": "141.40.145.102"
                },
                "path": {
                  "type": "string"
                },
                "pubkey": {
                  "type": "string"
                }
              }
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Export created",
            "schema": {
              "type": "object",
              "required": [
                "user",
                "sshfs"
              ],
              "properties": {
                "sshfs": {
                  "type": "string",
                  "example": "qlecvxbndl@lexis-test.srv.lrz.de:"
                },
                "user": {
                  "type": "string",
                  "example": "qlecvxbndl"
                }
              }
            }
          },
          "400": {
            "description": "This means that there's something wrong in the input parameters and the server couldn't understand the request.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "This means that the user is not authenticated with keycloak and data transfer can't be triggered unless the user first log in with a valid user",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "This means that the resource the user is trying to transfer from or to is not readable or writable by the user. User doesn't have the correct rights to either read the source file or write on the target system location.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "503": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      },
      "delete": {
        "description": "Remove an SSHFS export of a directory of the DDI",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "dataSetManagement",
          "sshfsexport"
        ],
        "summary": "Export a directory of the DDI for use via SSHFS",
        "operationId": "DeleteSSHFSExport",
        "parameters": [
          {
            "description": "parameters",
            "name": "parameters",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "required": [
                "user",
                "path"
              ],
              "properties": {
                "path": {
                  "type": "string"
                },
                "user": {
                  "type": "string",
                  "example": "qlecvxbndl"
                }
              }
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Export removed"
          },
          "400": {
            "description": "This means that there's something wrong in the input parameters and the server couldn't understand the request.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "This means that the user is not authenticated with keycloak and data transfer can't be triggered unless the user first log in with a valid user",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "This means that the resource the user is trying to transfer from or to is not readable or writable by the user. User doesn't have the correct rights to either read the source file or write on the target system location.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "The resource (username, path or both) does not exist",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "502": {
            "description": "Bad Gateway",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "503": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/staging/delete": {
      "delete": {
        "description": "This is called when a user request to delete data. This is only allowed on the staging systems.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "staging",
          "dataSetManagement"
        ],
        "summary": "This is called when a user request to delete data. This is only allowed on the staging systems.",
        "operationId": "Delete",
        "parameters": [
          {
            "description": "parameters",
            "name": "parameters",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "required": [
                "target_system",
                "target_path"
              ],
              "properties": {
                "target_path": {
                  "type": "string"
                },
                "target_system": {
                  "type": "string"
                }
              }
            }
          }
        ],
        "responses": {
          "201": {
            "description": "The response code means that the data deletion has been initiated. Status of the deletion can be checked by querying the status.",
            "schema": {
              "$ref": "#/definitions/RequestID"
            }
          },
          "400": {
            "description": "This means that there's something wrong in the input parameters and the server couldn't understand the request.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "This means that the user is not authenticated with keycloak and data deletion can't be triggered unless the user first log in with a valid user",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "This means that the resource the user is trying to delete from or to is not readable or writable by the user. User doesn't have the correct rights to delete the data on the target system location.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "This means that the the target path on the system doesn't exist.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "414": {
            "description": "This means that the the target path is longer than the server is willing to interpret.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "429": {
            "description": "This means that the user has sent too many requests in a given amount of time. The user is advised to wait and send the request again.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "This means that something has gone wrong on the data transfer steering server. The user is advised to wait and send the request again.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/staging/delete/{request_id}": {
      "get": {
        "security": [],
        "description": "Check the status of a delete request",
        "produces": [
          "application/json"
        ],
        "tags": [
          "staging",
          "dataSetManagement"
        ],
        "summary": "Check the status of a delete request",
        "operationId": "CheckDeletionStatus",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "name": "request_id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "This means that the status has been returned to the user in the response body.",
            "schema": {
              "type": "object",
              "required": [
                "status"
              ],
              "properties": {
                "status": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "This means that the request ID given by the user is incorrect.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "This means that the user is not authenticated with keycloak and data transfer can't be triggered unless the user first log in with a valid user",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "This means that the ID doesn't exist and thus a status can't be returned.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "414": {
            "description": "This means that the the request ID is longer than the server is willing to interpret.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "This means that something has gone wrong on the data transfer steering server. The user is advised to wait and send the request again.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/staging/download": {
      "post": {
        "description": "Download from staging zone",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json",
          "application/octet-stream"
        ],
        "tags": [
          "dataSetManagement"
        ],
        "summary": "Download from staging zone",
        "parameters": [
          {
            "name": "parameters",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "required": [
                "source_system",
                "source_path"
              ],
              "properties": {
                "source_path": {
                  "type": "string"
                },
                "source_system": {
                  "type": "string",
                  "enum": [
                    "lrz_staging_area"
                  ]
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request",
            "schema": {
              "type": "file"
            }
          },
          "400": {
            "description": "Malformed Request",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "502": {
            "description": "Bad Gateway",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "503": {
            "description": "Server error",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/staging/duplicate": {
      "post": {
        "description": "Duplicate a dataset or subdataset (by enqueuing the request for latter processing)",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "staging",
          "dataSetManagement"
        ],
        "summary": "Duplicate a dataset or subdataset (by enqueuing the request for latter processing)",
        "operationId": "Duplicate",
        "parameters": [
          {
            "description": "parameters",
            "name": "parameters",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "required": [
                "source_system",
                "source_path"
              ],
              "properties": {
                "source_path": {
                  "type": "string"
                },
                "source_system": {
                  "type": "string"
                },
                "target_path": {
                  "type": "string"
                },
                "target_system": {
                  "type": "string"
                },
                "title": {
                  "type": "string"
                }
              }
            }
          }
        ],
        "responses": {
          "201": {
            "description": "The response code means that the duplication has been initiated. Status of the transfer can be checked by querying the status.",
            "schema": {
              "$ref": "#/definitions/RequestID"
            }
          },
          "400": {
            "description": "This means that there's something wrong in the input parameters and the server couldn't understand the request.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "This means that the user is not authenticated with keycloak and duplication can't be triggered unless the user first log in with a valid user",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "This means that the resource the user is trying to duplicate from or to is not readable or writable by the user. User doesn't have the correct rights to either read the source file or write on the target system location.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "This means that either the source path or the the target path on the system doesn't exist.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "414": {
            "description": "This means that the either the source path or the target path is longer than the server is willing to interpret.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "429": {
            "description": "This means that the user has sent too many requests in a given amount of time. The user is advised to wait and send the request again.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "This means that something has gone wrong on the data transfer steering server. The user is advised to wait and send the request again.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/staging/duplicate/{request_id}": {
      "get": {
        "security": [],
        "description": "Check the status of duplication",
        "produces": [
          "application/json"
        ],
        "tags": [
          "staging",
          "dataSetManagement"
        ],
        "summary": "Check the status of duplication",
        "operationId": "CheckDuplicationStatus",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "name": "request_id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "This means that the status has been returned to the user in the response body.",
            "schema": {
              "type": "object",
              "required": [
                "status"
              ],
              "properties": {
                "status": {
                  "type": "string"
                },
                "target_path": {
                  "description": "Single path for staging endpoints",
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "This means that the request ID given by the user is incorrect.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "This means that the user is not authenticated with keycloak and duplication can't be triggered unless the user first log in with a valid user",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "This means that the ID doesn't exist and thus a status can't be returned.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "414": {
            "description": "This means that the the request ID is longer than the server is willing to interpret.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "This means that something has gone wrong on the data transfer steering server. The user is advised to wait and send the request again.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/staging/info": {
      "get": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "staging",
          "dataSetManagement"
        ],
        "summary": "Lists possible target / source systems",
        "operationId": "StagingInfo",
        "responses": {
          "200": {
            "description": "List of possible target / source",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        }
      }
    },
    "/staging/stage": {
      "post": {
        "description": "Stage a dataset or subdataset (by enqueuing the request for latter processing)",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "staging",
          "dataSetManagement"
        ],
        "summary": "Stage a dataset or subdataset (by enqueuing the request for latter processing)",
        "operationId": "Stage",
        "parameters": [
          {
            "description": "parameters",
            "name": "parameters",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "required": [
                "source_system",
                "source_path",
                "target_system",
                "target_path",
                "encryption",
                "compression"
              ],
              "properties": {
                "compression": {
                  "type": "string",
                  "enum": [
                    "yes",
                    "no"
                  ]
                },
                "encryption": {
                  "type": "string",
                  "enum": [
                    "yes",
                    "no"
                  ]
                },
                "heappe_url": {
                  "type": "string"
                },
                "job_id": {
                  "type": "integer"
                },
                "metadata": {
                  "$ref": "#/definitions/Metadata"
                },
                "source_path": {
                  "type": "string"
                },
                "source_system": {
                  "type": "string"
                },
                "target_path": {
                  "type": "string"
                },
                "target_system": {
                  "type": "string"
                },
                "task_id": {
                  "type": "integer"
                }
              }
            }
          }
        ],
        "responses": {
          "201": {
            "description": "The response code means that the data transfer has been initiated. Status of the transfer can be checked by querying the status.",
            "schema": {
              "$ref": "#/definitions/RequestID"
            }
          },
          "400": {
            "description": "This means that there's something wrong in the input parameters and the server couldn't understand the request.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "This means that the user is not authenticated with keycloak and data transfer can't be triggered unless the user first log in with a valid user",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "This means that the resource the user is trying to transfer from or to is not readable or writable by the user. User doesn't have the correct rights to either read the source file or write on the target system location.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "This means that either the source path or the the target path on the system doesn't exist.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "414": {
            "description": "This means that the either the source path or the target path is longer than the server is willing to interpret.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "429": {
            "description": "This means that the user has sent too many requests in a given amount of time. The user is advised to wait and send the request again.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "This means that something has gone wrong on the data transfer steering server. The user is advised to wait and send the request again.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/staging/stage/{request_id}": {
      "get": {
        "security": [],
        "description": "Check the status of a transfer",
        "produces": [
          "application/json"
        ],
        "tags": [
          "staging",
          "dataSetManagement"
        ],
        "summary": "Check the status of a transfer",
        "operationId": "CheckStageStatus",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "name": "request_id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "This means that the status has been returned to the user in the response body.",
            "schema": {
              "type": "object",
              "required": [
                "status"
              ],
              "properties": {
                "status": {
                  "type": "string"
                },
                "target_path": {
                  "description": "Single path for staging endpoints",
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "This means that the request ID given by the user is incorrect.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "This means that the user is not authenticated with keycloak and data transfer can't be triggered unless the user first log in with a valid user",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "404": {
            "description": "This means that the ID doesn't exist and thus a status can't be returned.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "414": {
            "description": "This means that the the request ID is longer than the server is willing to interpret.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "This means that something has gone wrong on the data transfer steering server. The user is advised to wait and send the request again.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/status": {
      "get": {
        "security": [
          {
            "Keycloak": [
              "user"
            ]
          },
          {
            "APIKeyHeader": []
          },
          {
            "APIKeyParam": []
          }
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "statusManagement"
        ],
        "summary": "Basic status of the system",
        "operationId": "showStatus",
        "responses": {
          "200": {
            "description": "Status information of the system",
            "schema": {
              "$ref": "#/definitions/Status"
            }
          }
        }
      }
    },
    "/status/{id}": {
      "get": {
        "security": [
          {
            "Keycloak": [
              "user"
            ]
          },
          {
            "APIKeyHeader": []
          },
          {
            "APIKeyParam": []
          }
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "statusManagement"
        ],
        "summary": "Basic status of the system",
        "operationId": "getStatus",
        "parameters": [
          {
            "enum": [
              "status",
              "certificate",
              "cloudnfs",
              "compress",
              "datasetManager",
              "gridmap",
              "project",
              "replicate",
              "sshfs",
              "stagingDownload",
              "steering",
              "support",
              "tus",
              "user"
            ],
            "type": "string",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Status information of the system",
            "schema": {
              "$ref": "#/definitions/Status"
            }
          },
          "404": {
            "description": "The endpoint provided doesn't exist",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/support": {
      "post": {
        "description": "Add a user to a support duties in iRODS WP3 DDI",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "dataSetManagement",
          "iRODSPermissionManagement"
        ],
        "summary": "Add a user to a support duties in iRODS WP3 DDI",
        "operationId": "AddSupportUser",
        "parameters": [
          {
            "name": "Username",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "required": [
                "username"
              ],
              "properties": {
                "username": {
                  "description": "Keycloak / iRODS Username",
                  "type": "string"
                }
              }
            }
          }
        ],
        "responses": {
          "201": {
            "description": "User was added to support group"
          },
          "400": {
            "description": "Malformed request",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "Internal error processing request",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "502": {
            "description": "Bad Gateway",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      },
      "delete": {
        "description": "Remove user from support duties in iRODS WP3 DDI",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "dataSetManagement"
        ],
        "summary": "Remove user from support duties in iRODS WP3 DDI",
        "operationId": "DeleteSupportUser",
        "parameters": [
          {
            "name": "Username",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "required": [
                "username"
              ],
              "properties": {
                "username": {
                  "description": "Keycloak / iRODS Username",
                  "type": "string"
                }
              }
            }
          }
        ],
        "responses": {
          "204": {
            "description": "User was removed from support duties"
          },
          "400": {
            "description": "Malformed request",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "Internal error processing request",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "502": {
            "description": "Bad Gateway",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/user": {
      "post": {
        "description": "Create a user in iRODS WP3 DDI and connect to Keycloak",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "dataSetManagement",
          "iRODSPermissionManagement"
        ],
        "summary": "Create a user in iRODS WP3 DDI and connect to Keycloak",
        "operationId": "CreateUser",
        "parameters": [
          {
            "name": "UserInfo",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "required": [
                "username",
                "id"
              ],
              "properties": {
                "id": {
                  "description": "Keycloak ID",
                  "type": "string",
                  "format": "uuid",
                  "example": "aaaaaa-bbbb-cccc-dddd-eeeeeeeeeeee"
                },
                "username": {
                  "description": "Keycloak Username",
                  "type": "string"
                }
              }
            }
          }
        ],
        "responses": {
          "201": {
            "description": "User was created"
          },
          "400": {
            "description": "Malformed request",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "403": {
            "description": "Permission denied",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "409": {
            "description": "User already exists",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "Internal error processing request",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "502": {
            "description": "Bad Gateway",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "503": {
            "description": "Service Unavailable",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      },
      "delete": {
        "description": "Delete a user in iRODS WP3 DDI.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "dataSetManagement",
          "iRODSPermissionManagement"
        ],
        "summary": "Delete a user in iRODS WP3 DDI",
        "operationId": "DeleteUser",
        "parameters": [
          {
            "name": "User",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "required": [
                "username"
              ],
              "properties": {
                "username": {
                  "description": "Keycloak Username",
                  "type": "string"
                }
              }
            }
          }
        ],
        "responses": {
          "204": {
            "description": "User was deleted"
          },
          "400": {
            "description": "Malformed request",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "500": {
            "description": "Internal error processing request",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          },
          "502": {
            "description": "Bad Gateway",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            }
          }
        }
      }
    }
  },
  "definitions": {
    "AccessMode": {
      "type": "string",
      "enum": [
        "public",
        "project",
        "user"
      ]
    },
    "ArchiveType": {
      "type": "string",
      "enum": [
        "zip",
        "file"
      ]
    },
    "CompressMethod": {
      "type": "string",
      "enum": [
        "zip",
        "file"
      ]
    },
    "DataEncryption": {
      "type": "object",
      "required": [
        "status"
      ],
      "properties": {
        "status": {
          "description": "Status of the data encryption/decryption/compression/decompression process",
          "type": "string",
          "example": "Encryption completed"
        },
        "target_path": {
          "description": "Path to where the data are encrypted",
          "type": "string",
          "example": "/srv/staging_area/burst_buffer/81559c0e-a433-11eb-95ce-3868dd145170/833290c2-a433-11eb-95ce-3868dd145170"
        }
      }
    },
    "DataReplication": {
      "type": "object",
      "required": [
        "status"
      ],
      "properties": {
        "PID": {
          "description": "EUDAT PID of the replicated data",
          "type": "string",
          "example": "1001/e4495e44-dc84-11ea-9c37-0050568f81d2"
        },
        "status": {
          "description": "Status of the data replication process",
          "type": "string",
          "example": "Replication completed"
        },
        "target_path": {
          "description": "Path to where the data are replicated",
          "type": "string",
          "example": "/IT4ILexisZone/project/proj1fc54ae5e387be0d369eddddc2010e5e/datasetL4988"
        }
      }
    },
    "DataSize": {
      "type": "object",
      "required": [
        "result"
      ],
      "properties": {
        "result": {
          "description": "Status of the datasize get process",
          "type": "string",
          "example": "Done"
        },
        "size": {
          "description": "dataset size",
          "type": "string",
          "example": "45645352354"
        },
        "smallfiles": {
          "description": "dataset files smaller than 32 MB",
          "type": "string",
          "example": "2"
        },
        "totalfiles": {
          "description": "dataset files",
          "type": "string",
          "example": "343"
        }
      }
    },
    "DatasetContent": {
      "type": "object",
      "required": [
        "name",
        "type"
      ],
      "properties": {
        "checksum": {
          "type": "string"
        },
        "contents": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/DatasetContent"
          }
        },
        "create_time": {
          "type": "string"
        },
        "name": {
          "description": "filename",
          "type": "string"
        },
        "size": {
          "type": "integer"
        },
        "type": {
          "description": "directory or file",
          "type": "string"
        }
      }
    },
    "ErrorResponse": {
      "type": "object",
      "required": [
        "errorString"
      ],
      "properties": {
        "errorString": {
          "type": "string"
        }
      }
    },
    "Eudat": {
      "type": "object",
      "properties": {
        "EUDAT/FIO": {
          "type": "string"
        },
        "EUDAT/FIXED_CONTENT": {
          "type": "string"
        },
        "EUDAT/PARENT": {
          "type": "string"
        },
        "EUDAT/REPLICA": {
          "type": "string"
        },
        "EUDAT/ROR": {
          "type": "string"
        },
        "PID": {
          "type": "string"
        }
      }
    },
    "ItemCreatedResponse": {
      "type": "object",
      "required": [
        "status",
        "internalID"
      ],
      "properties": {
        "internalID": {
          "type": "string"
        },
        "status": {
          "description": "HTTP status code",
          "type": "string",
          "pattern": "[0-9][0-9][0-9]",
          "example": "201"
        }
      }
    },
    "Location": {
      "type": "object",
      "required": [
        "access",
        "project",
        "internalID",
        "zone"
      ],
      "properties": {
        "access": {
          "$ref": "#/definitions/AccessMode"
        },
        "internalID": {
          "type": "string"
        },
        "project": {
          "type": "string"
        },
        "zone": {
          "type": "string",
          "example": "LRZLexisZone"
        }
      }
    },
    "Message": {
      "type": "object",
      "required": [
        "message"
      ],
      "properties": {
        "message": {
          "type": "string"
        }
      }
    },
    "Metadata": {
      "type": "object",
      "properties": {
        "AlternateIdentifier": {
          "description": "DataCite AlternateIdentifier",
          "type": "array",
          "items": {
            "description": "Pairs [AlternateIdentifierType, AlternateIdentifier]",
            "type": "array",
            "maxItems": 2,
            "minItems": 2,
            "items": {
              "type": "string"
            }
          }
        },
        "CreationDate": {
          "type": "string"
        },
        "CustomMetadata": {
          "type": "object"
        },
        "CustomMetadataSchema": {
          "type": "array",
          "items": {
            "type": "object"
          }
        },
        "Description": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "contributor": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "creator": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "format": {
          "type": "string"
        },
        "identifier": {
          "description": "Datacite identifier (doi), unused for now",
          "type": "string"
        },
        "owner": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "publicationYear": {
          "type": "string"
        },
        "publisher": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "relatedIdentifier": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "relatedSoftware": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "resourceType": {
          "type": "string"
        },
        "resourceTypeGeneral": {
          "type": "string",
          "enum": [
            "Audiovisual",
            "Collection",
            "DataPaper",
            "Dataset",
            "Event",
            "Image",
            "InteractiveResource",
            "Model",
            "PhysicalObject",
            "Service",
            "Software",
            "Sound",
            "Text",
            "Workflow",
            "Other"
          ]
        },
        "rights": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "rightsIdentifier": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "rightsURI": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "scope": {
          "type": "string"
        },
        "title": {
          "type": "string"
        }
      }
    },
    "MetadataQuery": {
      "type": "object",
      "properties": {
        "AlternateIdentifier": {
          "description": "DataCite AlternateIdentifier",
          "type": "string"
        },
        "AlternateIdentifierType": {
          "description": "DataCite AlternateIdentifierType. Size must match AlternateIdentifier",
          "type": "string"
        },
        "CreationDate": {
          "type": "string"
        },
        "CustomMetadata": {
          "type": "object"
        },
        "Description": {
          "type": "string"
        },
        "EUDAT/FIO": {
          "type": "string"
        },
        "EUDAT/FIXED_CONTENT": {
          "type": "string"
        },
        "EUDAT/PARENT": {
          "type": "string"
        },
        "EUDAT/REPLICA": {
          "type": "string"
        },
        "EUDAT/ROR": {
          "type": "string"
        },
        "PID": {
          "type": "string"
        },
        "access": {
          "$ref": "#/definitions/AccessMode"
        },
        "contributor": {
          "type": "string"
        },
        "creator": {
          "type": "string"
        },
        "format": {
          "type": "string"
        },
        "identifier": {
          "description": "DataCite identifier (DOI), unused for now",
          "type": "string"
        },
        "internalID": {
          "description": "iRODS identifier",
          "type": "string"
        },
        "owner": {
          "type": "string"
        },
        "project": {
          "type": "string"
        },
        "publicationYear": {
          "type": "string"
        },
        "publisher": {
          "type": "string"
        },
        "relatedIdentifier": {
          "type": "string"
        },
        "relatedSoftware": {
          "type": "string"
        },
        "resourceType": {
          "type": "string"
        },
        "resourceTypeGeneral": {
          "type": "string"
        },
        "rights": {
          "type": "string"
        },
        "rightsIdentifier": {
          "type": "string"
        },
        "rightsURI": {
          "type": "string"
        },
        "scope": {
          "type": "string"
        },
        "title": {
          "type": "string"
        }
      }
    },
    "MetadataQueryResponse": {
      "type": "object",
      "required": [
        "location",
        "metadata",
        "flags"
      ],
      "properties": {
        "eudat": {
          "$ref": "#/definitions/Eudat"
        },
        "flags": {
          "$ref": "#/definitions/flags"
        },
        "location": {
          "$ref": "#/definitions/Location"
        },
        "metadata": {
          "$ref": "#/definitions/Metadata"
        }
      }
    },
    "PermissionErrorItems0": {
      "type": "object",
      "required": [
        "internalID"
      ],
      "properties": {
        "internalID": {
          "type": "string"
        }
      }
    },
    "PushMethod": {
      "type": "string",
      "enum": [
        "empty",
        "directupload",
        "tus"
      ]
    },
    "RequestID": {
      "type": "object",
      "required": [
        "request_id"
      ],
      "properties": {
        "request_id": {
          "description": "UUID",
          "type": "string",
          "format": "uuid",
          "example": "31279ed6-e7b1-4c9f-ab26-206c863a2264"
        }
      }
    },
    "Status": {
      "type": "object",
      "properties": {
        "AverageResponseTime": {
          "type": "number",
          "format": "double"
        },
        "EndpointsResponseTime": {
          "$ref": "#/definitions/StatusMetadata"
        },
        "LastRequest": {
          "type": "string"
        },
        "RequestsBoT": {
          "type": "integer"
        },
        "RequestsLastHour": {
          "type": "integer"
        },
        "RequestsToday": {
          "type": "integer"
        },
        "SystemState": {
          "type": "string"
        }
      }
    },
    "StatusMetadata": {
      "type": "object",
      "x-go-type": {
        "import": {
          "package": "gitlab.com/cyclops-utilities/datamodels"
        },
        "type": "JSONdb"
      }
    },
    "UserInProject": {
      "type": "object",
      "required": [
        "username",
        "projectname"
      ],
      "properties": {
        "projectname": {
          "description": "Project name (Keycloak group)",
          "type": "string"
        },
        "username": {
          "description": "Username (in iRODS and keycloak)",
          "type": "string"
        }
      }
    },
    "flags": {
      "type": "object",
      "properties": {
        "compression": {
          "type": "string"
        },
        "encryption": {
          "type": "string"
        }
      }
    }
  },
  "securityDefinitions": {
    "Keycloak": {
      "type": "oauth2",
      "flow": "accessCode",
      "authorizationUrl": "https:138.246.232.245:6443/auth",
      "tokenUrl": "https:138.246.232.245:6443/auth"
    }
  },
  "security": [
    {
      "Keycloak": []
    }
  ],
  "tags": [
    {
      "description": "Actions relating to management of datasets",
      "name": "dataSetManagement"
    },
    {
      "description": "Actions relating to staging datasets to other zones",
      "name": "staging"
    },
    {
      "description": "Actions related to compression of datasets into multivolume archives",
      "name": "CompressAPI"
    },
    {
      "description": "Actions related to access permissions in iRODS",
      "name": "iRODSPermissionManagement"
    },
    {
      "description": "Actions related to dataset access via gridftp (permission management)",
      "name": "gridftp"
    },
    {
      "description": "Actions related to export of staged datasets via SSHFS",
      "name": "sshfsexport"
    },
    {
      "description": "Actions relating to the reporting of the state of the service",
      "name": "statusManagement"
    }
  ]
}`))
}
